diff --git a/.babelrc b/.babelrc
index 1459076..51282bb 100644
--- a/.babelrc
+++ b/.babelrc
@@ -7,5 +7,14 @@
         "react"
       ]
     }
-  }
+  },
+  "plugins": [
+    ["module-resolver", {
+      "root": ["./src"],
+      "alias": {
+        "test": "./test",
+        "underscore": "lodash"
+      }
+    }]
+  ]
 }
diff --git a/.code.yml b/.code.yml
new file mode 100644
index 0000000..c1ccf7e
--- /dev/null
+++ b/.code.yml
@@ -0,0 +1,76 @@
+#-----------------------------
+#该文件整理完善可参考：https://iwiki.oa.tencent.com/pages/viewpage.action?pageId=113587682
+
+#-----------------------------
+
+#必选项，定义项目分支命名规范,可以根据业务实际分支类型，填写相应的命名规范，对不适合的分支项可以删除
+#所有分支命名推荐统一使用小写字母
+branch:
+  #主干，推荐命名为master
+  trunk_name: "master"
+  branch_type_A:
+    personal_feature:
+      pattern: "feat_${storyID}_${description}"
+      #storyID为需求 tapd单号
+    bugfix:
+      pattern: "fix_${bugID}_${description}"
+      #bugID为bug tapd单号
+    tag:
+      pattern: "v${versionnumber}"
+      #versionnumber特指版本号
+      versionnumber: "versionnumber={Major-version}.{Feature-version}.{Fix-version}"
+#必选项，用于说明仓库对应发布单元发布制品以及依赖制品配置文件信息
+artifact:
+  #大仓的情况，可能不同目录是不同的发布单元,下面path指定代码仓库里相应发布单元目录
+  - path: "/dist"
+    #发布单元名称
+    artifact_name: "now-h5-personal-center"
+    #发布单元类型，可选类型字段有，移动端/PC端/后台单体应用/后台微服务/web/sdk/lib/框架
+    artifact_type: "web"
+
+    #提供产品发布单元发布制品归档地址
+    #地址定义说明详见：https://git.code.oa.com/epcm/new_epc_tmp/blob/master/0F.artifacts-release-spec.md
+    repository_url: "http://yun.isd.com/index.php/package/versions/?product=other&package=now-h5-personal-center"
+
+    # 提供产品依赖制品配置文件，推荐产品项目编译过程依赖制品配置统一至一个文件中，或相同文件名中
+    dependence_conf: "package.json"
+
+#可选项，需要定义区分不同类别代码时才需要配置source
+source:
+  # 文件或目录可使用绝对或相对路径，绝对路径按代码库根目录计算，以/开头。相对路径按.code.yml所在目录来判断，以 ./开头。
+  # 提供产品代码库中编写的测试代码存放目录或文件名格式,以便后续代码统计环节进行排除等特殊处理
+  test_source:
+    #用于匹配文件; 匹配方式为正则表达式
+    filepath_regex: ["/test/**/*.test.js"]
+
+  # 提供产品代码库中工具或框架自动生成的且在代码库中的代码，没有可为空。以便后续代码统计环节进行排除等特殊处理。
+  auto_generate_source:
+  # 自动生成代码文件的正则表达式，若无统一标识格式，可以指定具体目录，样例可参考test_source举例
+    filepath_regex: ["/feflow.js", "/DevOps", "/mock", "/projects/**/*.js", "/project.js"]
+
+  # 提供产品代码库中直接以源码形式存在的第三方代码目录或代码文件名的正则表达。
+  # 此处备注的第三方代码在后续统计代码量环节会被排除，若代码库中不存在需要排除的第三方代码，该项配置标识可为空
+  third_party_source:
+    #第三方代码文件的正则表达式，若无统一标识格式，可以指定具体目录，样例可参考test_source举例
+    filepath_regex:
+
+#可选项，针对整个项目默认代码评审配置，未填写时读取对应仓库在工蜂平台对应配置
+code_review:
+  #定义产品工蜂cr的评论标签，以下是给出的推荐标签分类
+  restrict_labels: ["CR-编程规范", "CR-业务逻辑","CR-边界逻辑","CR-代码架构","CR-性能影响","CR-安全性","CR-可测试性","CR-可读性"]
+  #评审人
+  reviewers: ["linjianghe", "linkzhu", "seanxie"]
+  #必要评审人
+  necessary_reviewers: ["linjianghe"]
+
+#必选项，自定义文件或目录owner和代码评审配置
+# 文件或目录可使用绝对或相对路径，绝对路径按代码库根目录计算，以/开头。相对路径按.code.yml所在目录来判断，以 ./开头
+file :
+  - path: "./src"
+    #必填项，文件负责人
+    owners :  ["linjianghe"]
+    #必填项，文件负责人通过规则可选值 -1,0,大于等于1的整数;
+    #-1,表示需所有owner审批；
+    #0，表示该文件无需任意一个owner审批;
+    #用大于等于1的整数，表示需要相应整数个的owner审批该路径，比如2，标识需要任意两个owners审批
+    owner_rule: 1
diff --git a/.devops.yml b/.devops.yml
deleted file mode 100644
index 379c566..0000000
--- a/.devops.yml
+++ /dev/null
@@ -1,12 +0,0 @@
-enable_test: true
-project_owner:
-  - linjianghe
-notify_receiver:
-  - jsonsun
-  - linjianghe
-notifyRtxGroup :
-  - ww3017125928
-devops_app:
-  root_path: DevOps/devops-app
-  stages:
-    test: DevOps/devops-app/stages/test.js
\ No newline at end of file
diff --git a/.editorconfig b/.editorconfig
index fa83f68..3d31c12 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -6,6 +6,6 @@ root = true
 charset = utf-8
 end_of_line = lf
 indent_style = space
-indent_size = 4
+indent_size = 2
 trim_trailing_whitespace = true
 insert_final_newline = true
diff --git a/.eslintignore b/.eslintignore
new file mode 100644
index 0000000..813d89a
--- /dev/null
+++ b/.eslintignore
@@ -0,0 +1,6 @@
+node_modules
+dev
+test
+projects
+Devops
+project.js
\ No newline at end of file
diff --git a/.eslintrc.js b/.eslintrc.js
index 374237b..d9ef3ae 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -1,23 +1,31 @@
 module.exports = {
-    "env": {
-        "es6": true,
-        "browser": true,
-        "node": true
+    env: {
+        es6: true,
+        browser: true,
+        node: true,
+        mocha: true
     },
-    "parserOptions": {
-        "ecmaVersion": 6,
-        "sourceType": "module",
-        "ecmaFeatures": {
-            "jsx": true
+    parserOptions: {
+        ecmaVersion: 6,
+        sourceType: 'module',
+        ecmaFeatures: {
+            jsx: true
         }
     },
-    "extends": ["eslint:recommended", "ivweb"],
-    "globals": {
-        "__inline": true,
-        "IS_SERVER": true,
-        "__uri": true,
-        "describe": true,
-        "before": true,
-        "it": true,
-    }
+    extends: ['plugin:react/recommended', '@tencent/eslint-config-tencent'],
+    globals: {
+        __inline: true,
+        IS_SERVER: true,
+        __uri: true,
+        plug: true,
+        Browser: true,
+        define: true,
+        mqq: true
+    },
+    settings: {
+        react: {
+            version: "detect"
+        }
+    },
+    rules: { "react/prop-types": "off", "react/display-name": "off" }
 };
diff --git a/.gitignore b/.gitignore
index acd9c0a..fdf5447 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,5 @@
 package-lock.json
 nohup.out
 .nyc_output
+.dwt_output
+.orange-ci.json
diff --git a/.mocharc.yml b/.mocharc.yml
new file mode 100644
index 0000000..54dcb61
--- /dev/null
+++ b/.mocharc.yml
@@ -0,0 +1,9 @@
+require:
+  - 'babel-core/register'
+  - 'ignore-styles'
+  - 'jsdom-global/register'
+  - 'test/dwt-for-epc.config.js'
+reporter: 'mochawesome'
+reporterOptions:
+  - 'reportDir=.dwt_output/mochawesome'
+recursive: true
\ No newline at end of file
diff --git a/.nycrc b/.nycrc
index 1fd8641..8dc1d1c 100644
--- a/.nycrc
+++ b/.nycrc
@@ -1,10 +1,17 @@
 {
+    "all": true,
     "include": [
-      "src/**/business/**/*.js"
+        "src/**/*.js"
     ],
     "exclude": [
-      "src/**/modules/**/*.js",
-      "src/**/assets/**/*.js",
-      "DevOps/**/*.js"
-    ]
-}
\ No newline at end of file
+        "src/**/node/**/*.js",
+        "src/**/modules/**/*.js",
+        "src/**/assets/**/*.js"
+    ],
+    "reporter":[
+         "text-summary",
+         "html",
+         "lcovonly"
+    ],
+    "report-dir": ".dwt_output/coverage"
+}
diff --git a/.orange-ci.yml b/.orange-ci.yml
index bcb02d3..20ca29e 100644
--- a/.orange-ci.yml
+++ b/.orange-ci.yml
@@ -1,58 +1,289 @@
+# defaultEnv 用来存放一些变量，开发者只关注这里的变量就行了
+.defaultEnv:
+  env: &defaultEnv
+    ZHIYUN_PKG_TEST_IP: 10.100.64.201
+    ZHIYUN_PKG_PROD_IP: 100.116.13.108
+    ZHIYUN_PKG_NAME: now-h5-personal-center
+    ZHIYUN_PKG_DIST: dist
+
+# ------------------------------以下区域请勿随意修改---------------------------------------------
+# ------------------------------以下区域请勿随意修改---------------------------------------------
+# ------------------------------以下区域请勿随意修改---------------------------------------------
+
+# CCK-eslint @linjianghe
+.eslint-cck: &eslint-cck
+  - name: 即将开始：CCK-eslint
+    script: echo "即将开始：CCK-eslint"
+  - name: CCK-eslint
+    script: tnpm run eslint
+  - name: 已结束：CCK-eslint
+    script: echo "已结束：CCK-eslint"
+
+# UT-单元测试 @linjianghe
+.test-ut: &test-ut
+  - name: 即将开始：UT-单元测试
+    script: echo "即将开始：UT-单元测试"
+  - name: 设置增量覆盖率参考日期
+    script: echo -n $(date "+%Y-%m-01")
+    exports:
+      stdout: MONTH_FIRST_DAY
+  - name: arch and diff
+    type: qcoverage:arch-and-diff
+    options:
+      startCommitBeforeTime: ${MONTH_FIRST_DAY}
+    exports:
+      outputDir: DIFF_PATH
+  - name: UT-单元测试
+    script: tnpm run test:unit
+  - name: 测试产物归档
+    if: |
+      [ $ORANGE_EVENT = "push" -o $ORANGE_EVENT = "tag_push" ]
+    type: git:release
+    options:
+      name: v0.0.0.$ORANGE_TOTAL_BUILD_COUNT
+      description: 单元测试产物：$ORANGE_BUILD_WEB_URL
+      attachments:
+        - .dwt_output/UT-output.zip
+  - name: coverage-report
+    image: csighub.tencentyun.com/plugins/coverage-report:latest
+    settingsFrom: https://git.code.oa.com/ci-plugins/coverage-report/blob/master/orange-ci-env.yml
+    settings:
+      cov_product: 9fa179ec-57db-4a08-8331-86a640ca # http://macaron.oa.com/ 新建项目后的 id
+      test_type: unit_test
+      language: js
+      # 测试文件类型及所在路径
+      arch_diff:
+        - ./$DIFF_PATH
+      js_info:
+        - ./.dwt_output/coverage/lcov.info
+  - name: eptest report
+    image: csighub.tencentyun.com/qq-web/eptest-report:latest
+    settingsFrom:
+      - https://git.code.oa.com/qq-web/secret/blob/master/eptest/oci.yml
+    settings:
+      # 必填 project_id product_name 在 eptest.oa.com-产品管理-业务形态处创建
+      PROJECT_ID: $ORANGE_REPO_SLUG
+      PRODUCT_NAME: NOW直播
+      TEST_TYPE: unit
+      ISTEST: false                  # 选填，eptest 测试环境，默认 false
+      COVERAGE_DIR: ./               # 选填，覆盖率生成的目录，默认 ./
+      CASE_FILE_NAME: ./.dwt_output/unit/dwt-cases.yml  # 选填，用例文件名，默认 dwt-cases.yml
+      UNIT_FILE_NAME: ./.dwt_output/unit/dwt-junit.xml  # 选填，任务报告文件名，默认 dwt-junit.xml
+      TOKEN_EXPIRE: 300              # 选填，token 过期时间，默认 300s
+  - name: 已结束：UT-单元测试结束
+    script: echo "已结束：UT-单元测试结束"
+
+# BVT-自动化测试测试 @linjianghe
+.test-bvt: &test-bvt
+  - name: 即将开始：BVT-自动化测试测试
+    script: echo "即将开始：BVT-自动化测试测试"
+  - name: 设置增量覆盖率参考日期
+    script: echo -n $(date "+%Y-%m-01")
+    exports:
+      stdout: MONTH_FIRST_DAY
+  - name: arch and diff
+    type: qcoverage:arch-and-diff
+    options:
+      startCommitBeforeTime: ${MONTH_FIRST_DAY}
+    exports:
+      outputDir: DIFF_PATH
+  - name: BVT-自动化测试测试
+    image: csighub.tencentyun.com/ivweb/web-test:latest
+    commands: tnpm run test:e2e
+  - name: 测试产物归档
+    if: |
+      [ $ORANGE_EVENT = "push" -o $ORANGE_EVENT = "tag_push" ]
+    type: git:release
+    options:
+      name: v0.0.1.$ORANGE_TOTAL_BUILD_COUNT
+      description: 自动化测试产物：$ORANGE_BUILD_WEB_URL
+      attachments:
+        - .dwt_output/BVT-output.zip
+  - name: coverage-report
+    image: csighub.tencentyun.com/plugins/coverage-report:latest
+    settingsFrom: https://git.code.oa.com/ci-plugins/coverage-report/blob/master/orange-ci-env.yml
+    settings:
+      cov_product: 9fa179ec-57db-4a08-8331-86a640ca # http://macaron.oa.com/ 新建项目后的 id
+      test_type: auto_test
+      language: js
+      # 测试文件类型及所在路径
+      arch_diff:
+        - ./$DIFF_PATH
+      js_info:
+        - ./.dwt_output/e2e/coverage/lcov.info
+  - name: eptest report
+    image: csighub.tencentyun.com/qq-web/eptest-report:latest
+    settingsFrom:
+      - https://git.code.oa.com/qq-web/secret/blob/master/eptest/oci.yml
+    settings:
+      # 必填 project_id product_name 在 eptest.oa.com-产品管理-业务形态处创建
+      PROJECT_ID: $ORANGE_REPO_SLUG
+      PRODUCT_NAME: NOW直播
+      TEST_TYPE: e2e
+      ISTEST: false                  # 选填，eptest 测试环境，默认 false
+      COVERAGE_DIR: ./               # 选填，覆盖率生成的目录，默认 ./
+      CASE_FILE_NAME: ./.dwt_output/e2e/dwt-cases.yml  # 选填，用例文件名，默认 dwt-cases.yml
+      UNIT_FILE_NAME: ./.dwt_output/e2e/dwt-junit.xml  # 选填，任务报告文件名，默认 dwt-junit.xml
+      TOKEN_EXPIRE: 300              # 选填，token 过期时间，默认 300s
+  - name: 已结束：BVT-自动化测试测试
+    script: echo "已结束：BVT-自动化测试测试"
+
+# 织云打包
+.zhiyun_pkg: &zhiyun_pkg
+  - name: Build
+    script: npm run pub:jenkins
+  - name: 织云打包
+    type: zhiyun:pkg
+    options:
+      product: other
+      name: ${ZHIYUN_PKG_NAME}
+      dist: ${ZHIYUN_PKG_DIST}
+
+# 织云部署到测试环境
+.zhiyun_deploy_test: &zhiyun_deploy_test
+  - name: 织云部署
+    type: zhiyun:update
+    options:
+      autoInstall: true
+      product: other
+      name: ${ZHIYUN_PKG_NAME}
+      ips:
+        - ${ZHIYUN_PKG_TEST_IP}
+
+# 织云部署到生产环境
+.zhiyun_deploy_prod: &zhiyun_deploy_prod
+  - name: 织云部署
+    type: zhiyun:update
+    options:
+      autoInstall: true
+      product: other
+      name: ${ZHIYUN_PKG_NAME}
+      ips:
+        - ${ZHIYUN_PKG_PROD_IP}
+
+.test_deploy: &test_deploy
+  - name: Image create
+    script:
+      - docker login -u $DOCKER_USER -p $DOCKER_PWD $DOCKER_HUB
+      - docker build --network host -t $DOCKER_HUB/$DOCKER_GROUP/iv-web_now-h5-personal-center:$ORANGE_COMMIT ./
+      - docker push $DOCKER_HUB/$DOCKER_GROUP/iv-web_now-h5-personal-center:$ORANGE_COMMIT
+  - name: Test deploy
+    image: csighub.tencentyun.com/tde/tde-oci-plugin:test
+    settings:
+      imageName: $DOCKER_HUB/$DOCKER_GROUP/iv-web_now-h5-personal-center
+      imageTag: $ORANGE_COMMIT
+      pusher: $ORANGE_BUILD_USER
+      slug: $ORANGE_REPO_SLUG
+      branch: $ORANGE_BRANCH
+      dockerUser: $DOCKER_USER
+      dockerPwd: $DOCKER_PWD
+      tdeProxy: false
+  - name: Test message
+    type: wework:message
+    options:
+      fromFile: tde_message
+
+# 部署到测试环境，符合 epc 要求：必须通过单元测试和自动化测试并上报，适合 master push 场景，确保代码可靠性
+.pipeline_deploy: &pipeline_deploy
+  - label:
+      type:
+        - MASTER
+        - PRE_RELEASE
+      class:
+        - MAIN
+        - RELIABILITY
+    env: *defaultEnv
+    docker: &a1
+      image: csighub.tencentyun.com/ivweb/feflow-demo:latest
+    cacheFrom: .orange-ci.cache
+    runner:
+      network: idc-sh
+#    services: docker
+#    imports: https://git.code.oa.com/ivweb/secret/blob/master/config.json
+    stages:
+      - name: Init
+        script: tnpm install -D
+      - *eslint-cck
+      - *test-ut
+      - *test-bvt
+      - *zhiyun_pkg
+      - *zhiyun_deploy_test
+#      - *test_deploy
+
+# 部署到测试环境，无需按照 epc 要求，但必须通过单元测试，适合 branch push 的场景，快速部署
+.pipeline_deploy_without_epc: &pipeline_deploy_without_epc
+  - label:
+      type:
+        - SHARE
+      class:
+        - SECONDARY
+    env: *defaultEnv
+    docker: *a1
+    cacheFrom: .orange-ci.cache
+    runner:
+      network: idc-sh
+    stages:
+      - name: Init
+        script: tnpm install -D
+      - name: 单元测试
+        script: tnpm run test:unit
+      - *zhiyun_pkg
+      - *zhiyun_deploy_test
+
+# 构建项目，符合 epc 要求：必须通过单元测试和自动化测试并上报，适合 mr 场景，确保代码可靠性
+.pipeline_build: &pipeline_build
+  - label:
+      type:
+        - SHARE
+      class:
+        - SECONDARY
+    env: *defaultEnv
+    docker: *a1
+    cacheFrom: .orange-ci.cache
+    runner:
+      network: idc-sh
+    stages:
+      - name: Init
+        script: tnpm install -D
+      - *eslint-cck
+      - *test-ut
+      - *test-bvt
+
+# 发布到生产环境中
+.pipeline_release: &pipeline_release
+  - label:
+      type: RELEASE
+    env: *defaultEnv
+    docker: *a1
+    cacheFrom: .orange-ci.cache
+    runner:
+      network: idc-sh
+    stages:
+      - name: Init
+        script: tnpm install -D
+      - *eslint-cck
+      - *test-ut
+      - *test-bvt
+      - *zhiyun_pkg
+      - *zhiyun_deploy_prod
+      - name: 发布离线包
+        type: ak-offline:pkg
+        options:
+          configPath: ./project.json
+          pkgPath: ./dist/offline/offline.zip
+      - name: Feflow 通知机器人
+        type: wework:message
+        options:
+          robot: f12d5781-2dd7-46ce-a61a-0119aad9a99c
+          message: "<font color=\"info\">项目发布上线通知</font>\n $ORANGE_REPO_SLUG 正式发布\n 发布人: $ORANGE_BUILD_USER\nTAG: $ORANGE_BRANCH\nCOMMIT: $ORANGE_LATEST_COMMIT_MESSAGE\n工蜂链接: [$ORANGE_REPO_SLUG]($ORANGE_EVENT_URL)\n构建日志:[$ORANGE_BUILD_ID]($ORANGE_BUILD_WEB_URL)"
+
+master:
+  push:
+    *pipeline_deploy
+
+'**':
+  push: *pipeline_deploy_without_epc
+  merge_request: *pipeline_build
+
 $:
-    push:
-        - docker:
-              &a1
-              image: csighub.tencentyun.com/ivweb/feflow-demo:latest
-          cacheFrom: .orange-ci.cache
-          stages:
-              &a2
-              - name: Init
-                script: tnpm install -D
-              - name: Build
-                script: npm run pub:jenkins
-              - name: 织云打包
-                type: zhiyun:pkg
-                options:
-                    product: other
-                    name: now-h5-personal-center
-                    dist: dist
-              - name: 织云部署
-                type: zhiyun:update
-                options:
-                    autoInstall: true
-                    product: other
-                    name: now-h5-personal-center
-                    ips:
-                        - 10.100.64.201
-    tag_push:
-        - docker: *a1
-          cacheFrom: .orange-ci.cache
-          stages:
-              - name: Init
-                script: tnpm install -D
-              - name: Build
-                script: npm run pub:jenkins
-              - name: 织云打包
-                type: zhiyun:pkg
-                options:
-                    product: other
-                    name: now-h5-personal-center
-                    dist: dist
-              - name: 织云部署
-                type: zhiyun:update
-                options:
-                    autoInstall: true
-                    product: other
-                    name: now-h5-personal-center
-                    ips:
-                        - 100.116.13.108
-              - name: 发布离线包
-                type: ak-offline:pkg
-                options:
-                    configPath: ./project.json
-                    pkgPath: ./dist/offline/offline.zip
-              - name: Feflow 通知机器人
-                type: wework:message
-                options:
-                    robot: f12d5781-2dd7-46ce-a61a-0119aad9a99c
-                    message: "<font color=\"info\">项目发布上线通知</font>\n iv-web/now-h5-personal-center 正式发布\n 发布人: $ORANGE_BUILD_USER\nTAG: $ORANGE_BRANCH\nCOMMIT: $ORANGE_LATEST_COMMIT_MESSAGE\n工蜂链接: [$ORANGE_REPO_SLUG]($ORANGE_EVENT_URL)\n构建日志:[$ORANGE_BUILD_ID]($ORANGE_BUILD_WEB_URL)"
+  tag_push: *pipeline_release
diff --git a/.prettierrc.js b/.prettierrc.js
new file mode 100644
index 0000000..e340799
--- /dev/null
+++ b/.prettierrc.js
@@ -0,0 +1,3 @@
+module.exports = {
+  singleQuote: true,
+};
diff --git a/DevOps/devops-app/.gitignore b/DevOps/devops-app/.gitignore
deleted file mode 100644
index 1557573..0000000
--- a/DevOps/devops-app/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-node_modules
-output
-package-lock.json
\ No newline at end of file
diff --git a/DevOps/devops-app/README.md b/DevOps/devops-app/README.md
deleted file mode 100644
index 8cc8ca3..0000000
--- a/DevOps/devops-app/README.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# 在蓝盾中运行 web 自动化测试
-
-本项目用于在蓝盾平台 (http://devops.oa.com/) 跑 web 自动化测试。
-
-> 更多的资料请参考 http://web-test-guide.pages.oa.com/ 站点。
-
-## 开发调试
-
-在开发阶段，直接运行 
-
-```
-# 安装依赖
-$ tnpm i
-
-# 执行测试
-$ tnpm test
-```
-
-`tnpm test` 命令执行会基本与在蓝盾中执行的步骤是一致的，执行完成之后，会新生成一个 `output` 目录，里面有本次自动化测试产生的归档文件，在蓝盾运行时，这些归档文件会被同步到专门的服务器中。
diff --git a/DevOps/devops-app/config.js b/DevOps/devops-app/config.js
deleted file mode 100644
index e14f8cb..0000000
--- a/DevOps/devops-app/config.js
+++ /dev/null
@@ -1,31 +0,0 @@
-const path = require('path');
-const _ = require('lodash');
-
-const { testUseMocha } = require('@tencent/dwt-config-devops-ivweb');
-
-function createDWTRunner(extraDwtOpts) {
-    const opts = {
-        isRunUnitTest: true,
-        isRunE2ETest: true,
-        workspacePath: path.join(__dirname, '../../'),
-        customPluginParams: {
-            whistle: {
-                getWhistleRules: (dwtRunner) => {
-                    const whistleSetting = require(path.join(__dirname, '../whistle'));
-
-                    return whistleSetting.getProdRules({
-                        projectRootPath: dwtRunner.getPlugin('project').cwd,
-                        shouldUseMockstar: true,
-                        mockstarPort: dwtRunner.getPlugin('mockstar').port
-                    });
-                }
-            }
-        }
-    };
-
-    return testUseMocha.createDWTRunner(_.merge(opts, extraDwtOpts));
-}
-
-module.exports = {
-    createDWTRunner
-};
\ No newline at end of file
diff --git a/DevOps/devops-app/debug/test.js b/DevOps/devops-app/debug/test.js
deleted file mode 100644
index 6edd53a..0000000
--- a/DevOps/devops-app/debug/test.js
+++ /dev/null
@@ -1,15 +0,0 @@
-const test = require('../stages/test');
-
-const inputParams = {};
-const nodejsAtomSdk = {};
-
-// 如果有一些其他额外参数，则在此配置
-const extraDwtOpts = {};
-
-test(inputParams, nodejsAtomSdk, extraDwtOpts)
-    .then((data) => {
-        console.log(JSON.stringify(data, null, 2));
-    })
-    .catch((err) => {
-        console.error(err);
-    });
\ No newline at end of file
diff --git a/DevOps/devops-app/package.json b/DevOps/devops-app/package.json
deleted file mode 100644
index e5b3f1d..0000000
--- a/DevOps/devops-app/package.json
+++ /dev/null
@@ -1,17 +0,0 @@
-{
-    "name": "devops-app",
-    "scripts": {
-        "test": "node debug/test.js",
-        "test:debug": "cross-env LOG_LEVEL=debug tnpm test",
-        "test:unit": "cross-env DWT_MODE=unit tnpm test",
-        "test:e2e": "cross-env DWT_MODE=e2e tnpm test",
-        "test:show": "cross-env SHOW=1 tnpm run test"
-    },
-    "dependencies": {
-        "@tencent/dwt-config-devops-ivweb": "^0.1.0",
-        "lodash": "^4.17.15"
-    },
-    "devDependencies": {
-        "cross-env": "^7.0.2"
-    }
-}
diff --git a/DevOps/devops-app/stages/test.js b/DevOps/devops-app/stages/test.js
deleted file mode 100644
index 1ea1f71..0000000
--- a/DevOps/devops-app/stages/test.js
+++ /dev/null
@@ -1,18 +0,0 @@
-const { testUseMocha } = require('@tencent/dwt-config-devops-ivweb');
-const config = require('../config');
-
-/**
- * 提供给蓝盾流水线中的蓝盾插件，用于执行自动化测试
- *
- * @param {Object} inputParams 蓝盾体系内的一些参数变量
- * @param {Object} [nodejsAtomSdk] 蓝盾的 nodejs 版本 sdk，等效于 require('@tencent/nodejs_atom_sdk');
- * @param {Object} [extraDwtOpts] 额外参数
- * @return {Promise<*>}
- */
-module.exports = (inputParams, nodejsAtomSdk, extraDwtOpts) => {
-    return config.createDWTRunner(extraDwtOpts)
-        .then((dwtRunner) => {
-            return testUseMocha.run(dwtRunner, inputParams, nodejsAtomSdk);
-        });
-};
-
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/basic-check.js b/DevOps/matman-app/case_modules/page-verify-identity/basic-check.js
index a7013de..d5c89f1 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/basic-check.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/basic-check.js
@@ -1,29 +1,36 @@
-const env = require('./env');
-
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl())
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end();
-}
-
-module.exports = getResult;
-
-// getResult({ show: true, doNotCloseBrowser: true, useRecorder: false })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
-
-
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+
+module.exports = async (pageDriverOpts) => {
+  // 创建 PageDriver
+  const pageDriver = await createPageDriver(
+    __filename,
+    pageDriverOpts,
+    BASIC_QUERY_DATA_MAP,
+  );
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 获取结果
+  return await pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
+//     show: true,
+//     doNotCloseBrowser: true,
+//     useRecorder: true,
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-go-qq-wallet.js b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-go-qq-wallet.js
index e44174f..874e680 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-go-qq-wallet.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-go-qq-wallet.js
@@ -5,41 +5,59 @@ const getPageInfo = require('./get-page-info');
  * 打开对话框提示去QQ钱包认证
  */
 function getDlgGoQQWalletInfo() {
-    const result = {
-        isExist: useJquery.isExist('.dlg-go-qq-wallet')
-    };
+  const result = {
+    isExist: useJquery.isExist('.dlg-go-qq-wallet'),
+  };
 
-    if (result.isExist) {
-        const parentSelector = '.dlg-go-qq-wallet';
-        result.text = useJquery.getText('.dialog-inner .dialog-text .text', parentSelector);
-        result.btnCancelText = useJquery.getText('.dialog-inner .dialog-buttons .dialog-btn.cancel', parentSelector);
-        result.btnOkText = useJquery.getText('.dialog-inner .dialog-buttons .dialog-btn.ok', parentSelector);
-    }
+  if (result.isExist) {
+    const parentSelector = '.dlg-go-qq-wallet';
+    result.text = useJquery.getText(
+      '.dialog-inner .dialog-text .text',
+      parentSelector,
+    );
+    result.btnCancelText = useJquery.getText(
+      '.dialog-inner .dialog-buttons .dialog-btn.cancel',
+      parentSelector,
+    );
+    result.btnOkText = useJquery.getText(
+      '.dialog-inner .dialog-buttons .dialog-btn.ok',
+      parentSelector,
+    );
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 打开对话框提示去下载QQ
  */
 function getDlgGoDownloadQQInfo() {
-    const result = {
-        isExist: useJquery.isExist('.dlg-go-download-qq')
-    };
+  const result = {
+    isExist: useJquery.isExist('.dlg-go-download-qq'),
+  };
 
-    if (result.isExist) {
-        const parentSelector = '.dlg-go-download-qq';
-        result.text = useJquery.getText('.dialog-inner .dialog-text .text', parentSelector);
-        result.btnCancelText = useJquery.getText('.dialog-inner .dialog-buttons .dialog-btn.cancel', parentSelector);
-        result.btnOkText = useJquery.getText('.dialog-inner .dialog-buttons .dialog-btn.ok', parentSelector);
-    }
+  if (result.isExist) {
+    const parentSelector = '.dlg-go-download-qq';
+    result.text = useJquery.getText(
+      '.dialog-inner .dialog-text .text',
+      parentSelector,
+    );
+    result.btnCancelText = useJquery.getText(
+      '.dialog-inner .dialog-buttons .dialog-btn.cancel',
+      parentSelector,
+    );
+    result.btnOkText = useJquery.getText(
+      '.dialog-inner .dialog-buttons .dialog-btn.ok',
+      parentSelector,
+    );
+  }
 
-    return result;
+  return result;
 }
 
 module.exports = () => {
-    return Object.assign({}, getPageInfo(), {
-        dlgGoQQWalletInfo: getDlgGoQQWalletInfo(),
-        dlgGoDownloadQQInfo: getDlgGoDownloadQQInfo()
-    });
+  return Object.assign({}, getPageInfo(), {
+    dlgGoQQWalletInfo: getDlgGoQQWalletInfo(),
+    dlgGoDownloadQQInfo: getDlgGoDownloadQQInfo(),
+  });
 };
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-should-verify-phone.js b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-should-verify-phone.js
index fbd638e..15a430c 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-should-verify-phone.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/fail-should-verify-phone.js
@@ -2,47 +2,53 @@ const { useJquery } = require('web-crawl-util');
 const getPageInfo = require('./get-page-info');
 
 module.exports = () => {
-    return Object.assign({}, getPageInfo(), {
-        phoneTitleInfo: getPhoneTitleInfo(),
-        phoneFormContentInfo: getPhoneFormContentInfo()
-    });
+  return Object.assign({}, getPageInfo(), {
+    phoneTitleInfo: getPhoneTitleInfo(),
+    phoneFormContentInfo: getPhoneFormContentInfo(),
+  });
 };
 
 /**
  * 标题
  */
 function getPhoneTitleInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-identity .display-section-title.verify-phone-title')
-    };
-
-    if (result.isExist) {
-        result.title = useJquery.getText('#root .display-verify-identity .display-section-title.verify-phone-title');
-    }
-
-    return result;
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-identity .display-section-title.verify-phone-title',
+    ),
+  };
+
+  if (result.isExist) {
+    result.title = useJquery.getText(
+      '#root .display-verify-identity .display-section-title.verify-phone-title',
+    );
+  }
+
+  return result;
 }
 
 /**
  * 表单主区域
  */
 function getPhoneFormContentInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-identity .display-verify-phone-form-content')
-    };
-
-    if (result.isExist) {
-        result.phoneNum = $('#phone-num').val();
-        result.phoneNumPlaceholder = $('#phone-num').attr('placeholder');
-        result.phoneNumInputType = $('#phone-num').attr('type');
-
-        result.verifyCode = $('#verify-code').val();
-        result.verifyCodePlaceholder = $('#verify-code').attr('placeholder');
-        result.verifyCodeInputType = $('#verify-code').attr('type');
-
-        result.isBtnActive = !$('#get-verify-code-btn').hasClass('disable');
-        result.btnText = useJquery.getText('#get-verify-code-btn');
-    }
-
-    return result;
-}
\ No newline at end of file
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-identity .display-verify-phone-form-content',
+    ),
+  };
+
+  if (result.isExist) {
+    result.phoneNum = $('#phone-num').val();
+    result.phoneNumPlaceholder = $('#phone-num').attr('placeholder');
+    result.phoneNumInputType = $('#phone-num').attr('type');
+
+    result.verifyCode = $('#verify-code').val();
+    result.verifyCodePlaceholder = $('#verify-code').attr('placeholder');
+    result.verifyCodeInputType = $('#verify-code').attr('type');
+
+    result.isBtnActive = !$('#get-verify-code-btn').hasClass('disable');
+    result.btnText = useJquery.getText('#get-verify-code-btn');
+  }
+
+  return result;
+}
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/get-page-info.js b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/get-page-info.js
index 8c0db1f..be4698d 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/crawlers/get-page-info.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/crawlers/get-page-info.js
@@ -4,77 +4,83 @@ const { useJquery } = require('web-crawl-util');
  * 标题
  */
 function getTitleInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-identity .display-section-title.verify-identity-title')
-    };
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-identity .display-section-title.verify-identity-title',
+    ),
+  };
 
-    if (result.isExist) {
-        result.title = useJquery.getText('#root .display-verify-identity .display-section-title.verify-identity-title');
-    }
+  if (result.isExist) {
+    result.title = useJquery.getText(
+      '#root .display-verify-identity .display-section-title.verify-identity-title',
+    );
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单主区域
  */
 function getFormContentInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-identity .display-verify-identity-form-content')
-    };
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-identity .display-verify-identity-form-content',
+    ),
+  };
 
-    if (result.isExist) {
-        result.nameValueLabel = $('#name-value').prev('.label').text();
-        result.nameValue = $('#name-value').val();
-        result.nameValuePlaceholder = $('#name-value').attr('placeholder');
-        result.nameValueInputType = $('#name-value').attr('type');
+  if (result.isExist) {
+    result.nameValueLabel = $('#name-value').prev('.label').text();
+    result.nameValue = $('#name-value').val();
+    result.nameValuePlaceholder = $('#name-value').attr('placeholder');
+    result.nameValueInputType = $('#name-value').attr('type');
 
-        result.idValueLabel = $('#id-value').prev('.label').text();
-        result.idValue = $('#id-value').val();
-        result.idValuePlaceholder = $('#id-value').attr('placeholder');
-        result.idValueInputType = $('#id-value').attr('type');
-    }
+    result.idValueLabel = $('#id-value').prev('.label').text();
+    result.idValue = $('#id-value').val();
+    result.idValuePlaceholder = $('#id-value').attr('placeholder');
+    result.idValueInputType = $('#id-value').attr('type');
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单按钮
  */
 function getFormBtnInfo() {
-    const result = {
-        isExist: useJquery.isExist('#verify-btn')
-    };
+  const result = {
+    isExist: useJquery.isExist('#verify-btn'),
+  };
 
-    if (result.isExist) {
-        result.text = useJquery.getText('#verify-btn');
-        result.isBtnActive = $('#verify-btn').hasClass('active');
-    }
+  if (result.isExist) {
+    result.text = useJquery.getText('#verify-btn');
+    result.isBtnActive = $('#verify-btn').hasClass('active');
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单按钮
  */
 function getMessageTipsInfo() {
-    const result = {
-        isExist: useJquery.isExist('.display-message-tips')
-    };
+  const result = {
+    isExist: useJquery.isExist('.display-message-tips'),
+  };
 
-    if (result.isExist) {
-        result.text = useJquery.getText('.display-message-tips p');
-        result.isSuccess = useJquery.isExist('.display-message-tips .icon-success');
-    }
+  if (result.isExist) {
+    result.text = useJquery.getText('.display-message-tips p');
+    result.isSuccess = useJquery.isExist('.display-message-tips .icon-success');
+  }
 
-    return result;
+  return result;
 }
 
 module.exports = () => {
-    return {
-        titleInfo: getTitleInfo(),
-        formContentInfo: getFormContentInfo(),
-        formBtnInfo: getFormBtnInfo(),
-        messageTipsInfo: getMessageTipsInfo()
-    };
-};
\ No newline at end of file
+  return {
+    titleInfo: getTitleInfo(),
+    formContentInfo: getFormContentInfo(),
+    formBtnInfo: getFormBtnInfo(),
+    messageTipsInfo: getMessageTipsInfo(),
+  };
+};
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/env/index.js b/DevOps/matman-app/case_modules/page-verify-identity/env/index.js
index 06b40ab..18a99fc 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/env/index.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/env/index.js
@@ -1,13 +1,11 @@
-const { createPageDriver } = require('../../../helpers');
-
 /**
  * mockstar 数据模拟中的基础桩数据设置
  *
  * @type {Object}
  */
 const BASIC_QUERY_DATA_MAP = {
-    // 身份证认证
-    'get_tenpay_auth_info': 'success'
+  // 身份证认证
+  get_tenpay_auth_info: 'success',
 };
 
 /**
@@ -16,26 +14,17 @@ const BASIC_QUERY_DATA_MAP = {
  * @type {Object}
  */
 const WAIT = {
-    READY: '#root .display-verify-identity'
+  READY: '#root .display-verify-identity',
 };
 
 /**
- * 获取页面的地址
- *
- * @param [isDev]
- * @return {String}
+ * 页面地址
+ * @type {String}
  */
-function getPageUrl(isDev) {
-    return 'https://now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1&now_id=93033660';
-}
+const PAGE_URL = 'https://now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1&now_id=93033660';
 
 module.exports = {
-    getPageUrl,
-    WAIT,
-    createPageDriver: (caseModuleFilePath, opts = {}) => {
-        // 设置默认的桩数据
-        opts.queryDataMap = Object.assign({}, BASIC_QUERY_DATA_MAP, opts.queryDataMap);
-
-        return createPageDriver(caseModuleFilePath, opts);
-    }
+  WAIT,
+  BASIC_QUERY_DATA_MAP,
+  PAGE_URL,
 };
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/verify-basic.js b/DevOps/matman-app/case_modules/page-verify-identity/verify-basic.js
index 457a0ec..9325ebd 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/verify-basic.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/verify-basic.js
@@ -1,70 +1,61 @@
-const env = require('./env');
-
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl())
-
-        // 第一步：开始操作之前
-        .addAction('init', function (nightmare) {
-            return nightmare.wait(500);
-        })
-
-        // 第二步：身份证输入框输入: 至尊宝
-        .addAction('inputName', function (nightmare) {
-            return nightmare.type('#name-value', '至尊宝');
-        })
-
-        // 第三步：尝试点击验证按钮
-        .addAction('clickVerifyBtnWithoutCode', function (nightmare) {
-            return nightmare.click('#verify-btn');
-        })
-
-        // 第四步：身份证输入框输入: 431129
-        .addAction('inputIdPart1', function (nightmare) {
-            return nightmare.type('#id-value', '431129');
-        })
-
-        // 第五步：身份证输入框继续输入: 199909098888
-        .addAction('inputIdPart2', function (nightmare) {
-            return nightmare.type('#id-value', '199909098888');
-        })
-
-        // 第六步：再次尝试点击验证按钮
-        .addAction('clickVerifyBtn', function (nightmare) {
-            return nightmare.click('#verify-btn');
-        })
-
-        // 第七步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmare) {
-            return nightmare.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            // 过滤出是否跳转到其他页面
-            const pageWithdraw = 'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
-
-            result.isRedirectToPageWithdraw = result.isExistPage(pageWithdraw, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({ show: true, doNotCloseBrowser: true, useRecorder: true })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+
+module.exports = async (pageDriverOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：身份证输入框输入: 至尊宝
+  await pageDriver.addAction('inputName', async (page) => {
+    await page.type('#name-value', '至尊宝');
+  });
+
+  // 第三步：尝试点击验证按钮
+  await pageDriver.addAction('clickVerifyBtnWithoutCode', async (page) => {
+    await page.click('#verify-btn');
+  });
+
+  // 第四步：身份证输入框输入: 431129
+  await pageDriver.addAction('inputIdPart1', async (page) => {
+    await page.type('#id-value', '431129');
+  });
+
+  // 第五步：身份证输入框继续输入: 199909098888
+  await pageDriver.addAction('inputIdPart2', async (page) => {
+    await page.type('#id-value', '199909098888');
+  });
+
+  // 第六步：再次尝试点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn', async (page) => {
+    await page.click('#verify-btn');
+  });
+
+  // 第七步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
+//     show: true,
+//     doNotCloseBrowser: false,
+//     useRecorder: true,
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-login.js b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-login.js
new file mode 100644
index 0000000..a36f0c4
--- /dev/null
+++ b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-login.js
@@ -0,0 +1,45 @@
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+
+module.exports = async (pageDriverOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
+  await pageDriver.addAction('inputName', async (page) => {
+    await page.type('#name-value', '至尊宝');
+    await page.type('#id-value', '431129199909098888');
+  });
+
+  // 第三步：点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitForNavigation();
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: false,
+//   useRecorder: true,
+//   queryDataMap: {
+//     get_tenpay_auth_info: 'fail_retcode_66210007',
+//   },
+// })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet.js b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet.js
index 9734e92..f88235e 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet.js
@@ -1,72 +1,72 @@
-const env = require('./env');
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
 
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
+module.exports = async (pageDriverOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
 
-        // 加载页面地址
-        .goto(env.getPageUrl())
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
 
-        // 第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
-        .addAction('inputNameAndId', function (nightmareRun) {
-            return nightmareRun.type('#name-value', '至尊宝').type('#id-value', '431129199909098888').wait(500);
-        })
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
 
-        // 第二步：点击验证按钮
-        .addAction('clickVerifyBtn1', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(500);
-        })
+  // 第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
+  await pageDriver.addAction('inputNameAndId', async (page) => {
+    await page.type('#name-value', '至尊宝');
+    await page.type('#id-value', '431129199909098888');
+  });
 
-        // 第三步：点击弹窗中的取消按钮
-        .addAction('clickDlgCancel', function (nightmareRun) {
-            return nightmareRun.click('.dialog-wrapper.dlg-go-qq-wallet .dialog-inner .dialog-buttons .dialog-btn.cancel').wait(500);
-        })
+  // 第三步：点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn1', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitFor('.dlg-go-qq-wallet');
+  });
 
-        // 第四步：点击验证按钮
-        .addAction('clickVerifyBtn2', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(500);
-        })
+  // 第四步：点击弹窗中的取消按钮
+  await pageDriver.addAction('clickDlgCancel', async (page) => {
+    await page.click('.dialog-wrapper.dlg-go-qq-wallet .dialog-inner .dialog-buttons .dialog-btn.cancel');
+  });
 
-        // 第五步：点击弹窗中的去实名认证按钮
-        .addAction('clickDlgOk', function (nightmareRun) {
-            return nightmareRun.click('.dlg-go-qq-wallet .dialog-inner .dialog-buttons .dialog-btn.ok').wait(500);
-        })
+  // 第五步：点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn2', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitFor('.dlg-go-qq-wallet');
+  });
 
-        // 第六步：点击下载qq弹窗中的确定按钮
-        .addAction('clickDownloadDlgOk', function (nightmareRun) {
-            return nightmareRun.click('.dlg-go-download-qq .dialog-inner .dialog-buttons .dialog-btn.ok').wait(500);
-        })
+  // 第六步：点击弹窗中的去实名认证按钮
+  await pageDriver.addAction('clickDlgOk', async (page) => {
+    await page.click('.dlg-go-qq-wallet .dialog-inner .dialog-buttons .dialog-btn.ok');
+    await page.waitFor('.dlg-go-download-qq');
+  });
 
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
+  // 第七步：点击下载qq弹窗中的确定按钮
+  await pageDriver.addAction('clickDownloadDlgOk', async (page) => {
+    await page.click('.dlg-go-download-qq .dialog-inner .dialog-buttons .dialog-btn.ok');
+  });
 
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/fail-go-qq-wallet.js')
+  // 第八步：再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(1000);
+  });
 
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            // 过滤出是否跳转到其他页面
-            const pageToQQ = 'im.qq.com/immobile/index.html';
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/fail-go-qq-wallet.js'));
+};
 
-            result.isRedirectToQQPage = result.isExistPage(pageToQQ, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
-//     show: true,
-//     doNotCloseBrowser: true,
-//     useRecorder: true,
-//     queryDataMap: {
-//         'get_tenpay_auth_info': 'fail_nameauth_flag_1'
-//     }
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: false,
+//   useRecorder: true,
+//   queryDataMap: {
+//     get_tenpay_auth_info: 'fail_nameauth_flag_1'
+//   }
 // })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
\ No newline at end of file
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone.js b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone.js
index b6c90e9..b2d8396 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone.js
@@ -1,75 +1,66 @@
-const { createMockStarQuery } = require('mockstar');
-const env = require('./env');
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
 
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
+module.exports = async (pageDriverOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
 
-        // 加载页面地址
-        .goto(env.getPageUrl())
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
 
-        // 第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
-        .addAction('inputNameAndId', function (nightmareRun) {
-            return nightmareRun.type('#name-value', '至尊宝').type('#id-value', '431129199909098888').wait(500);
-        })
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
 
-        // 第二步：点击验证按钮
-        .addAction('clickVerifyBtn1', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(1000);
-        })
+  // 第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
+  await pageDriver.addAction('inputNameAndId', async (page) => {
+    await page.type('#name-value', '至尊宝');
+    await page.type('#id-value', '431129199909098888');
+  });
 
-        // 第三步：电话号码输入: 12345678901，验证码输入: 654321
-        .addAction('inputPhoneAndCode', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '12345678901').type('#verify-code', '654321').wait(500);
-        })
+  // 第三步：点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn1', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitFor('.display-message-tips');
+  });
 
-        // 第四步：再次点击验证按钮
-        .addAction('clickVerifyBtn2', function (nightmareRun) {
-            const changeMockStarParams = createMockStarQuery({
-                'get_tenpay_auth_info': 'success'
-            }).getCookieString();
+  // 第四步：电话号码输入: 12345678901，验证码输入: 654321
+  await pageDriver.addAction('inputPhoneAndCode', async (page) => {
+    // 这里等待 3s 的原因是希望等这个错误提示消失，避免干扰到后面的验证
+    await page.waitFor(3000);
 
-            return nightmareRun
-                .exChangeMockStar(changeMockStarParams)
-                .click('#verify-btn')
-                .wait(500);
-        })
+    await page.type('#phone-num', '12345678901');
+    await page.type('#verify-code', '654321');
+  });
 
-        // 第五步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
+  // 第五步：再次点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn2', async (page) => {
+    await pageDriver.changeMockstar({ 'get_tenpay_auth_info': 'success' });
+    await page.click('#verify-btn');
+    await page.waitFor('.display-message-tips');
+  });
 
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
+  // 第六步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
 
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/fail-should-verify-phone.js')
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/fail-should-verify-phone.js'));
+};
 
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            // 过滤出是否跳转到其他页面
-            const pageWithdraw = 'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
-
-            result.isRedirectToPageWithdraw = result.isExistPage(pageWithdraw, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
-//     show: true,
-//     doNotCloseBrowser: true,
-//     useRecorder: true,
-//     queryDataMap: {
-//         'get_tenpay_auth_info': 'fail_retcode_1150001'
-//     }
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: false,
+//   useRecorder: true,
+//   queryDataMap: {
+//     get_tenpay_auth_info: 'fail_retcode_1150003'
+//   }
 // })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
\ No newline at end of file
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail.js b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail.js
index 3cf5194..e26af52 100644
--- a/DevOps/matman-app/case_modules/page-verify-identity/verify-fail.js
+++ b/DevOps/matman-app/case_modules/page-verify-identity/verify-fail.js
@@ -1,57 +1,50 @@
-const env = require('./env');
-
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl())
-
-        // 第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
-        .addAction('inputName', function (nightmareRun) {
-            return nightmareRun.type('#name-value', '至尊宝').type('#id-value', '431129199909098888');
-        })
-
-        // 第二步：点击验证按钮
-        .addAction('clickVerifyBtn', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn');
-        })
-
-        // 第三步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            // 过滤出是否跳转到其他页面
-            const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
-
-            result.isRedirectToLogin = result.isExistPage(loginPage, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
-//     show: true,
-//     doNotCloseBrowser: true,
-//     useRecorder: true,
-//     queryDataMap: {
-//         'get_tenpay_auth_info': 'error_100000'
-//     }
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+
+module.exports = async (pageDriverOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(PAGE_URL);
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888
+  await pageDriver.addAction('inputName', async (page) => {
+    await page.type('#name-value', '至尊宝');
+    await page.type('#id-value', '431129199909098888');
+  });
+
+  // 第三步：点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitFor('.display-message-tips');
+  });
+
+  // 第四步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: false,
+//   useRecorder: true,
+//   queryDataMap: {
+//     get_tenpay_auth_info: 'fail_err_code_900002',
+//   },
 // })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/basic-check.js b/DevOps/matman-app/case_modules/page-verify-phone/basic-check.js
index a7013de..a9168cf 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/basic-check.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/basic-check.js
@@ -1,29 +1,36 @@
-const env = require('./env');
-
-function getResult(opts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl())
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end();
-}
-
-module.exports = getResult;
-
-// getResult({ show: true, doNotCloseBrowser: true, useRecorder: false })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
-
-
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts) => {
+  // 创建 PageDriver
+  const pageDriver = await createPageDriver(
+    __filename,
+    pageDriverOpts,
+    BASIC_QUERY_DATA_MAP,
+  );
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  return pageDriver.evaluate(path.resolve(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
+//     show: true,
+//     doNotCloseBrowser: true,
+//     useRecorder: true,
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic.js b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic.js
index 507754b..9408a70 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic.js
@@ -1,73 +1,61 @@
-const env = require('./env');
-
-function getResult(opts, pageOpts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl(pageOpts))
-
-        // 第一步：开始操作之前
-        .addAction('init', function (nightmareRun) {
-            return nightmareRun.wait(500);
-        })
-
-        // 第二步：电话号码输入框输入: 12345678901
-        .addAction('inputPhone', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '12345678901').wait(500);
-        })
-
-        // 第三步：尝试点击验证按钮
-        .addAction('clickVerifyBtn1', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(500);
-        })
-
-        // 第四步：验证码输入框输入: 654321
-        .addAction('inputCode', function (nightmareRun) {
-            return nightmareRun.type('#verify-code', '654321').wait(500);
-        })
-
-        // 第五步：再次尝试点击验证按钮
-        .addAction('clickVerifyBtn2', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(500);
-        })
-
-        // 第六步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            // 过滤出是否跳转到其他页面
-            const pageWithdraw = 'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
-            const pageVerifyIdentity = 'now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1';
-
-            result.isRedirectToPageWithdraw = result.isExistPage(pageWithdraw, {}, 200);
-            result.isRedirectToPageVerifyIdentity = result.isExistPage(pageVerifyIdentity, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：电话号码输入框输入: 12345678901
+  await pageDriver.addAction('inputPhone', async (page) => {
+    await page.type('#phone-num', '12345678901');
+  });
+
+  // 第三步：尝试点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn1', async (page) => {
+    await page.click('#verify-btn');
+  });
+
+  // 第四步：验证码输入框输入: 654321
+  await pageDriver.addAction('inputCode', async (page) => {
+    await page.type('#verify-code', '654321');
+  });
+
+  // 第五步：再次尝试点击验证按钮
+  await pageDriver.addAction('clickVerifyBtn2', async (page) => {
+    await page.click('#verify-btn');
+  });
+
+  // 第六步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module.exports(
+//   {
 //     show: true,
 //     doNotCloseBrowser: true,
-//     useRecorder: true
-// }, {
-//     not_verify_id: 0
-// })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+//     useRecorder: true,
+//   },
+//   {
+//     not_verify_id: 0,
+//   },
+// )
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail-go-login.js b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail-go-login.js
new file mode 100644
index 0000000..24938b1
--- /dev/null
+++ b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail-go-login.js
@@ -0,0 +1,46 @@
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：电话号码输入: 12345678901，验证码输入: 654321
+  await pageDriver.addAction('inputPhoneAndCode', async (page) => {
+    await page.type('#phone-num', '12345678901');
+    await page.type('#verify-code', '654321');
+  });
+
+  // 第三步：点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyBtn', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitForNavigation();
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: true,
+//   useRecorder: true,
+//   queryDataMap: {
+//     check_verify_code: 'fail_2',
+//   },
+// })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail.js b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail.js
index 6bc9253..a5c8193 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail.js
@@ -1,56 +1,51 @@
-const env = require('./env');
-
-function getResult(opts, pageOpts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl(pageOpts))
-
-        // 第一步：电话号码输入: 12345678901，验证码输入: 654321
-        .addAction('inputPhoneAndCode', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '12345678901').type('#verify-code', '654321').wait(500);
-        })
-
-        // 第二步：点击获取验证码按钮
-        .addAction('clickVerifyBtn', function (nightmareRun) {
-            return nightmareRun.click('#verify-btn').wait(500);
-        })
-
-        // 第三步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
-
-            result.isRedirectToLogin = result.isExistPage(loginPage, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
-//     show: true,
-//     doNotCloseBrowser: true,
-//     useRecorder: true,
-//     queryDataMap: {
-//         'check_verify_code': 'fail_2'
-//     }
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：电话号码输入: 12345678901，验证码输入: 654321
+  await pageDriver.addAction('inputPhoneAndCode', async (page) => {
+    await page.type('#phone-num', '12345678901');
+    await page.type('#verify-code', '654321');
+  });
+
+  // 第三步：点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyBtn', async (page) => {
+    await page.click('#verify-btn');
+    await page.waitFor('.display-message-tips');
+  });
+
+  // 第四步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module.exports({
+//   show: true,
+//   doNotCloseBrowser: false,
+//   useRecorder: true,
+//   queryDataMap: {
+//     check_verify_code: 'fail_2',
+//   },
 // })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/crawlers/get-page-info.js b/DevOps/matman-app/case_modules/page-verify-phone/crawlers/get-page-info.js
index 22bf035..cc27c75 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/crawlers/get-page-info.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/crawlers/get-page-info.js
@@ -4,78 +4,86 @@ const { useJquery } = require('web-crawl-util');
  * 标题
  */
 function getTitleInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-phone .display-section-title.verify-phone-title')
-    };
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-phone .display-section-title.verify-phone-title',
+    ),
+  };
 
-    if (result.isExist) {
-        result.title = useJquery.getText('#root .display-verify-phone .display-section-title.verify-phone-title');
-    }
+  if (result.isExist) {
+    result.title = useJquery.getText(
+      '#root .display-verify-phone .display-section-title.verify-phone-title',
+    );
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单主区域
  */
 function getFormContentInfo() {
-    const result = {
-        isExist: useJquery.isExist('#root .display-verify-phone .display-verify-phone-form-content')
-    };
+  const result = {
+    isExist: useJquery.isExist(
+      '#root .display-verify-phone .display-verify-phone-form-content',
+    ),
+  };
 
-    if (result.isExist) {
-        result.phoneNum = $('#phone-num').val();
-        result.phoneNumPlaceholder = $('#phone-num').attr('placeholder');
-        result.phoneNumInputType = $('#phone-num').attr('type');
+  if (result.isExist) {
+    result.phoneNum = $('#phone-num').val();
+    result.phoneNumPlaceholder = $('#phone-num').attr('placeholder');
+    result.phoneNumInputType = $('#phone-num').attr('type');
 
-        result.verifyCode = $('#verify-code').val();
-        result.verifyCodePlaceholder = $('#verify-code').attr('placeholder');
-        result.verifyCodeInputType = $('#verify-code').attr('type');
+    result.verifyCode = $('#verify-code').val();
+    result.verifyCodePlaceholder = $('#verify-code').attr('placeholder');
+    result.verifyCodeInputType = $('#verify-code').attr('type');
 
-        result.isBtnActive = !$('#get-verify-code-btn').hasClass('disable');
-        result.btnText = useJquery.getText('#get-verify-code-btn');
-    }
+    result.isBtnActive = !$('#get-verify-code-btn').hasClass('disable');
+    result.btnText = useJquery.getText('#get-verify-code-btn');
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单按钮
  */
 function getFormBtnInfo() {
-    const result = {
-        isExist: useJquery.isExist('#verify-btn')
-    };
+  const result = {
+    isExist: useJquery.isExist('#verify-btn'),
+  };
 
-    if (result.isExist) {
-        result.text = useJquery.getText('#verify-btn');
-        result.isBtnActive = $('#verify-btn').hasClass('active');
-    }
+  if (result.isExist) {
+    result.text = useJquery.getText('#verify-btn');
+    result.isBtnActive = $('#verify-btn').hasClass('active');
+  }
 
-    return result;
+  return result;
 }
 
 /**
  * 表单按钮
  */
 function getMessageTipsInfo() {
-    const result = {
-        isExist: useJquery.isExist('.display-message-tips')
-    };
+  const result = {
+    isExist: useJquery.isExist('.display-message-tips'),
+  };
 
-    if (result.isExist) {
-        result.text = useJquery.getText('.display-message-tips p');
-        result.isSuccess = useJquery.isExist('.display-message-tips .icon-success');
-    }
+  if (result.isExist) {
+    result.text = useJquery.getText('.display-message-tips p');
+    result.isSuccess = useJquery.isExist(
+      '.display-message-tips .icon-success',
+    );
+  }
 
-    return result;
+  return result;
 }
 
 module.exports = () => {
-    return {
-        titleInfo: getTitleInfo(),
-        formContentInfo: getFormContentInfo(),
-        formBtnInfo: getFormBtnInfo(),
-        messageTipsInfo: getMessageTipsInfo()
-    };
-};
\ No newline at end of file
+  return {
+    titleInfo: getTitleInfo(),
+    formContentInfo: getFormContentInfo(),
+    formBtnInfo: getFormBtnInfo(),
+    messageTipsInfo: getMessageTipsInfo(),
+  };
+};
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/env/helper.js b/DevOps/matman-app/case_modules/page-verify-phone/env/helper.js
new file mode 100644
index 0000000..3cc1b76
--- /dev/null
+++ b/DevOps/matman-app/case_modules/page-verify-phone/env/helper.js
@@ -0,0 +1,19 @@
+const urlHandle = require('url-handle');
+
+/**
+ * 获取页面的地址
+ *
+ * @return {String}
+ */
+function getPageUrl(url, opts) {
+  const defaultOpts = {
+    not_verify_id: 0,
+  };
+
+  // not_verify_id 0=成功之后跳转到身份证认证，1=成功之后跳转到提现页
+  return urlHandle.getUrl(url, Object.assign({}, defaultOpts, opts));
+}
+
+module.exports = {
+  getPageUrl,
+};
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/env/index.js b/DevOps/matman-app/case_modules/page-verify-phone/env/index.js
index 3923c32..b80a785 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/env/index.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/env/index.js
@@ -1,17 +1,14 @@
-const urlHandle = require('url-handle');
-const { createPageDriver } = require('../../../helpers');
-
 /**
  * mockstar 数据模拟中的基础桩数据设置
  *
  * @type {Object}
  */
 const BASIC_QUERY_DATA_MAP = {
-    // 获取手机验证码
-    'get_verify_code': 'success',
+  // 获取手机验证码
+  get_verify_code: 'success',
 
-    // 验证手机
-    'check_verify_code': 'success'
+  // 验证手机
+  check_verify_code: 'success',
 };
 
 /**
@@ -20,31 +17,14 @@ const BASIC_QUERY_DATA_MAP = {
  * @type {Object}
  */
 const WAIT = {
-    READY: '#root .display-verify-phone'
+  READY: '#root .display-verify-phone',
 };
 
-/**
- * 获取页面的地址
- *
- * @return {String}
- */
-function getPageUrl(opts) {
-    const defaultOpts = {
-        not_verify_id: 0
-    };
-
-    // not_verify_id 0=成功之后跳转到身份证认证，1=成功之后跳转到提现页
-    return urlHandle.getUrl('https://now.qq.com/h5/personal-center/verify-phone.html?_bid=3683&need_titlebar=1&now_id=93033660', Object.assign({}, defaultOpts, opts));
-
-}
+const PAGE_URL =
+  'https://now.qq.com/h5/personal-center/verify-phone.html?_bid=3683&from=1&now_id=93033660';
 
 module.exports = {
-    getPageUrl,
-    WAIT,
-    createPageDriver: (caseModuleFilePath, opts = {}) => {
-        // 设置默认的桩数据
-        opts.queryDataMap = Object.assign({}, BASIC_QUERY_DATA_MAP, opts.queryDataMap);
-
-        return createPageDriver(caseModuleFilePath, opts);
-    }
+  WAIT,
+  PAGE_URL,
+  BASIC_QUERY_DATA_MAP
 };
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-basic.js b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-basic.js
index beae147..f7d1a95 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-basic.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-basic.js
@@ -1,66 +1,63 @@
-const env = require('./env');
-
-function getResult(opts, pageOpts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl(pageOpts))
-
-        // 第一步：开始操作之前
-        .addAction('init', function (nightmareRun) {
-            return nightmareRun.wait(500);
-        })
-
-        // 第二步：电话号码输入框输入一个非1开头的数字
-        .addAction('notBeginWith1', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '666').wait(500);
-        })
-
-        // 第三步：电话号码输入框输入 1234567890（还差一位）
-        .addAction('lostLastOne', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '1234567890').wait(500);
-        })
-
-        // 第四步：尝试点击获取验证码按钮
-        .addAction('clickVerifyCodeBtn1', function (nightmareRun) {
-            return nightmareRun.click('#get-verify-code-btn').wait(500);
-        })
-
-        // 第五步：电话号码输入框再补1位数字，即 12345678901
-        .addAction('inputAllPhoneNum', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '1').wait(500);
-        })
-
-        // 第六步：再次尝试点击获取验证码按钮
-        .addAction('clickVerifyCodeBtn2', function (nightmareRun) {
-            return nightmareRun.click('#get-verify-code-btn').wait(500);
-        })
-
-        // 第七步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end();
-}
-
-module.exports = getResult;
-
-// getResult({
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：电话号码输入框输入一个非1开头的数字
+  await pageDriver.addAction('notBeginWith1', async (page) => {
+    await page.type('#phone-num', '666');
+  });
+
+  // 第三步：电话号码输入框输入 1234567890（还差一位）
+  await pageDriver.addAction('lostLastOne', async (page) => {
+    await page.type('#phone-num', '1234567890');
+  });
+
+  // 第四步：尝试点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyCodeBtn1', async (page) => {
+    await page.click('#get-verify-code-btn');
+  });
+
+  // 第五步：电话号码输入框再补1位数字，即 12345678901
+  await pageDriver.addAction('inputAllPhoneNum', async (page) => {
+    await page.type('#phone-num', '1');
+  });
+
+  // 第六步：再次尝试点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyCodeBtn2', async (page) => {
+    await page.click('#get-verify-code-btn');
+    await page.waitFor('.display-message-tips');
+  });
+
+  // 第七步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
 //     show: true,
 //     doNotCloseBrowser: true,
-//     useRecorder: false
-// })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+//     useRecorder: true,
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail-go-login.js b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail-go-login.js
new file mode 100644
index 0000000..7722d1f
--- /dev/null
+++ b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail-go-login.js
@@ -0,0 +1,46 @@
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第二步：电话号码输入框输入: 12345678901
+  await pageDriver.addAction('inputPhoneNum', async (page) => {
+    await page.type('#phone-num', '12345678901');
+  });
+
+  // 第三步：点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyCodeBtn', async (page) => {
+    await page.click('#get-verify-code-btn');
+    await page.waitForNavigation();
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
+//     show: true,
+//     doNotCloseBrowser: true,
+//     useRecorder: true,
+//     queryDataMap: {
+//       get_verify_code: 'error_100000',
+//     },
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail.js b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail.js
index c7b1da3..723d1f4 100644
--- a/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail.js
+++ b/DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail.js
@@ -1,56 +1,51 @@
-const env = require('./env');
-
-function getResult(opts, pageOpts) {
-    return env.createPageDriver(__filename, opts)
-
-        // 加载页面地址
-        .goto(env.getPageUrl(pageOpts))
-
-        // 第一步：电话号码输入框输入: 12345678901
-        .addAction('inputPhoneNum', function (nightmareRun) {
-            return nightmareRun.type('#phone-num', '12345678901').wait(500);
-        })
-
-        // 第二步：点击获取验证码按钮
-        .addAction('clickVerifyCodeBtn', function (nightmareRun) {
-            return nightmareRun.click('#get-verify-code-btn').wait(500);
-        })
-
-        // 第三步：3s后再次获取页面状态
-        .addAction('checkPageStatus', function (nightmareRun) {
-            return nightmareRun.wait(3000);
-        })
-
-        // 需要等待某些条件达成，才开始运行爬虫脚本
-        .wait(env.WAIT.READY)
-
-        // 爬虫脚本的函数，用于获取页面中的数据
-        .evaluate('./crawlers/get-page-info.js')
-
-        // 结束，获取结果
-        .end()
-        .then(function (result) {
-            const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
-
-            result.isRedirectToLogin = result.isExistPage(loginPage, {}, 200);
-
-            return result;
-        });
-}
-
-module.exports = getResult;
-
-// getResult({
+const path = require('path');
+const { createPageDriver } = require('../../helpers');
+const { BASIC_QUERY_DATA_MAP, WAIT, PAGE_URL } = require('./env');
+const { getPageUrl } = require('./env/helper');
+
+module.exports = async (pageDriverOpts, pageUrlOpts) => {
+  const pageDriver = await createPageDriver(__filename, pageDriverOpts, BASIC_QUERY_DATA_MAP);
+
+  // 设置页面地址
+  await pageDriver.setPageUrl(getPageUrl(PAGE_URL, pageUrlOpts));
+
+  // 第一步：开始操作之前，等待页面加载完成
+  await pageDriver.addAction('init', async (page) => {
+    await page.waitFor(WAIT.READY);
+  });
+
+  // 第一步：电话号码输入框输入: 12345678901
+  await pageDriver.addAction('inputPhoneNum', async (page) => {
+    await page.type('#phone-num', '12345678901');
+  });
+
+  // 第二步：点击获取验证码按钮
+  await pageDriver.addAction('clickVerifyCodeBtn', async (page) => {
+    await page.click('#get-verify-code-btn');
+    await page.waitFor('.display-message-tips');
+  });
+
+  // 第三步：3s后再次获取页面状态
+  await pageDriver.addAction('checkPageStatus', async (page) => {
+    await page.waitFor(3000);
+  });
+
+  // 爬虫脚本的函数，用于获取页面中的数据
+  return pageDriver.evaluate(path.join(__dirname, './crawlers/get-page-info.js'));
+};
+
+// module
+//   .exports({
 //     show: true,
-//     doNotCloseBrowser: true,
+//     doNotCloseBrowser: false,
 //     useRecorder: true,
 //     queryDataMap: {
-//         'get_verify_code': 'error_100000'
-//     }
-// })
-//     .then(function (result) {
-//         console.log(JSON.stringify(result));
-//     })
-//     .catch(function (error) {
-//         console.error('failed:', error);
-//     });
+//       get_verify_code: 'fail_17',
+//     },
+//   })
+//   .then(function (result) {
+//     console.log(JSON.stringify(result));
+//   })
+//   .catch(function (error) {
+//     console.error('failed:', error);
+//   });
diff --git a/DevOps/matman-app/helpers/index.js b/DevOps/matman-app/helpers/index.js
index 93345d6..702a08e 100644
--- a/DevOps/matman-app/helpers/index.js
+++ b/DevOps/matman-app/helpers/index.js
@@ -1,40 +1,45 @@
+const _ = require('lodash');
 const matman = require('matman');
-const { createMockStarQuery } = require('mockstar');
+const { BrowserRunner } = require('matman-runner-puppeteer');
 
 /**
  * 创建端对端测试的 page driver
  *
  * @param {String} caseModuleFilePath caseModule的根目录，必须要绝对路径
- * @param {Object} opts 额外参数
- * @return {matman.PageDriver}
+ * @param {Object} pageDriverOpts 额外参数
+ * @param {Object} [queryDataMap] 额外参数
  * @author helinjiang
  */
-function createPageDriver(caseModuleFilePath, opts = {}) {
-    const pageDriver = matman
-
-        // 创建 Browser 对象，使用它对浏览器进行设置
-        .launch({ show: process.env.SHOW_BROWSER || opts.show })
-
-        // 创建 Page 对象，使用它可以实现对浏览器页面的控制
-        .newPage(caseModuleFilePath, opts)
-
-        // 设置浏览器参数
-        .setDeviceConfig('mobile')
-
-        // 走指定的代理服务，由代理服务配置请求加载本地项目，从而达到同源测试的目的
-        .useProxyServer(`127.0.0.1:${process.env.WHISTLE_PORT || 8899}`)
-
-        // 设置截屏
-        .setScreenshotConfig(true);
-
-    // 使用 mockstar 来做构造假数据
-    if (opts.queryDataMap) {
-        pageDriver.useMockstar(createMockStarQuery(opts.queryDataMap));
-    }
-
-    return pageDriver;
+async function createPageDriver(
+  caseModuleFilePath,
+  pageDriverOpts,
+  queryDataMap,
+) {
+  // 创建 PageDriver，API 详见 https://matmanjs.github.io/matman/api/
+  const pageDriver = await matman.launch(
+    new BrowserRunner(),
+    _.merge({}, pageDriverOpts, { caseModuleFilePath }),
+  );
+
+  // 走指定的代理服务，由代理服务配置请求加载本地项目，从而达到同源测试的目的
+  await pageDriver.useProxyServer(await matman.getLocalWhistleServer(8899));
+
+  // 使用 mockstar 来做 mock server 用于构造假数据
+  if (queryDataMap || pageDriverOpts.queryDataMap) {
+    await pageDriver.useMockstar(
+      _.merge({}, queryDataMap, pageDriverOpts.queryDataMap),
+    );
+  }
+
+  // 设置浏览器设备型号
+  await pageDriver.setDeviceConfig('iPhone 6');
+
+  // 设置截屏
+  await pageDriver.setScreenshotConfig(true);
+
+  return pageDriver;
 }
 
 module.exports = {
-    createPageDriver
-};
\ No newline at end of file
+  createPageDriver,
+};
diff --git a/DevOps/matman-app/package.json b/DevOps/matman-app/package.json
index 1d656b0..106ec36 100644
--- a/DevOps/matman-app/package.json
+++ b/DevOps/matman-app/package.json
@@ -7,11 +7,11 @@
     "build-dev": "matman build --dev"
   },
   "dependencies": {
-    "matman": "^5.0.6",
-    "mockstar": "^1.1.5",
+    "matman": "^6.0.15",
+    "matman-runner-puppeteer": "^6.0.16",
     "web-crawl-util": "^0.1.1"
   },
   "devDependencies": {
-    "matman-cli": "^5.0.6"
+    "matman-cli": "^6.0.15"
   }
 }
diff --git a/DevOps/mockstar-app/package.json b/DevOps/mockstar-app/package.json
index 433d26f..535c187 100644
--- a/DevOps/mockstar-app/package.json
+++ b/DevOps/mockstar-app/package.json
@@ -6,9 +6,9 @@
     "stop": "mockstar stop"
   },
   "dependencies": {
-    "mockstar": "^1.1.5"
+    "mockstar": "^1.2.1"
   },
   "devDependencies": {
-    "mockstar-cli": "^1.1.5"
+    "mockstar-cli": "^1.2.1"
   }
 }
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..b403b26
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,4 @@
+FROM csighub.tencentyun.com/tde/static-resource:latest
+ENV PROJECT_PRODUCT now
+ENV PROJECT_MODULENAME h5
+COPY dist /tmp/
diff --git a/dwt.config.js b/dwt.config.js
new file mode 100644
index 0000000..31e302e
--- /dev/null
+++ b/dwt.config.js
@@ -0,0 +1,93 @@
+const path = require('path');
+
+// DWT 自动化测试产出物目录
+const dwtOutputPath = path.join(__dirname, './.dwt_output');
+
+// 本项目负责人
+const projectOwner = ['linjianghe', 'michealfeng'];
+
+// EPTest平台项目ID，不同 git 仓库值不一样
+const eptestProjectId = 'iv-web/now-h5-personal-center';
+
+// 覆盖率平台项目ID，now 直播团队固定是这个值，请不要修改！
+const macaronProjectId = '9fa179ec-57db-4a08-8331-86a640ca';
+
+module.exports = {
+  // DWT 自动化测试产出物目录
+  dwtOutputPath,
+
+  // 使用什么 CI： Orange-CI、蓝盾
+  ciPlatform: '蓝盾',
+
+  // 单元测试
+  unitTest: {
+    // 是否跳过测试
+    disableTest: false,
+
+    // 是否为调试模式，该模式下不会上报数据到效能平台进行epc统计
+    isDebug: false,
+
+    // 项目负责人
+    projectOwner,
+
+    // 【终端平台测试插件】
+    eptest: {
+      // 项目名(EPTest平台projectID)
+      projectId: eptestProjectId,
+
+      // 执行命令
+      cmd: 'tnpm install && tnpm run test:unit && cp .dwt_output/unit/dwt* .',
+    },
+
+    // 【覆盖率-前置信息采集】【覆盖率-后置信息处理】
+    macaron: {
+      // 覆盖率平台项目ID
+      projectId: macaronProjectId,
+
+      // lcov.info 的文件的绝对路径
+      lcovInfoFilePath: path.join(dwtOutputPath, 'coverage/lcov.info'),
+    },
+
+    // 【归档构件(new)】
+    archive: {
+      // 待归档的文件
+      filePath: path.join(dwtOutputPath, 'UT-output.zip'),
+    },
+  },
+
+  // 端对端测试
+  e2eTest: {
+    // 是否跳过测试
+    disableTest: false,
+
+    // 是否为调试模式，该模式下不会上报数据到效能平台进行epc统计
+    isDebug: false,
+
+    // 项目负责人
+    projectOwner,
+
+    // 【终端平台测试插件】
+    eptest: {
+      // 项目名(EPTest平台projectID)
+      projectId: eptestProjectId,
+
+      // 执行命令
+      cmd: 'tnpm install && tnpm run test:e2e && cp .dwt_output/e2e/dwt* .',
+    },
+
+    // 【覆盖率-前置信息采集】【覆盖率-后置信息处理】
+    macaron: {
+      // 覆盖率平台项目ID
+      projectId: macaronProjectId,
+
+      // lcov.info 的文件的绝对路径
+      lcovInfoFilePath: path.join(dwtOutputPath, 'e2e/coverage/lcov.info'),
+    },
+
+    // 【归档构件(new)】
+    archive: {
+      // 待归档的文件
+      filePath: path.join(dwtOutputPath, 'BVT-output.zip'),
+    },
+  },
+};
diff --git a/feflow.js b/feflow.js
index 4f950d0..072b0d0 100644
--- a/feflow.js
+++ b/feflow.js
@@ -6,17 +6,17 @@ const isFeflowDev = process.env.FEFLOW_ENV === 'debug';
 
 // 构建选项
 const BUILD_OPTS = {
-    // 普通构建
-    BASIC_BUILD: true,
+  // 普通构建
+  BASIC_BUILD: true,
 
-    // 支持 preRender
-    PRE_RENDER: false,
+  // 支持 preRender
+  PRE_RENDER: false,
 
-    // 支持直出
-    SSR: true,
+  // 支持直出
+  SSR: true,
 
-    // 支持 pwa
-    PWA: path.join(__dirname, './src/business/base-pwa/sw.js')
+  // 支持 pwa
+  PWA: path.join(__dirname, './src/business/base-pwa/sw.js'),
 };
 
 /**
@@ -26,95 +26,95 @@ const BUILD_OPTS = {
  * @returns {Object}
  */
 function getMergeResult(buildOpts = {}) {
-    const builderType = '@tencent/builder-webpack3-x';
-
-    // 参数的含义 https://github.com/feflow/builder-webpack3
-    const builderOptions = {
-        'outDir': 'dist',
-        'domain': 'now.qq.com',
-        'product': 'now',
-        'moduleName': 'h5',
-        'bizName': 'personal-center',
-        'minifyHTML': true,
-        'minifyCSS': true,
-        'minifyJS': true,
-        'inlineCSS': true,
-        'usePx2rem': true,
-        'remUnit': 37.5,
-        'remPrecision': 6,
-        'inject': true,
-        'enableE2ETest': process.env.FEFLOW_ENV === 'test',
-        'port': process.env.PORT || 8001,
-        'cdn': 'now8.gtimg.com',
-        'externals': [{
-            'module': 'react',
-            'entry': isFeflowDev ? '//now8.gtimg.com/now/lib/16.2.0/react.js' : '//now8.gtimg.com/now/lib/16.2.0/react.min.js?_bid=3123',
-            'global': 'React'
-        }, {
-            'module': 'react-dom',
-            'entry': isFeflowDev ? '//now8.gtimg.com/now/lib/16.2.0/react-dom.js' : '//now8.gtimg.com/now/lib/16.2.0/react-dom.min.js?_bid=3123',
-            'global': 'ReactDOM'
-        }],
-        'webpackConfig': {
-            config: {
-                plugins: [
-                    new PolyfillWebpackPlugin({
-                        _polyfillUrl: '//now8.gtimg.com/now/polyfill/',
-                        polyfillSuccess: function (opts) {
-                            window._report_.monitor(33612300);
-                        },
-                        polyfillError: function (opts) {
-                            window._report_.monitor(33612301);
-                        }
-                    })
-                ]
+  const builderType = '@tencent/builder-webpack3-x';
+
+  // 参数的含义 https://github.com/feflow/builder-webpack3
+  const builderOptions = {
+    outDir: 'dist',
+    domain: 'now.qq.com',
+    product: 'now',
+    moduleName: 'h5',
+    bizName: 'personal-center',
+    minifyHTML: true,
+    minifyCSS: true,
+    minifyJS: true,
+    inlineCSS: true,
+    usePx2rem: true,
+    remUnit: 37.5,
+    remPrecision: 6,
+    inject: true,
+    enableE2ETest: process.env.FEFLOW_ENV === 'test',
+    port: process.env.PORT || 8001,
+    cdn: 'now8.gtimg.com',
+    externals: [{
+      module: 'react',
+      entry: isFeflowDev ? '//now8.gtimg.com/now/lib/16.2.0/react.js' : '//now8.gtimg.com/now/lib/16.2.0/react.min.js?_bid=3123',
+      global: 'React',
+    }, {
+      module: 'react-dom',
+      entry: isFeflowDev ? '//now8.gtimg.com/now/lib/16.2.0/react-dom.js' : '//now8.gtimg.com/now/lib/16.2.0/react-dom.min.js?_bid=3123',
+      global: 'ReactDOM',
+    }],
+    webpackConfig: {
+      config: {
+        plugins: [
+          new PolyfillWebpackPlugin({
+            _polyfillUrl: '//now8.gtimg.com/now/polyfill/',
+            polyfillSuccess: function () {
+              window._report_.monitor(33612300);
             },
-            smartStrategyOption: {
-                'plugins': 'append'
-            }
-        }
+            polyfillError: function () {
+              window._report_.monitor(33612301);
+            },
+          }),
+        ],
+      },
+      smartStrategyOption: {
+        plugins: 'append',
+      },
+    },
+  };
+
+  // 构建的type
+  // TODO type 的设计可能会被移除
+  builderOptions.type = (function () {
+    const BUILD_TYPE = {
+      // 普通构建
+      BASIC_BUILD: 1,
+
+      // 支持 preRender
+      PRE_RENDER: 2,
+
+      // 支持直出
+      SSR: 4,
+
+      // 支持 pwa
+      PWA: 8,
     };
 
-    // 构建的type
-    // TODO type 的设计可能会被移除
-    builderOptions.type = (function () {
-        const BUILD_TYPE = {
-            // 普通构建
-            BASIC_BUILD: 1,
-
-            // 支持 preRender
-            PRE_RENDER: 2,
-
-            // 支持直出
-            SSR: 4,
-
-            // 支持 pwa
-            PWA: 8
-        };
-
-        let result = 0;
-
-        Object.keys(BUILD_OPTS).forEach((key) => {
-            if (BUILD_OPTS[key]) {
-                result = result + (BUILD_TYPE[key] || 0);
-            }
-        });
-
-        return result;
-    })(buildOpts);
-
-    if (BUILD_OPTS.PWA) {
-        builderOptions.pwa = BUILD_OPTS.PWA;
-    }
-
-    return {
-        'builderType': builderType,
-        'builderOptions': builderOptions,
-        'deployerType': '@tencent/deployer-ivweb',
-        'deployerOptions': {
-            'jbDistId': ''
-        }
-    };
+    let result = 0;
+
+    Object.keys(BUILD_OPTS).forEach((key) => {
+      if (BUILD_OPTS[key]) {
+        result = result + (BUILD_TYPE[key] || 0);
+      }
+    });
+
+    return result;
+  }(buildOpts));
+
+  if (BUILD_OPTS.PWA) {
+    builderOptions.pwa = BUILD_OPTS.PWA;
+  }
+
+  return {
+    builderType,
+    builderOptions,
+    deployerType: '@tencent/deployer-ivweb',
+    deployerOptions: {
+      jbDistId: '',
+    },
+  };
 }
 
 module.exports = getMergeResult(BUILD_OPTS);
diff --git a/package.json b/package.json
index 5375b4a..999541c 100644
--- a/package.json
+++ b/package.json
@@ -6,16 +6,17 @@
         "start": "cross-env FEFLOW_ENV=debug feflow dev --disable-check",
         "build": "feflow build",
         "use-whistle-dev": "cd DevOps/whistle && tnpm run start-dev",
-        "test": "cd DevOps/devops-app && tnpm install && tnpm run test",
-        "test:unit": "cross-env BABEL_ENV=test mocha test/unit",
-        "test:e2e": "cd DevOps/devops-app && tnpm install && tnpm run test:e2e",
+        "test:unit": "npm run coverage && node test/run-unit-test-after.js",
+        "test:e2e": "node test/run-e2e-test.js",
+        "test:unit:direct": "cross-env BABEL_ENV=test mocha test/unit",
         "test:e2e:direct": "mocha test/e2e",
-        "coverage": "nyc npm run test",
+        "coverage": "nyc npm run test:unit:direct",
         "precommit": "lint-staged",
         "commitmsg": "validate-commit-msg",
         "commit": "git-cz ",
         "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
-        "pub:jenkins": "feflow build"
+        "pub:jenkins": "feflow build",
+        "eslint": "eslint src/"
     },
     "lint-staged": {
         "src/*.{js,jsx}": [
@@ -91,12 +92,16 @@
     },
     "devDependencies": {
         "@tencent/async-polyfill": "^1.2.3",
-        "@tencent/iv-tester": "^1.0.1",
+        "@tencent/dwt": "^2.8.3",
+        "@tencent/dwt-driver-matman": "^3.1.4",
+        "@tencent/eslint-config-tencent": "^0.7.0",
+        "@tencent/iv-tester": "^2.1.0",
         "babel-cli": "^6.26.0",
         "babel-core": "^6.26.3",
         "babel-eslint": "^10.0.1",
         "babel-loader": "^7.1.5",
         "babel-plugin-import": "^1.6.6",
+        "babel-plugin-module-resolver": "^4.0.0",
         "babel-plugin-transform-decorators-legacy": "^1.3.4",
         "babel-preset-env": "^1.6.1",
         "babel-preset-es2015": "^6.24.1",
@@ -105,17 +110,20 @@
         "chai": "^4.2.0",
         "commitizen": "^2.3.0",
         "conventional-changelog-cli": "^1.3.22",
-        "cross-env": "^5.2.0",
+        "cross-env": "^5.2.1",
         "eslint": "^5.9.0",
         "eslint-config-ivweb": "^0.1.4",
         "html-loader": "^0.5.5",
         "husky": "^0.13.1",
         "ignore-loader": "^0.1.2",
+        "ignore-styles": "^5.0.1",
         "jsdom": "^11.10.0",
         "jsdom-global": "^3.0.2",
         "lint-staged": "^4.2.3",
-        "mocha": "^7.1.1",
-        "nyc": "^15.0.1",
+        "mocha": "^8.0.1",
+        "mochawesome": "^6.1.1",
+        "nyc": "^15.1.0",
+        "prettier": "^2.0.5",
         "validate-commit-msg": "^2.11.1"
     }
 }
diff --git a/src/assets/global/global.js b/src/assets/global/global.js
index 58bbc52..4ea0c0c 100644
--- a/src/assets/global/global.js
+++ b/src/assets/global/global.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 'use strict';
 
 import '@tencent/promise';
@@ -9,47 +10,47 @@ initReactFastclick();
 
 // hack
 (function () {
-    Object.assign = Object.assign || function (target) {
-        for (let i = 1; i < arguments.length; i++) {
-            const source = arguments[i];
-            for (const key in source) {
-                if (Object.prototype.hasOwnProperty.call(source, key)) {
-                    target[key] = source[key];
-                }
-            }
+  Object.assign = Object.assign || function (target) {
+    for (let i = 1; i < arguments.length; i++) {
+      const source = arguments[i];
+      for (const key in source) {
+        if (Object.prototype.hasOwnProperty.call(source, key)) {
+          target[key] = source[key];
         }
-        return target;
-    };
-})();
+      }
+    }
+    return target;
+  };
+}());
 
 // 2s 延时自动加载
-setTimeout(function () {
-    // 加载 mqq
-    if (device.isQQ) {
-        require.ensure([], (require) => {
-            const loadMqq = require('@tencent/mqq-master').loadMqq;
+setTimeout(() => {
+  // 加载 mqq
+  if (device.isQQ) {
+    require.ensure([], (require) => {
+      const { loadMqq } = require('@tencent/mqq-master');
 
-            loadMqq()
-                .catch((err) => {
-                    if (process.env.NODE_ENV !== 'production') {
-                        console.log('load mqq when loaded failed', err);
-                    }
-                });
+      loadMqq()
+        .catch((err) => {
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('load mqq when loaded failed', err);
+          }
         });
-    }
+    });
+  }
 
-    // 加载 weixin jsbridge
-    if (device.isWeixin) {
-        require.ensure([], (require) => {
-            const loadWeixinJsbridge = require('@tencent/weixin-master').loadWeixinJsbridge;
+  // 加载 weixin jsbridge
+  if (device.isWeixin) {
+    require.ensure([], (require) => {
+      const { loadWeixinJsbridge } = require('@tencent/weixin-master');
 
-            // 加载 mqq
-            loadWeixinJsbridge()
-                .catch((err) => {
-                    if (process.env.NODE_ENV !== 'production') {
-                        console.log('load weixin jsbridge when loaded failed', err);
-                    }
-                });
+      // 加载 mqq
+      loadWeixinJsbridge()
+        .catch((err) => {
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('load weixin jsbridge when loaded failed', err);
+          }
         });
-    }
+    });
+  }
 }, 2000);
diff --git a/src/business/base-alert/index.js b/src/business/base-alert/index.js
deleted file mode 100644
index 203d7c5..0000000
--- a/src/business/base-alert/index.js
+++ /dev/null
@@ -1,79 +0,0 @@
-// import Dialog from '@tencent/now-base-dialog';
-
-import { NowJS } from 'business/base-app-now';
-
-function showByNowJsbridge(opts, callback) {
-    NowJS.ui.showAlert(Object.assign({
-        title: '',
-        text: '',
-        buttonText: '确定'
-    }, opts), (ret) => {
-        callback(ret);
-    });
-}
-
-/**
- * 展现一个模态框
- * opts={
-    skin,
-    text,
-    onEnter,
-    onCancel,
-    enterText,
-    cancelText
- }
- * @param {Object | String} opts
- */
-export function showAlert(_opts) {
-    let opts = _opts;
-    if (typeof opts === 'string') {
-        opts = {
-            text: opts
-        };
-    }
-
-    return new Promise((resolve) => {
-        showByNowJsbridge(opts, (ret) => {
-            resolve(ret);
-        });
-    });
-}
-
-/**
- * 展现一个模态框
- * opts={
-    skin,
-    text,
-    onEnter,
-    onCancel,
-    enterText,
-    cancelText
- }
- * @param {Object | String} opts
- */
-// function showByBaseDialog(opts) {
-//     let params = Object.assign({
-//         text: '提示文案',
-//         enterText: '确定',
-//         skin: 'mid'
-//     }, opts);
-//
-//     let dlg;
-//
-//     let removeDlg = () => {
-//         if (typeof dlg !== 'undefined') {
-//             dlg.remove();
-//         }
-//     };
-//
-//     if (typeof params.onEnter !== 'function') {
-//         params.onEnter = removeDlg;
-//     } else {
-//         params.onEnter = () => {
-//             params.onEnter();
-//             removeDlg();
-//         };
-//     }
-//
-//     dlg = Dialog.create(params);
-// }
diff --git a/src/business/base-app-now/index.js b/src/business/base-app-now/index.js
deleted file mode 100644
index 3533138..0000000
--- a/src/business/base-app-now/index.js
+++ /dev/null
@@ -1,52 +0,0 @@
-import NowJS from '@tencent/now-jsbridge';
-
-import logger from 'business/base-logger';
-
-export NowJS from '@tencent/now-jsbridge';
-
-/**
- * 当前是否在NOW APP中
- * @return {Boolean}
- */
-export const isInNowApp = NowJS.platform.now;
-
-/**
- * 标记NOW客户端状态为： webview 已加载
- * 注意，如果不手动通知 webview，则客户端可能会认为webview加载失败，则会调用 window.__WEBVIEW_LOADFAIL 方法
- */
-export function setWebviewLoaded() {
-    logger.log('setWebviewLoaded');
-    window._webviewloaded = true;
-}
-
-/**
- * 通知NOW客户端停止展示 loading
- */
-export function stopLoading() {
-    logger.log('[NowJS] ui.stoploading');
-
-    NowJS.invoke('ui', 'stoploading', {});
-}
-
-/**
- * 关闭当前webview后退
- * http://now.oa.com/nowjs/docs/#js-mqq-ui-backToWebView
- * @param {Number} index
- */
-export function backToWebView(index = -1) {
-    const param = { index: index };
-
-    logger.log('[NowJS] ui.backToWebView', param);
-
-    NowJS.ui.backToWebView(param);
-}
-
-/**
- * 关闭当前webview
- * http://now.oa.com/nowjs/docs/#js-mqq-ui-backToWebView
- */
-export function closeCurrentWebView() {
-    logger.log('[NowJS] ui.closeCurrentWebView');
-
-    NowJS.ui.closeCurrentWebView();
-}
diff --git a/src/business/base-confirm/index.js b/src/business/base-confirm/index.js
deleted file mode 100644
index 935df7f..0000000
--- a/src/business/base-confirm/index.js
+++ /dev/null
@@ -1,79 +0,0 @@
-import Dialog from '@tencent/now-base-dialog';
-let dlg;
-/**
- * opts={
-    skin,
-    text,
-    onEnter,
-    onCancel,
-    enterText,
-    cancelText
- }
- * @param {Object} opts
- * @param {Object} options
- */
-function showByNowBaseDialog (_opts, options = {}) {
-    let opts = _opts;
-
-    // 移除自己
-    const removeDlg = () => {
-        if (typeof dlg !== 'undefined') {
-            dlg.remove();
-        }
-    };
-
-    const _onEnter = opts.onEnter;
-    const _onCancel = opts.onCancel;
-
-    const _onEnterOptions = options.onEnter || function () {};
-    delete options.onEnter;
-
-    const _onCancelOptions = options.onCancel || function () {};
-
-    delete options.onCancel;
-
-    opts = Object.assign({}, opts, options);
-
-    // 确认
-    opts.onEnter = () => {
-        _onEnterOptions();
-        _onEnter();
-        removeDlg();
-    };
-
-    // 取消
-    opts.onCancel = () => {
-        _onCancelOptions();
-        _onCancel();
-        removeDlg();
-    };
-
-    dlg = Dialog.create(opts);
-}
-
-/**
- * 展现一个确认框
- *
- * @param {String} text 要确认的文案
- * @param {Object} [opts] 额外参数
- * @param {String} [opts.okBtnText] 确定按钮的文案
- * @param {String} [opts.cancelBtnText] 取消按钮的文案
- * @param {String} [opts.skin] 弹窗框追加的css样式类
- * @param {Object} [opts.nowBaseDialogOpts] 直接传递给 @tencent/now-base-dialog 组件的参数
- */
-export function showConfirm (text, opts = {}) {
-    return new Promise((resolve, reject) => {
-        showByNowBaseDialog({
-            text: text || '',
-            enterText: opts.okBtnText || '确定',
-            cancelText: opts.cancelBtnText || '取消',
-            skin: `base-confirm ${opts.skin || ''}`,
-            onEnter: () => {
-                resolve();
-            },
-            onCancel: () => {
-                reject(new Error());
-            }
-        }, opts.nowBaseDialogOpts);
-    });
-}
diff --git a/src/business/base-inline-in-foot/index.js b/src/business/base-inline-in-foot/index.js
index 0e1c009..ac086de 100644
--- a/src/business/base-inline-in-foot/index.js
+++ b/src/business/base-inline-in-foot/index.js
@@ -1,52 +1,52 @@
+/* istanbul ignore file */
 (function () {
-    // 当前页面是否为重试的页面，如果是重试后的页面，则在报错之后，不能够再重新 reload，否则会陷入死循环中
-    const isRetry = window.gTool.isLoadAfterRetry;
-
-    function init() {
-        const REPORT_MONITOR = window.gConfig.REPORT_MONITOR || {};
-
-        try {
-            // window.Pager 在 pages/xxx/init.js 中设置
-            const Pager = window.Pager;
-
-            // 渲染页面
-            new Pager().init((isSuccess, err) => {
-                // TODO 这里的成功回调似乎还有待确认的，有时候可能没有回调
-                if (isSuccess) {
-                    window.gReporter.log('ReactDOM success');
-                } else {
-                    window.gReporter.log('ReactDOM err', { err: err }, true);
-
-                    // 必须把捕获到的错误再抛出去，否则 badjs 就无法捕获到这里的错误了。
-                    throw err;
-                }
-            });
-
-            // monitor上报
-            window.gReporter.monitor(isRetry ? REPORT_MONITOR.LOAD_SUCCESS_RETRY : REPORT_MONITOR.LOAD_SUCCESS);
-
-        } catch (err) {
-            if (!isRetry) {
-                // 首次加载失败
-                window.gReporter.monitor(REPORT_MONITOR.LOAD_FAIL);
-
-                // 重试一下
-                setTimeout(function () {
-                    location.replace(location.href + (location.href.match(/\?/) ? '&' : '?') + '_retry=1');
-                }, 2000);
-            } else {
-                // 重试一次后仍然失败
-                window.gReporter.monitor(REPORT_MONITOR.LOAD_FAIL_RETRY);
-
-                // TODO 这种情况下，应该还有提示手动刷新或者一键反馈的按钮
-            }
-
-            window.gReporter.log('init failed isRetry[' + isRetry + ']: ' + (err && err.toString() || ''), true);
-
-            // stop
-            throw err;
+  // 当前页面是否为重试的页面，如果是重试后的页面，则在报错之后，不能够再重新 reload，否则会陷入死循环中
+  const isRetry = window.gTool.isLoadAfterRetry;
+
+  function init() {
+    const REPORT_MONITOR = window.gConfig.REPORT_MONITOR || {};
+
+    try {
+      // window.Pager 在 pages/xxx/init.js 中设置
+      const { Pager } = window;
+
+      // 渲染页面
+      new Pager().init((isSuccess, err) => {
+        // TODO 这里的成功回调似乎还有待确认的，有时候可能没有回调
+        if (isSuccess) {
+          window.gReporter.log('ReactDOM success');
+        } else {
+          window.gReporter.log('ReactDOM err', { err }, true);
+
+          // 必须把捕获到的错误再抛出去，否则 badjs 就无法捕获到这里的错误了。
+          throw err;
         }
+      });
+
+      // monitor上报
+      window.gReporter.monitor(isRetry ? REPORT_MONITOR.LOAD_SUCCESS_RETRY : REPORT_MONITOR.LOAD_SUCCESS);
+    } catch (err) {
+      if (!isRetry) {
+        // 首次加载失败
+        window.gReporter.monitor(REPORT_MONITOR.LOAD_FAIL);
+
+        // 重试一下
+        setTimeout(() => {
+          location.replace(`${location.href + (location.href.match(/\?/) ? '&' : '?')}_retry=1`);
+        }, 2000);
+      } else {
+        // 重试一次后仍然失败
+        window.gReporter.monitor(REPORT_MONITOR.LOAD_FAIL_RETRY);
+
+        // TODO 这种情况下，应该还有提示手动刷新或者一键反馈的按钮
+      }
+
+      window.gReporter.log(`init failed isRetry[${isRetry}]: ${err ? err.toString() : ''}`, true);
+
+      // stop
+      throw err;
     }
+  }
 
-    window.gTool.isPack() ? setTimeout(init, 50) : init();
-})();
\ No newline at end of file
+  window.gTool.isPack() ? setTimeout(init, 50) : init();
+}());
diff --git a/src/business/base-inline-in-head/base.js b/src/business/base-inline-in-head/base.js
index d89024b..384c5f1 100644
--- a/src/business/base-inline-in-head/base.js
+++ b/src/business/base-inline-in-head/base.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 require('amfe-flexible');
 
 require('./window-gTool');
@@ -12,7 +13,7 @@ window.__DEV__ = false;
 
 // 非生产环境下会自动将该标记设置为true，用于处理某些逻辑
 if (process.env.NODE_ENV !== 'production') {
-    window.__DEV__ = true;
+  window.__DEV__ = true;
 }
 
 /**
@@ -29,23 +30,23 @@ window.IS_SERVER = false;
  * 注意，不是要处理所有的错误，其他的错误由 badjs 来处理！
  */
 window.onerror = function (msg, url, line, col, error) {
-    // 对一些异常场景的错误进行单独的处理
-    const result = window.gException.getDealError({
-        msg, url, line, col, error
-    }, {
-        isBadJsLoaded: !!window.BJ_REPORT,
-        isQQ: window.gTool.isQQ,
-        isNow: window.gTool.isNow,
-        isIOS: window.gTool.isIOS
-    });
+  // 对一些异常场景的错误进行单独的处理
+  const result = window.gException.getDealError({
+    msg, url, line, col, error,
+  }, {
+    isBadJsLoaded: !!window.BJ_REPORT,
+    isQQ: window.gTool.isQQ,
+    isNow: window.gTool.isNow,
+    isIOS: window.gTool.isIOS,
+  });
 
-    // 替换dom
-    if (result.html) {
-        document.body.innerHTML = result.html;
-    }
+  // 替换dom
+  if (result.html) {
+    document.body.innerHTML = result.html;
+  }
 
-    // 数据上报
-    if (result.isShowError) {
-        window.gReporter.log('[inline-error] ' + result.code, true);
-    }
+  // 数据上报
+  if (result.isShowError) {
+    window.gReporter.log(`[inline-error] ${result.code}`, true);
+  }
 };
diff --git a/src/business/base-inline-in-head/index.js b/src/business/base-inline-in-head/index.js
index 65b7b04..59432fe 100644
--- a/src/business/base-inline-in-head/index.js
+++ b/src/business/base-inline-in-head/index.js
@@ -1,13 +1,14 @@
+/* istanbul ignore file */
 // 非生产环境版本，默认引入 eruda，并默认开启，但如果url中包含了 no_eruda=1，则不初始化
 // 注意 eruda 会由构建工具在开发模式下自动引入，因此此处直接初始化即可
 if (process.env.NODE_ENV !== 'production') {
-    if (window.eruda && !/no_eruda=1/.test(window.location)) {
-        window.eruda.init();
+  if (window.eruda && !/no_eruda=1/.test(window.location)) {
+    window.eruda.init();
 
-        // 注意默认情况下 eruda 会覆盖 window.onerror，导致 badjs 无法正常获取到错误
-        // 因此需要将该参数设置为 false
-        window.eruda.get('console').config.set('catchGlobalErr', false);
-    }
+    // 注意默认情况下 eruda 会覆盖 window.onerror，导致 badjs 无法正常获取到错误
+    // 因此需要将该参数设置为 false
+    window.eruda.get('console').config.set('catchGlobalErr', false);
+  }
 }
 
 require('./base');
diff --git a/src/business/base-inline-in-head/report.js b/src/business/base-inline-in-head/report.js
index 84523dd..204c041 100644
--- a/src/business/base-inline-in-head/report.js
+++ b/src/business/base-inline-in-head/report.js
@@ -1,20 +1,21 @@
+/* istanbul ignore file */
 import BadJS from '/business/base-report/badjs';
 import WhiteList from '/business/base-report/whitelist';
 import AvReport from '/business/base-report/av-report';
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    if (!window.gConfig || !window.gConfig.badjsMonitor) {
-        throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsMonitor 参数值！');
-    }
+  if (!window.gConfig || !window.gConfig.badjsMonitor) {
+    throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsMonitor 参数值！');
+  }
 
-    if (!window.gConfig || !window.gConfig.badjsId) {
-        throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsId 参数值！');
-    }
+  if (!window.gConfig || !window.gConfig.badjsId) {
+    throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsId 参数值！');
+  }
 
-    if (!window.gConfig || !window.gConfig.avReportName) {
-        throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 avReportName 参数值！');
-    }
+  if (!window.gConfig || !window.gConfig.avReportName) {
+    throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 avReportName 参数值！');
+  }
 }
 
 // 初始化 badjs
@@ -22,8 +23,8 @@ BadJS.init(window.gConfig.badjsId, window.gConfig.badjsMonitor);
 
 // 初始化白名单上报
 WhiteList.init({
-    whitelistUrl: '',
-    badjsId: window.gConfig.badjsId
+  whitelistUrl: '',
+  badjsId: window.gConfig.badjsId,
 });
 
 // 初始化质量上报
diff --git a/src/business/base-inline-in-head/run-in-now-app.js b/src/business/base-inline-in-head/run-in-now-app.js
index f1160a9..8d4e557 100644
--- a/src/business/base-inline-in-head/run-in-now-app.js
+++ b/src/business/base-inline-in-head/run-in-now-app.js
@@ -1,16 +1,17 @@
+/* istanbul ignore file */
 /**
  * 在 NOW 独立版中，有一些特殊的逻辑需要额外处理
  */
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    if (!window.gReporter || typeof window.gReporter.monitor !== 'function') {
-        throw new Error('请在 /business/base-inline-in-head/window-gTool/index.js 中定义 monitor 方法！');
-    }
+  if (!window.gReporter || typeof window.gReporter.monitor !== 'function') {
+    throw new Error('请在 /business/base-inline-in-head/window-gTool/index.js 中定义 monitor 方法！');
+  }
 
-    if (!window.gConfig || !window.gConfig.badjsId) {
-        throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsId 参数值！');
-    }
+  if (!window.gConfig || !window.gConfig.badjsId) {
+    throw new Error('请在 /pages/*/business/window-gConfig/index.js 中配置 badjsId 参数值！');
+  }
 }
 
 /**
@@ -21,14 +22,14 @@ if (process.env.NODE_ENV !== 'production') {
  * @type {Function}
  */
 window.__WEBVIEW_LOADFAIL = function () {
-    // 手动上报一个monitor
-    window.gReporter.monitor(window.gConfig.badjsMonitor);
+  // 手动上报一个monitor
+  window.gReporter.monitor(window.gConfig.badjsMonitor);
 
-    setTimeout(() => {
-        // 这里抛出的错误将会被 ./index.js 中注册的 window.onerror 处理
-        // 最终将展示一个页面，让用户点击重试
-        throw new Error('__WEBVIEW_LOADFAIL call');
-    }, 100);
+  setTimeout(() => {
+    // 这里抛出的错误将会被 ./index.js 中注册的 window.onerror 处理
+    // 最终将展示一个页面，让用户点击重试
+    throw new Error('__WEBVIEW_LOADFAIL call');
+  }, 100);
 };
 
 /**
@@ -39,4 +40,4 @@ window.__WEBVIEW_LOADFAIL = function () {
  *
  * @type {Boolean}
  */
-window._webviewloaded = true;
\ No newline at end of file
+window._webviewloaded = true;
diff --git a/src/business/base-inline-in-head/sonic.js b/src/business/base-inline-in-head/sonic.js
index 1a63341..a3f86f9 100644
--- a/src/business/base-inline-in-head/sonic.js
+++ b/src/business/base-inline-in-head/sonic.js
@@ -1,66 +1,67 @@
+/* istanbul ignore file */
 // inline 提升 sonic 速度
 (function () {
-    // helper
-    function invoke(url, time) {
-        const iframe = document.createElement('iframe');
-        iframe.style.cssText = 'display:none;width:0px;height:0px;';
-        iframe.src = url;
-        (document.body || document.documentElement).appendChild(iframe);
-        setTimeout(function () {
-            iframe.parentNode && iframe.parentNode.removeChild(iframe);
-        }, time || 30);
-    }
+  // helper
+  function invoke(url, time) {
+    const iframe = document.createElement('iframe');
+    iframe.style.cssText = 'display:none;width:0px;height:0px;';
+    iframe.src = url;
+    (document.body || document.documentElement).appendChild(iframe);
+    setTimeout(() => {
+      iframe.parentNode && iframe.parentNode.removeChild(iframe);
+    }, time || 30);
+  }
 
-    if (process.browser) {
-        let isLoaded = false;
-        const cbList = [];
+  if (process.browser) {
+    let isLoaded = false;
+    const cbList = [];
 
-        window.isSonic = parseInt(window.gTool.query('asyncMode'), 10) === 3;
+    window.isSonic = parseInt(window.gTool.query('asyncMode'), 10) === 3;
 
-        if (window.isSonic) {
-            window.handleSonicLoaded = function (sonicData) {
-                if (sonicData) {
-                    let sonicStatus = 0;
-                    let sonicUpdateData = null; // 数据更新时终端返回的数据
+    if (window.isSonic) {
+      window.handleSonicLoaded = function (sonicData) {
+        if (sonicData) {
+          let sonicStatus = 0;
+          let sonicUpdateData = null; // 数据更新时终端返回的数据
 
-                    switch (parseInt(sonicData['srcCode'], 10)) {
-                        case 1000:
-                            sonicStatus = 1;
-                            break;
-                        case 2000:
-                            sonicStatus = 2;
-                            break;
-                        case 200:
-                            sonicStatus = 3;
-                            sonicUpdateData = JSON.parse(sonicData['result'] || '{}');
-                            break;
-                        case 304:
-                            sonicStatus = 4;
-                            break;
-                        default:
-                            break;
-                    }
+          switch (parseInt(sonicData.srcCode, 10)) {
+            case 1000:
+              sonicStatus = 1;
+              break;
+            case 2000:
+              sonicStatus = 2;
+              break;
+            case 200:
+              sonicStatus = 3;
+              sonicUpdateData = JSON.parse(sonicData.result || '{}');
+              break;
+            case 304:
+              sonicStatus = 4;
+              break;
+            default:
+              break;
+          }
 
-                    window.sonicData = sonicData;
-                    window.sonicStatus = sonicStatus;
-                    window.sonicUpdateData = sonicUpdateData;
+          window.sonicData = sonicData;
+          window.sonicStatus = sonicStatus;
+          window.sonicUpdateData = sonicUpdateData;
 
-                    isLoaded = true;
+          isLoaded = true;
 
-                    cbList.forEach(function (cb) {
-                        cb();
-                    });
-                }
-            };
-            invoke('jsbridge://SwiftHttp/getSwiftHttpDiffData?callback=handleSonicLoaded');
+          cbList.forEach((cb) => {
+            cb();
+          });
         }
-
-        window.onSonicLoaded = function (cb) {
-            if (isLoaded) {
-                cb();
-            } else {
-                cbList.push(cb);
-            }
-        };
+      };
+      invoke('jsbridge://SwiftHttp/getSwiftHttpDiffData?callback=handleSonicLoaded');
     }
-})();
+
+    window.onSonicLoaded = function (cb) {
+      if (isLoaded) {
+        cb();
+      } else {
+        cbList.push(cb);
+      }
+    };
+  }
+}());
diff --git a/src/business/base-inline-in-head/window-gException.js b/src/business/base-inline-in-head/window-gException.js
index ac57f1d..4c33471 100644
--- a/src/business/base-inline-in-head/window-gException.js
+++ b/src/business/base-inline-in-head/window-gException.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 /**
  * 在 window 对象上提供处理某些基础错误。
  */
@@ -7,8 +8,8 @@
  * @type {Object}
  */
 const gExceptionExport = (function () {
-    /* eslint-disable  max-len*/
-    const TEMPLATE = `
+  /* eslint-disable  max-len*/
+  const TEMPLATE = `
             <div style="position:absolute; top:0; left:0; right:0; bottom:0; background:white;">
                 ###
                 <div onclick="window.location.reload()">
@@ -19,35 +20,35 @@ const gExceptionExport = (function () {
     `;
     /* eslint-enable  max-len*/
 
-    const TEMPLATE_NOW_APP_BACK = `
+  const TEMPLATE_NOW_APP_BACK = `
             <div onclick="window.location.href = 'jsbridge://ui/closeCurrentWebView';" style="position:absolute; top:20px; top: constant(safe-area-inset-top); env(safe-area-inset-top); left:15px; background-image:url('//qpic.url.cn/feeds_pic/Q3auHgzwzM5DzQomKrug9tWOdbS9fAlOrytibPnkHZ8mthbD9OYSoVw/'); background-size:100%; width:36px; height:36px;"></div>
     `;
 
-    const ERR_TYPE = {
-        OTHER: 'OTHER',
-        NO_BADJS: 'NO_BADJS',
-        NO_MODJS: 'NO_MODJS',
-        NO_LIB: 'NO_LIB',
-        NO_JS: 'NO_JS',
-        RENDER_ERR: 'RENDER_ERR',
-        LOADFAIL: 'LOADFAIL'
-    };
-
-    function _isMsgMatch(msg, matchStr) {
-        if (typeof msg !== 'string') {
-            return false;
-        }
+  const ERR_TYPE = {
+    OTHER: 'OTHER',
+    NO_BADJS: 'NO_BADJS',
+    NO_MODJS: 'NO_MODJS',
+    NO_LIB: 'NO_LIB',
+    NO_JS: 'NO_JS',
+    RENDER_ERR: 'RENDER_ERR',
+    LOADFAIL: 'LOADFAIL',
+  };
 
-        return msg.indexOf(matchStr) > -1;
+  function _isMsgMatch(msg, matchStr) {
+    if (typeof msg !== 'string') {
+      return false;
     }
 
-    function _isRenderFailed(error) {
-        // 注意，该错误是在 ReactDOM.render 错误时，我们主动加上的标识
-        // 详见 /containers/page-container
-        return error && error.__type == 'render';
-    }
+    return msg.indexOf(matchStr) > -1;
+  }
 
-    /**
+  function _isRenderFailed(error) {
+    // 注意，该错误是在 ReactDOM.render 错误时，我们主动加上的标识
+    // 详见 /containers/page-container
+    return error && error.__type == 'render';
+  }
+
+  /**
      * 获得自定义错误的处理方案结果
      *
      * @param {Object} errorArgs onerror的返回对象集合
@@ -64,75 +65,75 @@ const gExceptionExport = (function () {
      *
      * @return {{code: String, html: String}}
      */
-    function getDealError(errorArgs = {}, opts = {}) {
-        let template = TEMPLATE;
-
-        // 处理返回按键
-        if ((opts.isQQ || opts.isNow) && opts.isIOS) {
-            // 这两个环境没有原生的titilebar，需要加上以防无法返回。
-            template = template.replace('###', TEMPLATE_NOW_APP_BACK);
-        } else {
-            // 其他场景则无需处理
-            template = template.replace('###', '');
-        }
+  function getDealError(errorArgs = {}, opts = {}) {
+    let template = TEMPLATE;
 
-        // 处理自定义的错误类型
-        const { msg, error } = errorArgs;
-        let errCode = ERR_TYPE.OTHER;
-
-        if (!opts.isBadJsLoaded) {
-            // badjs 都还没加载，这种情况一般不会出现，因为我们是 inline 代码的，如果真遇到，则情况就很严重了
-            errCode = ERR_TYPE.NO_BADJS;
-        } else {
-            if (_isMsgMatch(msg, '[ModJS]')) {
-                // 模块加载器失败，说明js文件load失败，在 fis 老项目中可能遇到
-                errCode = ERR_TYPE.NO_MODJS;
-            } else if (_isMsgMatch(msg, 'variable: require') || _isMsgMatch(msg, 'variable: define')) {
-                // lib.js没有加载，在 fis 老项目中可能遇到
-                errCode = ERR_TYPE.NO_LIB;
-            } else if (_isMsgMatch(msg, 'React is not defined') || _isMsgMatch(msg, 'ReactDOM is not defined')) {
-                // react.js文件加载失败： Uncaught ReferenceError: React is not defined
-                // react-dom.js文件加载失败： Uncaught ReferenceError: ReactDOM is not defined
-                errCode = ERR_TYPE.NO_LIB;
-            } else if (_isMsgMatch(msg, 'LOADING_TIMEOUT')) {
-                // loading动画太长，此时可能主js已经加载失败了 Uncaught Error: LOADING_TIMEOUT
-                // TODO 正确校验主js是否加载失败的方式是在它的script引用之后，inline一段代码，引用其中的某个模块，如果undefined等错误，则可认为主js 加载失败了。类似之前 fis 项目的做法
-                errCode = ERR_TYPE.NO_JS;
-            } else if (_isMsgMatch(msg, '__WEBVIEW_LOADFAIL')) {
-                // window.__WEBVIEW_LOADFAIL 被调用了，只可能发生在NOW app 的场景
-                errCode = ERR_TYPE.LOADFAIL;
-            } else if (_isRenderFailed(error)) {
-                // render异常时，比如组件中报了一个错误，则此时很有可能会白屏
-                errCode = ERR_TYPE.RENDER_ERR;
-                // TODO
-            } else if (typeof msg == 'object') {
-                //
-            } else {
-                // 其他异常
-                // TODO
-            }
-        }
+    // 处理返回按键
+    if ((opts.isQQ || opts.isNow) && opts.isIOS) {
+      // 这两个环境没有原生的titilebar，需要加上以防无法返回。
+      template = template.replace('###', TEMPLATE_NOW_APP_BACK);
+    } else {
+      // 其他场景则无需处理
+      template = template.replace('###', '');
+    }
 
-        // 如果是自定义的错误，则需要有新的文案提示
-        const isShowError = (errCode !== ERR_TYPE.OTHER);
+    // 处理自定义的错误类型
+    const { msg, error } = errorArgs;
+    let errCode = ERR_TYPE.OTHER;
 
-        return {
-            code: errCode,
-            html: isShowError ? template.replace('[CONTENT]', `页面加载失败, 请点击重试（${errCode}）`) : '',
-            isShowError: isShowError
-        };
+    if (!opts.isBadJsLoaded) {
+      // badjs 都还没加载，这种情况一般不会出现，因为我们是 inline 代码的，如果真遇到，则情况就很严重了
+      errCode = ERR_TYPE.NO_BADJS;
+    } else {
+      if (_isMsgMatch(msg, '[ModJS]')) {
+        // 模块加载器失败，说明js文件load失败，在 fis 老项目中可能遇到
+        errCode = ERR_TYPE.NO_MODJS;
+      } else if (_isMsgMatch(msg, 'variable: require') || _isMsgMatch(msg, 'variable: define')) {
+        // lib.js没有加载，在 fis 老项目中可能遇到
+        errCode = ERR_TYPE.NO_LIB;
+      } else if (_isMsgMatch(msg, 'React is not defined') || _isMsgMatch(msg, 'ReactDOM is not defined')) {
+        // react.js文件加载失败： Uncaught ReferenceError: React is not defined
+        // react-dom.js文件加载失败： Uncaught ReferenceError: ReactDOM is not defined
+        errCode = ERR_TYPE.NO_LIB;
+      } else if (_isMsgMatch(msg, 'LOADING_TIMEOUT')) {
+        // loading动画太长，此时可能主js已经加载失败了 Uncaught Error: LOADING_TIMEOUT
+        // TODO 正确校验主js是否加载失败的方式是在它的script引用之后，inline一段代码，引用其中的某个模块，如果undefined等错误，则可认为主js 加载失败了。类似之前 fis 项目的做法
+        errCode = ERR_TYPE.NO_JS;
+      } else if (_isMsgMatch(msg, '__WEBVIEW_LOADFAIL')) {
+        // window.__WEBVIEW_LOADFAIL 被调用了，只可能发生在NOW app 的场景
+        errCode = ERR_TYPE.LOADFAIL;
+      } else if (_isRenderFailed(error)) {
+        // render异常时，比如组件中报了一个错误，则此时很有可能会白屏
+        errCode = ERR_TYPE.RENDER_ERR;
+        // TODO
+      } else if (typeof msg === 'object') {
+        //
+      } else {
+        // 其他异常
+        // TODO
+      }
     }
 
+    // 如果是自定义的错误，则需要有新的文案提示
+    const isShowError = (errCode !== ERR_TYPE.OTHER);
+
     return {
-        getDealError: getDealError,
-        TEMPLATE: TEMPLATE,
-        TEMPLATE_NOW_APP_BACK: TEMPLATE_NOW_APP_BACK,
-        ERR_TYPE: ERR_TYPE
+      code: errCode,
+      html: isShowError ? template.replace('[CONTENT]', `页面加载失败, 请点击重试（${errCode}）`) : '',
+      isShowError,
     };
-})();
+  }
+
+  return {
+    getDealError,
+    TEMPLATE,
+    TEMPLATE_NOW_APP_BACK,
+    ERR_TYPE,
+  };
+}());
 
 if (typeof window !== 'undefined') {
-    window.gException = gExceptionExport;
+  window.gException = gExceptionExport;
 }
 
 export default gExceptionExport;
diff --git a/src/business/base-inline-in-head/window-gReporter.js b/src/business/base-inline-in-head/window-gReporter.js
index c82b95e..aa072e7 100644
--- a/src/business/base-inline-in-head/window-gReporter.js
+++ b/src/business/base-inline-in-head/window-gReporter.js
@@ -3,116 +3,116 @@
  * @type {Object}
  */
 const gReporterModule = (function () {
-    const reporterTimeMap = {};
+  const reporterTimeMap = {};
 
-    /**
+  /**
      * 简易的白名单日志上报
      * 注意本方法只适用于主js加载之前使用，正式的请用 /business/base-report/whitelist/index.js 中的方法
      *
      * @param props
      */
-    function log(...props) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[gReporter] log(...props)', ...props);
-        }
-
-        window._report_.report(...props);
+  function log(...props) {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('[gReporter] log(...props)', ...props);
     }
 
-    /**
+    window._report_.report(...props);
+  }
+
+  /**
      * 记录时间，并打印数据上报点的耗时
      * @param {String} key 标记
      * @param {Object} [opts] 额外参数
      * @private
      */
-    function _recordTime(key, opts) {
-        if (!reporterTimeMap[key]) {
-            reporterTimeMap[key] = new Date().getTime();
-        }
-
-        // 白名单上报部分数据
-        log(key, Object.assign({
-            cost: reporterTimeMap[key] - reporterTimeMap.pageStart,
-            isRetry: window.gTool.isLoadAfterRetry,
-            t: reporterTimeMap[key]
-        }, opts));
+  function _recordTime(key, opts) {
+    if (!reporterTimeMap[key]) {
+      reporterTimeMap[key] = new Date().getTime();
     }
 
-    /**
+    // 白名单上报部分数据
+    log(key, Object.assign({
+      cost: reporterTimeMap[key] - reporterTimeMap.pageStart,
+      isRetry: window.gTool.isLoadAfterRetry,
+      t: reporterTimeMap[key],
+    }, opts));
+  }
+
+  /**
      * 简易的 monitor 上报
      * 注意本方法只适用于主js加载之前使用，正式的请用 /business/base-report/monitor 中的方法
      *
      *  @param props
      */
-    function monitor(...props) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[gReporter] monitor(...props)', ...props);
-        }
-
-        window._report_.monitor(...props);
+  function monitor(...props) {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('[gReporter] monitor(...props)', ...props);
     }
 
-    /**
+    window._report_.monitor(...props);
+  }
+
+  /**
      * 页面 html 开始加载。
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageStart(opts) {
-        _recordTime('pageStart', opts);
-
-        // 以下上报只限于生产环境中才上报，测试环境忽略
-        if (window.gTool.isNodeEnvProduction()) {
-            // 页面质量上报
-            window.AVReport.doReport({
-                action: 'init_start'
-            });
-        }
+  function pageStart(opts) {
+    _recordTime('pageStart', opts);
+
+    // 以下上报只限于生产环境中才上报，测试环境忽略
+    if (window.gTool.isNodeEnvProduction()) {
+      // 页面质量上报
+      window.AVReport.doReport({
+        action: 'init_start',
+      });
     }
+  }
 
-    /**
+  /**
      * 页面 css 已加载完成。
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageCssReady(opts) {
-        _recordTime('pageCssReady', opts);
-
-        // 以下上报只限于生产环境中才上报，测试环境忽略
-        if (window.gTool.isNodeEnvProduction()) {
-            // 页面质量上报
-            window.AVReport.doReport({
-                action: 'css_load'
-            });
-        }
+  function pageCssReady(opts) {
+    _recordTime('pageCssReady', opts);
+
+    // 以下上报只限于生产环境中才上报，测试环境忽略
+    if (window.gTool.isNodeEnvProduction()) {
+      // 页面质量上报
+      window.AVReport.doReport({
+        action: 'css_load',
+      });
     }
+  }
 
-    /**
+  /**
      * 页面 js 已加载完成。
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageJsReady(opts) {
-        _recordTime('pageJsReady', opts);
-
-        // 以下上报只限于生产环境中才上报，测试环境忽略
-        if (window.gTool.isNodeEnvProduction()) {
-            // 页面质量上报
-            window.AVReport.doReport({
-                action: 'js_load'
-            });
-        }
+  function pageJsReady(opts) {
+    _recordTime('pageJsReady', opts);
+
+    // 以下上报只限于生产环境中才上报，测试环境忽略
+    if (window.gTool.isNodeEnvProduction()) {
+      // 页面质量上报
+      window.AVReport.doReport({
+        action: 'js_load',
+      });
     }
+  }
 
-    /**
+  /**
      * 页面主逻辑开始加载。
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageMainStart(opts) {
-        _recordTime('pageMainStart', opts);
-    }
+  function pageMainStart(opts) {
+    _recordTime('pageMainStart', opts);
+  }
 
-    /**
+  /**
      * 页面主逻辑已经结束。
      *
      * 注意，这里的“结束”并不是指用户一定能够看到页面的内容，仅能看到同步渲染之后的效果，比如同步操作DOM展示loading状态。
@@ -120,19 +120,19 @@ const gReporterModule = (function () {
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageMainEnd(opts) {
-        _recordTime('pageMainEnd', opts);
-
-        // 以下上报只限于生产环境中才上报，测试环境忽略
-        if (window.gTool.isNodeEnvProduction()) {
-            // 页面质量上报
-            window.AVReport.doReport({
-                action: 'js_init'
-            });
-        }
+  function pageMainEnd(opts) {
+    _recordTime('pageMainEnd', opts);
+
+    // 以下上报只限于生产环境中才上报，测试环境忽略
+    if (window.gTool.isNodeEnvProduction()) {
+      // 页面质量上报
+      window.AVReport.doReport({
+        action: 'js_init',
+      });
     }
+  }
 
-    /**
+  /**
      * 全部页面渲染完成。
      *
      * 在我们的项目中，大部分是 h5 页，这里的时间可以看做首屏渲染的时间。
@@ -140,43 +140,43 @@ const gReporterModule = (function () {
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageRenderEnd(opts) {
-        _recordTime('pageRenderEnd', opts);
-
-        // 以下上报只限于生产环境中才上报，测试环境忽略
-        if (window.gTool.isNodeEnvProduction()) {
-            // 页面质量上报
-            window.AVReport.doReport({
-                action: 'render_succ'
-            }, true);
-        }
+  function pageRenderEnd(opts) {
+    _recordTime('pageRenderEnd', opts);
+
+    // 以下上报只限于生产环境中才上报，测试环境忽略
+    if (window.gTool.isNodeEnvProduction()) {
+      // 页面质量上报
+      window.AVReport.doReport({
+        action: 'render_succ',
+      }, true);
     }
+  }
 
-    /**
+  /**
      * 直出页面渲染完成。
      *
      * @param {Object} [opts] 额外的一些参数
      */
-    function pageIsomorphismRenderEnd(opts) {
-        _recordTime('pageIsomorphismRenderEnd', opts);
-    }
-
-    return {
-        log: log,
-        monitor: monitor,
-        _T: reporterTimeMap,
-        pageStart: pageStart,
-        pageCssReady: pageCssReady,
-        pageJsReady: pageJsReady,
-        pageMainStart: pageMainStart,
-        pageMainEnd: pageMainEnd,
-        pageRenderEnd: pageRenderEnd,
-        pageIsomorphismRenderEnd: pageIsomorphismRenderEnd
-    };
-})();
+  function pageIsomorphismRenderEnd(opts) {
+    _recordTime('pageIsomorphismRenderEnd', opts);
+  }
+
+  return {
+    log,
+    monitor,
+    _T: reporterTimeMap,
+    pageStart,
+    pageCssReady,
+    pageJsReady,
+    pageMainStart,
+    pageMainEnd,
+    pageRenderEnd,
+    pageIsomorphismRenderEnd,
+  };
+}());
 
 if (typeof window !== 'undefined') {
-    window.gReporter = gReporterModule;
+  window.gReporter = gReporterModule;
 }
 
 export default gReporterModule;
diff --git a/src/business/base-inline-in-head/window-gTool.js b/src/business/base-inline-in-head/window-gTool.js
index fc6f660..f47299f 100644
--- a/src/business/base-inline-in-head/window-gTool.js
+++ b/src/business/base-inline-in-head/window-gTool.js
@@ -6,10 +6,10 @@ import '@tencent/report-whitelist';
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    //  校验 window._report_
-    if (!window._report_) {
-        throw new Error('请检查是否引入了 @tencent/report-whitelist 组件！');
-    }
+  //  校验 window._report_
+  if (!window._report_) {
+    throw new Error('请检查是否引入了 @tencent/report-whitelist 组件！');
+  }
 }
 
 /**
@@ -17,70 +17,70 @@ if (process.env.NODE_ENV !== 'production') {
  * @type {Object}
  */
 const gToolExport = (function () {
-    function getUserAgent() {
-        return typeof navigator !== 'undefined' && navigator && navigator.userAgent || '';
-    }
+  function getUserAgent() {
+    return (typeof navigator !== 'undefined' && navigator) ? navigator.userAgent : '';
+  }
 
-    const ua = getUserAgent();
+  const ua = getUserAgent();
 
-    const isQQ = /\bQQ\/([\d.]+)/.test(ua);
-    const isNow = /\bNow\/([\d._]+|LocalCompiled)/.test(ua);
-    const isNowDev = /\bNow\/([\d._]+|LocalCompiled)\s*tnowDailybuild/.test(ua);
-    const isIOS = /\b(iPad|iPhone|iPod)\b.*? OS ([\d_]+)/.test(ua);
-    const isAndroid = /\bAndroid\s*([^;]+)/.test(ua);
+  const isQQ = /\bQQ\/([\d.]+)/.test(ua);
+  const isNow = /\bNow\/([\d._]+|LocalCompiled)/.test(ua);
+  const isNowDev = /\bNow\/([\d._]+|LocalCompiled)\s*tnowDailybuild/.test(ua);
+  const isIOS = /\b(iPad|iPhone|iPod)\b.*? OS ([\d_]+)/.test(ua);
+  const isAndroid = /\bAndroid\s*([^;]+)/.test(ua);
 
-    /**
+  /**
      * 查询 URL 中的参数值，依赖 @tencent/report-whitelist 组件提供的 window._report_.query() 方法。
      *
      * 例如 url 为 /index.html?roomid=123，则可通过 query('roomid') 获得结果值为 123。
      *
      * @param {String} name 要查询的参数名称
      */
-    function query(name) {
-        return window._report_ && window._report_.query(name) || '';
-    }
+  function query(name) {
+    return window._report_ ? window._report_.query(name) : '';
+  }
 
-    /**
+  /**
      * 当前是否为离线包。
      *
      * window.pack是在打离线包时，构建工具生成的，携带了打包时的时间戳，用以区分离线包版本。格式一般为：
      * var pack = {"version":1490586469325}
      *
      */
-    function isPack() {
-        return !!window.pack;
-    }
+  function isPack() {
+    return !!window.pack;
+  }
 
-    /**
+  /**
      * 当前是否在生产环境中
      * @return {Boolean}
      */
-    function isNodeEnvProduction() {
-        return !window.__DEV__;
-    }
+  function isNodeEnvProduction() {
+    return !window.__DEV__;
+  }
 
-    /**
+  /**
      * 当前是否为重试之后加载的页面，相关逻辑详见 /business/base-inline-in-foot/index.js
      * @type {Boolean}
      */
-    const isLoadAfterRetry = !!query('_retry');
+  const isLoadAfterRetry = !!query('_retry');
 
-    return {
-        isPack: isPack,
-        query: query,
-        isNodeEnvProduction: isNodeEnvProduction,
-        getUserAgent: getUserAgent,
-        isLoadAfterRetry: isLoadAfterRetry,
-        isQQ: isQQ,
-        isNow: isNow,
-        isNowDev: isNowDev,
-        isIOS: isIOS,
-        isAndroid: isAndroid
-    };
-})();
+  return {
+    isPack,
+    query,
+    isNodeEnvProduction,
+    getUserAgent,
+    isLoadAfterRetry,
+    isQQ,
+    isNow,
+    isNowDev,
+    isIOS,
+    isAndroid,
+  };
+}());
 
 if (typeof window !== 'undefined') {
-    window.gTool = gToolExport;
+  window.gTool = gToolExport;
 }
 
 export default gToolExport;
diff --git a/src/business/base-logger/index.js b/src/business/base-logger/index.js
deleted file mode 100644
index ceb90ba..0000000
--- a/src/business/base-logger/index.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * 注意： window._report_ 对象是 @tencent/report-whitelist 中引入的。
- */
-
-import _ from '@tencent/util';
-
-import WhiteList from 'business/base-report/whitelist';
-
-function formatNumber(number, length) {
-    if (typeof number !== 'number') {
-        return '';
-    }
-    if (length === 2) {
-        if (number < 10) {
-            return '0' + number;
-        }
-    }
-    if (length === 3) {
-        if (number < 10) {
-            return '00' + number;
-        } else if (number < 100) {
-            return '0' + number;
-        }
-    }
-    return number;
-}
-
-function formatCurDate() {
-    const d = new Date();
-
-    const hour = formatNumber(d.getHours(), 2);
-    const minute = formatNumber(d.getMinutes(), 2);
-    const second = formatNumber(d.getSeconds(), 2);
-    const mSecond = formatNumber(d.getMilliseconds(), 3);
-
-    return `${hour}:${minute}:${second}.${mSecond}`;
-}
-
-/**
- * 白染色上报。
- *
- * 支持新旧两种写法。
- *
- * @param {String} action 行为名称
- * @param {Object} [data] 上报的数据, 数据将被 stringify 后上报
- * @param {Object} [opts]
- * @param {Boolean} [opts.all] 是否对所有人上报
- * @param {Boolean} [opts.vip] 是否是vip上报, vip上报用于每日邮件推送老板的日志
- * @example
- *  report('initFail', true)
- *  report('videoError', { src: src }, {
- *      all: true
- *  })
- */
-
-function log(...props) {
-    const date = formatCurDate();
-
-    try {
-        const uin = _.uin();
-
-        // 这里附加时间上报的目的是为了防止上报被延时，导致真实打印日志的时间不准
-        const [action, ...other] = props;
-        const info = `${date} uid_${uin} [log] ${action}`;
-
-        // 异步上报，避免阻塞其他的操作
-        setTimeout(function () {
-            WhiteList.report(info, ...other);
-        }, 0);
-    } catch (err) {
-        console.log(err);
-    }
-}
-
-export default {
-    log
-};
\ No newline at end of file
diff --git a/src/business/base-pwa/config.js b/src/business/base-pwa/config.js
index 40ddb78..0723371 100644
--- a/src/business/base-pwa/config.js
+++ b/src/business/base-pwa/config.js
@@ -1,9 +1,9 @@
 // 页面白名单列表
 const WHITE_LIST = [
 
-    /h5\/personal-center\/verify-phone\.html/,
+  /h5\/personal-center\/verify-phone\.html/,
 
-    /h5\/personal-center\/verify-identity\.html/
+  /h5\/personal-center\/verify-identity\.html/,
 
 ];
 
@@ -12,26 +12,26 @@ const PROJECT_NAME = 'now-h5-personal-center';
 
 // 初始化 nawa 的参数
 const nawaOpts = {
-    cache: {
-        name: PROJECT_NAME
-    },
-    filename: PROJECT_NAME + '-sw.js',
-    whitelist: WHITE_LIST
+  cache: {
+    name: PROJECT_NAME,
+  },
+  filename: `${PROJECT_NAME}-sw.js`,
+  whitelist: WHITE_LIST,
 };
 
 // 开发场景下打开 debug 调试
 if (process.env.NODE_ENV !== 'production') {
-    nawaOpts.debug = true;
+  nawaOpts.debug = true;
 }
 
 const CDN_PATH = 'now/h5/personal-center';
 
 const PATH_REG = {
-    IMG: new RegExp(CDN_PATH + '/img/.*[png|jpg|gif|jpeg]'),
-    JS_CSS: new RegExp(CDN_PATH + '/.*[js|css]')
+  IMG: new RegExp(`${CDN_PATH}/img/.*[png|jpg|gif|jpeg]`),
+  JS_CSS: new RegExp(`${CDN_PATH}/.*[js|css]`),
 };
 
 export default {
-    nawaOpts,
-    PATH_REG
+  nawaOpts,
+  PATH_REG,
 };
diff --git a/src/business/base-pwa/index.js b/src/business/base-pwa/index.js
index 9dabaed..2b6fed9 100644
--- a/src/business/base-pwa/index.js
+++ b/src/business/base-pwa/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 import nawaRegister from '@tencent/nawa-register';
 
 /**
@@ -8,22 +9,22 @@ import nawaRegister from '@tencent/nawa-register';
  * @param {Object} opts 额外参数
  */
 function init(opts = {}) {
-    // 注意由于这里的 sw.js 文件是不能够跨域的，因此构建工具会将其打包在与 html 同目录下发布到机器中
-    nawaRegister.register('./sw.js')
-        .then(reg => {
-            // 注册成功，可以用来上报
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('[nawaRegister] register success', reg, opts);
-            }
-        })
-        .catch(status => {
-            // 注册失败
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('[nawaRegister] register failed!', status, opts);
-            }
-        });
+  // 注意由于这里的 sw.js 文件是不能够跨域的，因此构建工具会将其打包在与 html 同目录下发布到机器中
+  nawaRegister.register('./sw.js')
+    .then((reg) => {
+      // 注册成功，可以用来上报
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[nawaRegister] register success', reg, opts);
+      }
+    })
+    .catch((status) => {
+      // 注册失败
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[nawaRegister] register failed!', status, opts);
+      }
+    });
 }
 
 export default {
-    init: init
+  init,
 };
diff --git a/src/business/base-pwa/sw.js b/src/business/base-pwa/sw.js
index 064dd52..31e8930 100644
--- a/src/business/base-pwa/sw.js
+++ b/src/business/base-pwa/sw.js
@@ -6,27 +6,27 @@ const app = new Nawa(config.nawaOpts);
 
 // 缓存图片资源
 app.cacheFirst({
-    path: config.PATH_REG.IMG,
-    origin: 'now8.gtimg.com'
+  path: config.PATH_REG.IMG,
+  origin: 'now8.gtimg.com',
 });
 
 // 缓存js文件和css文件
 app.cacheFirst({
-    path: config.PATH_REG.JS_CSS,
-    origin: 'now8.gtimg.com'
+  path: config.PATH_REG.JS_CSS,
+  origin: 'now8.gtimg.com',
 });
 
 // 缓存公共文件
 // https://now8.gtimg.com/now/lib/16.2.0/react.min.js?_bid=3123
 // https://now8.gtimg.com/now/lib/16.2.0/react-dom.min.js?_bid=3123
 app.cacheFirst({
-    path: /now\/lib\/.*\/.*\.js/,
-    origin: 'now8.gtimg.com'
+  path: /now\/lib\/.*\/.*\.js/,
+  origin: 'now8.gtimg.com',
 });
 
 // 缓存 qqapi.js 文件
 // https://open.mobile.qq.com/sdk/qqapi.js?_bid=152
 app.cacheFirst({
-    path: /sdk\/.*\.js/,
-    origin: 'open.mobile.qq.com'
+  path: /sdk\/.*\.js/,
+  origin: 'open.mobile.qq.com',
 });
diff --git a/src/business/base-report/av-report/index.js b/src/business/base-report/av-report/index.js
index 01a1e7a..297db1d 100644
--- a/src/business/base-report/av-report/index.js
+++ b/src/business/base-report/av-report/index.js
@@ -7,10 +7,10 @@ import '@tencent/av-report';
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    //  校验 window.gTool.isNodeEnvProduction
-    if (!window.gTool || typeof window.gTool.isNodeEnvProduction !== 'function') {
-        throw new Error('请在 /business/base-inline-in-head/window-gTool.js 中定义 isNodeEnvProduction 方法！');
-    }
+  //  校验 window.gTool.isNodeEnvProduction
+  if (!window.gTool || typeof window.gTool.isNodeEnvProduction !== 'function') {
+    throw new Error('请在 /business/base-inline-in-head/window-gTool.js 中定义 isNodeEnvProduction 方法！');
+  }
 }
 
 /**
@@ -21,43 +21,42 @@ if (process.env.NODE_ENV !== 'production') {
  * @param {String} [opts.uri] 页面地址
  */
 function init(opts = {}) {
+  // 只有非开发场景下，才需要上报页面质量监控
+  if (window.gTool.isNodeEnvProduction()) {
+    let data = opts;
+
+    // 兼容 opts 为字符串的场景
+    if (typeof opts === 'string') {
+      data = {
+        busi_name: opts,
+      };
+    }
 
-    // 只有非开发场景下，才需要上报页面质量监控
-    if (window.gTool.isNodeEnvProduction()) {
-        let data = opts;
-
-        // 兼容 opts 为字符串的场景
-        if (typeof opts === 'string') {
-            data = {
-                busi_name: opts
-            };
-        }
-
-        // 默认值
-        if (!data.busi_name) {
-            data.busi_name = '未知业务';
-        }
-
-        // 默认值
-        if (!data.uri) {
-            data.uri = window.location.href;
-        }
-
-        // 初始化配置
-        window.AVReport.cfg({
-            doReport: {
-                bid: 'b_sng_im_personal_live',
-                tid: 'now_page_quality_statistics',
-                data: data
-            }
-        });
-    } else {
-        //修改质量上报_clear方法，如果是开发环境，就不发送上报
-        window.AVReport._clear = function () {
-        };
+    // 默认值
+    if (!data.busi_name) {
+      data.busi_name = '未知业务';
     }
+
+    // 默认值
+    if (!data.uri) {
+      data.uri = window.location.href;
+    }
+
+    // 初始化配置
+    window.AVReport.cfg({
+      doReport: {
+        bid: 'b_sng_im_personal_live',
+        tid: 'now_page_quality_statistics',
+        data,
+      },
+    });
+  } else {
+    // 修改质量上报_clear方法，如果是开发环境，就不发送上报
+    window.AVReport._clear = function () {
+    };
+  }
 }
 
 export default {
-    init: init
+  init,
 };
diff --git a/src/business/base-report/badjs/base.js b/src/business/base-report/badjs/base.js
index 49f0d23..cb1e5be 100644
--- a/src/business/base-report/badjs/base.js
+++ b/src/business/base-report/badjs/base.js
@@ -1,124 +1,125 @@
+/* istanbul ignore file */
 import badjs from '@tencent/badjs-report';
 
 const codeVersion = (function () {
-    if (typeof window === 'undefined' || !window.Error) {
-        return 'node server';
-    }
-
-    let err = window.Error && new Error();
-    try {
-        // 在ios7上没有stack
-        err.stack.toString();
-    } catch (ex) {
-        err = ex;
-    }
-
-    return (err && err.stack && err.stack.toString() || '').match(/[_-]([\dabcdef]{6,8})\.js\b/) && RegExp.$1 || '';
-})();
+  if (typeof window === 'undefined' || !window.Error) {
+    return 'node server';
+  }
+
+  let err = window.Error && new Error();
+  try {
+    // 在ios7上没有stack
+    err.stack.toString();
+  } catch (ex) {
+    err = ex;
+  }
+  const errStr = err && err.stack ? err.stack.toString() : '';
+  return (errStr).match(/[_-]([\dabcdef]{6,8})\.js\b/) ? RegExp.$1 : '';
+}());
 
 function shouldReportMonitor(err) {
-    return err && err.level === 4;
+  return err && err.level === 4;
 }
 
 export default class BaseBadJs {
-    constructor(badJsId, monitorId) {
-        if (process.env.NODE_ENV !== 'production') {
-            if (isNaN(badJsId)) {
-                throw new Error('初始化 badjs 时，使用了非法的 badjsId');
-            }
-
-            if (isNaN(monitorId)) {
-                throw new Error('初始化 badjs 时，使用了非法的 monitorId');
-            }
-        }
-
-        this.badJsId = badJsId;
-        this.monitorId = monitorId;
-
-        this._maximumCallCount = 0;
-        this._sendT = 0;
-    }
-
-    init(opts) {
-        const updateOpts = Object.assign({
-            id: this.badJsId
-        }, opts);
-
-        updateOpts.beforeReport = (err) => {
-            const _check = this._beforeReport(err);
-            if (!_check) {
-                return false;
-            }
-
-            if (typeof opts.beforeReport === 'function') {
-                opts.beforeReport.call(badjs, err);
-            }
-        };
-
-        updateOpts.onReport = (bid, err) => {
-            if (shouldReportMonitor(err)) {
-                window.gReporter.monitor(this.monitorId);
-            }
-
-            if (typeof opts.onReport === 'function') {
-                opts.onReport.call(badjs, bid, err);
-            }
-        };
-
-        this.update(updateOpts);
+  constructor(badJsId, monitorId) {
+    if (process.env.NODE_ENV !== 'production') {
+      if (isNaN(badJsId)) {
+        throw new Error('初始化 badjs 时，使用了非法的 badjsId');
+      }
+
+      if (isNaN(monitorId)) {
+        throw new Error('初始化 badjs 时，使用了非法的 monitorId');
+      }
     }
 
-    update(opts) {
-        badjs.init(opts);
+    this.badJsId = badJsId;
+    this.monitorId = monitorId;
+
+    this._maximumCallCount = 0;
+    this._sendT = 0;
+  }
+
+  init(opts) {
+    const updateOpts = Object.assign({
+      id: this.badJsId,
+    }, opts);
+
+    updateOpts.beforeReport = (err) => {
+      const _check = this._beforeReport(err);
+      if (!_check) {
+        return false;
+      }
+
+      if (typeof opts.beforeReport === 'function') {
+        opts.beforeReport.call(badjs, err);
+      }
+    };
+
+    updateOpts.onReport = (bid, err) => {
+      if (shouldReportMonitor(err)) {
+        window.gReporter.monitor(this.monitorId);
+      }
+
+      if (typeof opts.onReport === 'function') {
+        opts.onReport.call(badjs, bid, err);
+      }
+    };
+
+    this.update(updateOpts);
+  }
+
+  update(opts) {
+    badjs.init(opts);
+  }
+
+  report(...props) {
+    badjs.report(...props);
+  }
+
+  setMonitor(monitorId) {
+    this.monitorId = monitorId;
+  }
+
+  _beforeReport(err) {
+    if (!err) {
+      return true;
     }
 
-    report(...props) {
-        badjs.report(...props);
-    }
+    err.msg = err.msg || '';
 
-    setMonitor(monitorId) {
-        this.monitorId = monitorId;
+    // 手 Q 中调用mqq.app.downloadApp下载过程中，退出页面再进入页面时就会触发到
+    // ignore __MQQ_CALLBACK_ error
+    if (err.msg.match(/__MQQ_CALLBACK_\d+/i) && err.msg.length < 100) {
+      return false;
     }
 
-    _beforeReport(err) {
-        if (!err) {
-            return true;
-        }
-
-        err.msg = err.msg || '';
-
-        // 手 Q 中调用mqq.app.downloadApp下载过程中，退出页面再进入页面时就会触发到
-        // ignore __MQQ_CALLBACK_ error
-        if (err.msg.match(/__MQQ_CALLBACK_\d+/i) && err.msg.length < 100) {
-            return false;
-        }
-
-        // add codeVersion
-        err.msg += '@' + codeVersion;
+    // add codeVersion
+    err.msg += `@${codeVersion}`;
 
-        // 上报离线包
-        if (window.pack) {
-            err.msg += `@offline: ${JSON.stringify(window.pack)}`;
-        }
-
-        // 合并 RangeError: Maximum call stack size exceeded 为一条输出
-        if (err.msg.match(/Maximum call stack size exceeded/i)) {
-            this._maximumCallCount++;
+    // 上报离线包
+    if (window.pack) {
+      err.msg += `@offline: ${JSON.stringify(window.pack)}`;
+    }
 
-            if (this._sendT) {
-                clearTimeout(this._sendT);
-            }
+    // 合并 RangeError: Maximum call stack size exceeded 为一条输出
+    if (err.msg.match(/Maximum call stack size exceeded/i)) {
+      this._maximumCallCount = this._maximumCallCount + 1;
 
-            // 1.5s 内的这种错误则只上报一次
-            this._sendT = setTimeout(() => {
-                const total = this._maximumCallCount;
-                this._maximumCallCount = 0;
-                this.report(`MaximumCall ${total}`);
-            }, 1000 * 1.5);
+      if (this._sendT) {
+        clearTimeout(this._sendT);
+      }
 
-            return false;
-        }
+      // 1.5s 内的这种错误则只上报一次
+      this._sendT = setTimeout(() => {
+        const total = this._maximumCallCount;
+        this._maximumCallCount = 0;
+        this.report(`MaximumCall ${total}`);
+      }, 1000 * 1.5);
 
-        return true;
+      return false;
     }
+
+    return true;
+  }
 }
diff --git a/src/business/base-report/badjs/index.js b/src/business/base-report/badjs/index.js
index 746b751..e2972ba 100644
--- a/src/business/base-report/badjs/index.js
+++ b/src/business/base-report/badjs/index.js
@@ -8,10 +8,10 @@ import BaseBadJs from './base';
  * @param {Object} opts 传递给 @tencent/badjs-report 组件的对象参数
  */
 function init(badjsId, monitorId, opts = {}) {
-    // 初始化
-    new BaseBadJs(badjsId, monitorId).init(opts);
+  // 初始化
+  new BaseBadJs(badjsId, monitorId).init(opts);
 }
 
 export default {
-    init: init
+  init,
 };
diff --git a/src/business/base-report/huatuo/index.js b/src/business/base-report/huatuo/index.js
index 1ca5d96..8578538 100644
--- a/src/business/base-report/huatuo/index.js
+++ b/src/business/base-report/huatuo/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 import huatuo from '@tencent/huatuo';
 
 /**
@@ -37,10 +38,9 @@ let isInited = false;
  * @param {Object} [options.isd] 自定义的上报点配置
  */
 function _setHuaTuo(options = {}) {
-
-    huatuo.cfg({
-        isdspeed: options
-    });
+  huatuo.cfg({
+    isdspeed: options,
+  });
 }
 
 /**
@@ -50,27 +50,27 @@ function _setHuaTuo(options = {}) {
  * @param {Object} [isdOpts] 自定义的上报点配置
  */
 function init(flag3, isdOpts) {
-    /*<debug>*/
-    // 检查一下只初始化一次
-    if (isInited) {
-        console.error('[huatuo] is inited!');
-        return;
-    }
-    /*</debug>*/
-
-    isInited = true;
-
-    const options = {
-        flag1: FLAG1,
-        flag2: FLAG2,
-        flag3: flag3
-    };
-
-    if (typeof isdOpts === 'object') {
-        options.isd = isdOpts;
-    }
-
-    _setHuaTuo(options);
+  /* <debug>*/
+  // 检查一下只初始化一次
+  if (isInited) {
+    console.error('[huatuo] is inited!');
+    return;
+  }
+  /* </debug>*/
+
+  isInited = true;
+
+  const options = {
+    flag1: FLAG1,
+    flag2: FLAG2,
+    flag3,
+  };
+
+  if (typeof isdOpts === 'object') {
+    options.isd = isdOpts;
+  }
+
+  _setHuaTuo(options);
 }
 
 /**
@@ -82,7 +82,7 @@ function init(flag3, isdOpts) {
  * @param {Object} [options.isd] 自定义的上报点配置
  */
 function update(options = {}) {
-    _setHuaTuo(options);
+  _setHuaTuo(options);
 }
 
 /**
@@ -92,67 +92,67 @@ function update(options = {}) {
  *  如果reportParams.key对应的value是时间戳的话，会在@tencent/huatuo组件中被自动和基准时间戳相减后再上报到huatuo平台
  */
 function report(reportParams = {}) {
-    /*<debug>*/
-    // 检查一下如果没有初始化 tdbank，则在此进行提示
-    if (!isInited) {
-        console.error('[huatuo] You should init before use!');
-        return;
-    }
-    /*</debug>*/
-
-    /*<debug>*/
-    console.log('[huatuo] reportParams', reportParams);
-    /*</debug>*/
-    huatuo.report(reportParams);
+  /* <debug>*/
+  // 检查一下如果没有初始化 tdbank，则在此进行提示
+  if (!isInited) {
+    console.error('[huatuo] You should init before use!');
+    return;
+  }
+  /* </debug>*/
+
+  /* <debug>*/
+  console.log('[huatuo] reportParams', reportParams);
+  /* </debug>*/
+  huatuo.report(reportParams);
 }
 
 /**
  * 上报页面加载数据到 huatuo 中，从 window.gReporter._T 获取时间戳信息
  */
 function reportPageSpeed() {
-    // 此处使用 setTimeout 之后再去上报，是希望上报不阻塞其他的加载
-    // 并且如果页面没有异步操作，则pageRenderEnd是在pageMainEnd之前
-    // 而该方法是在pageRenderEnd之后即调用，使用 setTimeout 可保证 window.gReporter._T 中可获取 pageMainEnd 时间
-    setTimeout(() => {
-        // window.gReporter 详见 /business/base-inline-in-head.js
-        const _T = window.gReporter._T;
+  // 此处使用 setTimeout 之后再去上报，是希望上报不阻塞其他的加载
+  // 并且如果页面没有异步操作，则pageRenderEnd是在pageMainEnd之前
+  // 而该方法是在pageRenderEnd之后即调用，使用 setTimeout 可保证 window.gReporter._T 中可获取 pageMainEnd 时间
+  setTimeout(() => {
+    // window.gReporter 详见 /business/base-inline-in-head.js
+    const { _T } = window.gReporter;
 
-        /*<debug>*/
-        console.log('[huatuo] reportPageSpeed _T', _T);
+    /* <debug>*/
+    console.log('[huatuo] reportPageSpeed _T', _T);
 
-        // 检查一下 window.gReporter._T 是否有相对于的上报时间戳
-        const tKeys = Object.keys(_T);
+    // 检查一下 window.gReporter._T 是否有相对于的上报时间戳
+    const tKeys = Object.keys(_T);
 
-        if (tKeys.length < 6
+    if (tKeys.length < 6
             || tKeys.indexOf('pageStart') < 0
             || tKeys.indexOf('pageCssReady') < 0
             || tKeys.indexOf('pageJsReady') < 0
             || tKeys.indexOf('pageMainStart') < 0
             || tKeys.indexOf('pageMainEnd') < 0
             || tKeys.indexOf('pageRenderEnd') < 0) {
-            console.error('[huatuo] reportPageSpeed _T invalid', _T);
-            return;
-        }
-        /*</debug>*/
-
-        const reportParams = {
-            page_start: _T.pageStart,
-            page_css_ready: _T.pageCssReady,
-            page_js_ready: _T.pageJsReady,
-            page_main_start: _T.pageMainStart,
-            page_main_end: _T.pageMainEnd,
-            page_render_end: _T.pageRenderEnd,
-            page_isomorphism_render_fp: _T.pageIsomorphismRenderEnd
-        };
-
-        report(reportParams);
-    }, 0);
+      console.error('[huatuo] reportPageSpeed _T invalid', _T);
+      return;
+    }
+    /* </debug>*/
+
+    const reportParams = {
+      page_start: _T.pageStart,
+      page_css_ready: _T.pageCssReady,
+      page_js_ready: _T.pageJsReady,
+      page_main_start: _T.pageMainStart,
+      page_main_end: _T.pageMainEnd,
+      page_render_end: _T.pageRenderEnd,
+      page_isomorphism_render_fp: _T.pageIsomorphismRenderEnd,
+    };
+
+    report(reportParams);
+  }, 0);
 }
 
 
 export default {
-    init: init,
-    update: update,
-    report: report,
-    reportPageSpeed: reportPageSpeed
+  init,
+  update,
+  report,
+  reportPageSpeed,
 };
diff --git a/src/business/base-report/monitor/index.js b/src/business/base-report/monitor/index.js
index 015c826..62dbe68 100644
--- a/src/business/base-report/monitor/index.js
+++ b/src/business/base-report/monitor/index.js
@@ -6,8 +6,8 @@ import Monitor from '@tencent/tx-monitor';
  * @param {Number | Array} id  monitor 平台的ID，支持数组和单个ID
  * @param {Number} [delay]  延时多久上报，单位为ms，如果不设置，则组件的默认值为 200ms
  */
-export const monitor = Monitor.monitor;
+export const { monitor } = Monitor;
 
 export default {
-    report: monitor
-};
\ No newline at end of file
+  report: monitor,
+};
diff --git a/src/business/base-report/tdbank/index.js b/src/business/base-report/tdbank/index.js
index 894de15..d3475ab 100644
--- a/src/business/base-report/tdbank/index.js
+++ b/src/business/base-report/tdbank/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 import imwebReport from '@tencent/imweb-report';
 
 import { appVersion, NET_TYPE_FROM_UA, offlineVersion, osVersion, platform, sourceFrom, uin, uinType } from '../utils';
@@ -10,18 +11,18 @@ const REPORT_TID = 'personal_live_base';
  * @type {Object}
  */
 const REPORT_BASE_OPTIONS = {
-    uin: uin,
-    userid: uin, // TODO 这里本来应该要填的是浏览器的 uid
-    uin_type: uinType,
-    opername: '',
-    module: '',
-    source: sourceFrom || '0',
-    networktype: NET_TYPE_FROM_UA,
-    platform: platform,
-    osVersion: osVersion,
-    clientVersion: appVersion,
-    timestr: parseInt(new Date().getTime() / 1000),
-    res3: offlineVersion // 离线包版本
+  uin,
+  userid: uin, // TODO 这里本来应该要填的是浏览器的 uid
+  uin_type: uinType,
+  opername: '',
+  module: '',
+  source: sourceFrom || '0',
+  networktype: NET_TYPE_FROM_UA,
+  platform,
+  osVersion,
+  clientVersion: appVersion,
+  timestr: parseInt(new Date().getTime() / 1000),
+  res3: offlineVersion, // 离线包版本
 };
 
 /**
@@ -36,13 +37,13 @@ let isInited = false;
  * @param {Object} options 上报的选项，字段名见产品数据表
  */
 function _setTdbank(options = {}) {
-    imwebReport.cfg({
-        tdBank: {
-            bid: REPORT_BID,
-            tid: REPORT_TID,
-            data: options
-        }
-    });
+  imwebReport.cfg({
+    tdBank: {
+      bid: REPORT_BID,
+      tid: REPORT_TID,
+      data: options,
+    },
+  });
 }
 
 /**
@@ -52,9 +53,9 @@ function _setTdbank(options = {}) {
  * @param {String} options.module 模块名
  */
 function init(options = {}) {
-    isInited = true;
+  isInited = true;
 
-    _setTdbank(Object.assign({}, REPORT_BASE_OPTIONS, options));
+  _setTdbank(Object.assign({}, REPORT_BASE_OPTIONS, options));
 }
 
 /**
@@ -62,7 +63,7 @@ function init(options = {}) {
  * @param {Object} options 上报的选项，字段名见产品数据表
  */
 function update(options = {}) {
-    _setTdbank(options);
+  _setTdbank(options);
 }
 
 /**
@@ -70,13 +71,13 @@ function update(options = {}) {
  * @param {Number} type 网络类型
  */
 function updateNetworkType(type) {
-    if (typeof type === 'undefined') {
-        return;
-    }
+  if (typeof type === 'undefined') {
+    return;
+  }
 
-    update({
-        networktype: type
-    });
+  update({
+    networktype: type,
+  });
 }
 
 /**
@@ -85,25 +86,25 @@ function updateNetworkType(type) {
  * @param {Boolean} [immediate] 是否立即上报
  */
 function report(...props) {
-    /*<debug>*/
-    console.log('tdbank report', ...props);
-    /*</debug>*/
+  /* <debug>*/
+  console.log('tdbank report', ...props);
+  /* </debug>*/
 
-    // imwebReport.tdBank.apply(imwebReport, arguments);
+  // imwebReport.tdBank.apply(imwebReport, arguments);
 
-    /*<debug>*/
-    // 检查一下如果没有初始化 tdbank，则在此进行提示
-    if (!isInited) {
-        console.error('You should init before use tdbank!');
-    }
-    /*</debug>*/
+  /* <debug>*/
+  // 检查一下如果没有初始化 tdbank，则在此进行提示
+  if (!isInited) {
+    console.error('You should init before use tdbank!');
+  }
+  /* </debug>*/
 
-    imwebReport.tdBank(...props);
+  imwebReport.tdBank(...props);
 }
 
 export default {
-    init: init,
-    update: update,
-    updateNetworkType: updateNetworkType,
-    report: report
+  init,
+  update,
+  updateNetworkType,
+  report,
 };
diff --git a/src/business/base-report/uni-report/index.js b/src/business/base-report/uni-report/index.js
index 816f0be..125dc51 100644
--- a/src/business/base-report/uni-report/index.js
+++ b/src/business/base-report/uni-report/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 import TdBank from '/business/base-report/tdbank';
 import WhiteList from '/business/base-report/whitelist';
 
@@ -11,32 +12,32 @@ import WhiteList from '/business/base-report/whitelist';
  * @param {String} [tag] 自定义标记名
  */
 export function sendReport(_result, tag = '') {
-    let result = _result;
-    if (!Array.isArray(result)) {
-        result = [result];
-    }
+  let result = _result;
+  if (!Array.isArray(result)) {
+    result = [result];
+  }
 
-    result.forEach((item) => {
-        if (!item || typeof item !== 'object') {
-            return;
-        }
+  result.forEach((item) => {
+    if (!item || typeof item !== 'object') {
+      return;
+    }
 
-        let msg;
+    let msg;
 
-        if (typeof item.msg === 'object') {
-            msg = item.msg;
-        } else if (item.msg) {
-            msg = { msg: item.msg };
-        }
+    if (typeof item.msg === 'object') {
+      msg = item.msg;
+    } else if (item.msg) {
+      msg = { msg: item.msg };
+    }
 
-        // tdBank 上报
-        if (item.data && typeof item.data === 'object') {
-            TdBank.report(item.data, item.immediate);
+    // tdBank 上报
+    if (item.data && typeof item.data === 'object') {
+      TdBank.report(item.data, item.immediate);
 
-            msg = Object.assign({}, item.data, msg);
-        }
+      msg = Object.assign({}, item.data, msg);
+    }
 
-        // 染色日志上报
-        WhiteList.report(`${tag ? '[' + tag + '] ' : ''} ${item.from} `, msg);
-    });
+    // 染色日志上报
+    WhiteList.report(`${tag ? `[${tag}] ` : ''} ${item.from} `, msg);
+  });
 }
diff --git a/src/business/base-report/utils.js b/src/business/base-report/utils.js
index 5cfdaca..c650ff8 100644
--- a/src/business/base-report/utils.js
+++ b/src/business/base-report/utils.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 /**
  * 本文适用于report的场景，如果方法是公用的，则不要放在此处
  */
@@ -32,7 +33,7 @@ export const uiFrom = _.query('ui_from') || '';
  * @return {number}
  */
 function getWeixinUin() {
-    return +(_.getCookie('ilive_uin') || '').replace(/\D+/g, '');
+  return +(_.getCookie('ilive_uin') || '').replace(/\D+/g, '');
 }
 
 /**
@@ -53,20 +54,20 @@ export const uin = _.uin() || getWeixinUin() || '';
  * @return {number} 当前用户登录帐号的类型
  */
 export const uinType = (function () {
-    let res;
+  let res;
 
-    if (device.isQQ) {
-        res = 0;
-    } else if (device.isWeixin) {
-        res = 1;
-    } else if (device.isWeibo) {
-        res = 2;
-    } else {
-        res = 3;
-    }
+  if (device.isQQ) {
+    res = 0;
+  } else if (device.isWeixin) {
+    res = 1;
+  } else if (device.isWeibo) {
+    res = 2;
+  } else {
+    res = 3;
+  }
 
-    return res;
-})();
+  return res;
+}());
 
 /**
  * 获得当前的操作系统平台
@@ -77,7 +78,7 @@ export const uinType = (function () {
  *
  * @return {string} 当前的操作系统平台
  */
-export const platform = device.platform;
+export const { platform } = device;
 
 /**
  * 获得当前的客户端类型，一般其与 platform 是一样的。
@@ -105,4 +106,4 @@ export const osVersion = device.IOSVersion || device.androidVersion || '';
  *
  * @return {string} 当前的离线包的版本号
  */
-export const offlineVersion = window.pack && window.pack.version || ''; // 离线包版本
+export const offlineVersion = window.pack ? window.pack.version : ''; // 离线包版本
diff --git a/src/business/base-report/whitelist-db/index.js b/src/business/base-report/whitelist-db/index.js
index bf3cfd7..62f9ea7 100644
--- a/src/business/base-report/whitelist-db/index.js
+++ b/src/business/base-report/whitelist-db/index.js
@@ -8,9 +8,9 @@ import '@tencent/report-whitelist-db';
  * 初始化
  */
 function init() {
-    // 该组件在引入的时候就自动去初始化了，但是为了使用上的统一，次数暂时提供一个空方法
+  // 该组件在引入的时候就自动去初始化了，但是为了使用上的统一，次数暂时提供一个空方法
 }
 
 export default {
-    init: init
+  init,
 };
diff --git a/src/business/base-report/whitelist/index.js b/src/business/base-report/whitelist/index.js
index 3824d6a..cfb481e 100644
--- a/src/business/base-report/whitelist/index.js
+++ b/src/business/base-report/whitelist/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 /**
  * 注意： window._report_ 对象是 @tencent/report-whitelist 中引入的。
  */
@@ -15,7 +16,7 @@
  * @param {Object} [opts.whitelistUrl]  请求判断的CGI，默认是now.qq.com域名下的CGI
  */
 function update(opts) {
-    window._report_.init(opts);
+  window._report_.init(opts);
 }
 
 /**
@@ -23,15 +24,15 @@ function update(opts) {
  * @param {Number | Object} params  badjsId，或者 { badjsId: badjsId } 对象
  */
 function init(params) {
-    const opts = (params && typeof params === 'object') ? params : { badjsId: params };
+  const opts = (params && typeof params === 'object') ? params : { badjsId: params };
 
-    if (process.env.NODE_ENV !== 'production') {
-        if (!params.badjsId || isNaN(params.badjsId)) {
-            throw new Error('初始化白名单配置失败，因为传入了非法的 badjsId 配置');
-        }
+  if (process.env.NODE_ENV !== 'production') {
+    if (!params.badjsId || isNaN(params.badjsId)) {
+      throw new Error('初始化白名单配置失败，因为传入了非法的 badjsId 配置');
     }
+  }
 
-    update(opts);
+  update(opts);
 }
 
 /**
@@ -52,23 +53,21 @@ function init(params) {
  */
 
 function report(...props) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[whitelist.report]', ...props);
-    }
-
-    try {
-
-        if (typeof window !== 'undefined' && window._report_) {
-            window._report_.report(...props);
-        }
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[whitelist.report]', ...props);
+  }
 
-    } catch (err) {
-        console.log(err);
+  try {
+    if (typeof window !== 'undefined' && window._report_) {
+      window._report_.report(...props);
     }
+  } catch (err) {
+    console.log(err);
+  }
 }
 
 export default {
-    init: init,
-    update: update,
-    report: report
+  init,
+  update,
+  report,
 };
diff --git a/src/business/base-tips/index.js b/src/business/base-tips/index.js
deleted file mode 100644
index fbe9155..0000000
--- a/src/business/base-tips/index.js
+++ /dev/null
@@ -1,46 +0,0 @@
-import { isInNowApp, NowJS } from 'business/base-app-now';
-
-export const NOW_TIPS_TYPE = {
-    OK: 1,
-    PROMPT: 2,
-    WARNING: 3
-};
-
-function showByNowJsbridge(opts) {
-    NowJS.ui.showMessageTips(opts, () => {
-        // console.log(ret);
-    });
-}
-
-function showByAlert(msg) {
-    alert(msg);
-}
-
-/**
- * 展现一个Tips
-
- * @param {String} msg tips消息
- * @param {Object} [opts] 额外的参数
- */
-export function showTips(msg, opts) {
-    if (isInNowApp) {
-        showByNowJsbridge({
-            iconMode: opts.iconMode || NOW_TIPS_TYPE.GO_WITHDRAW,
-            text: msg
-        });
-    } else {
-        showByAlert(msg);
-    }
-}
-
-export function showSuccessTips(msg, opts) {
-    showTips(msg, Object.assign({
-        iconMode: NOW_TIPS_TYPE.GO_WITHDRAW
-    }, opts));
-}
-
-export function showErrorTips(msg, opts) {
-    showTips(msg, Object.assign({
-        iconMode: NOW_TIPS_TYPE.PROMPT
-    }, opts));
-}
diff --git a/src/business/project-common/index.js b/src/business/project-common/index.js
index dd9f0f3..cdfd44b 100644
--- a/src/business/project-common/index.js
+++ b/src/business/project-common/index.js
@@ -1,70 +1,70 @@
 import _ from '@tencent/util';
 
 export function getNowId() {
-    return _.query('now_id');
+  return _.query('now_id');
 }
 
 export function getQueryNotVerifyId() {
-    return _.query('not_verify_id');
+  return _.query('not_verify_id');
 }
 
 function isVerify(encodeUrl) {
-    const decodeUrl = decodeURIComponent(encodeUrl);
-    if (decodeUrl.startsWith('http://') || decodeUrl.startsWith('https://')) {
-        return true;
-    }
-    return false;
+  const decodeUrl = decodeURIComponent(encodeUrl);
+  if (decodeUrl.startsWith('http://') || decodeUrl.startsWith('https://')) {
+    return true;
+  }
+  return false;
 }
 
 /**
  * 跳转到提现页
  */
 export function jumpToWithdrawPage() {
-    // TODO 此处可优化为跳转回原页面，由参数携带过来
-    let CASH_URL = 'https://now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632';
+  // TODO 此处可优化为跳转回原页面，由参数携带过来
+  let CASH_URL = 'https://now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632';
 
-    const redirect_url = _.query('redirect');
+  const redirectUrl = _.query('redirect');
 
-    if (redirect_url && isVerify(redirect_url)) {
-        CASH_URL = decodeURIComponent(redirect_url);
-
-        setTimeout(() => {
-            window.location.href = CASH_URL;
-        }, 2000);
-        return;
-    }
-
-    const nowId = getNowId();
+  if (redirectUrl && isVerify(redirectUrl)) {
+    CASH_URL = decodeURIComponent(redirectUrl);
 
     setTimeout(() => {
-        window.location.href = `${CASH_URL}&now_id=${nowId}`;
+      window.location.href = CASH_URL;
     }, 2000);
+    return;
+  }
+
+  const nowId = getNowId();
+
+  setTimeout(() => {
+    window.location.href = `${CASH_URL}&now_id=${nowId}`;
+  }, 2000);
 }
 
 /**
  * 跳转到身份证认证页面
  */
 export function jumpToIdentityPage() {
-    let IDENTITY_URL = 'https://now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1';
+  let IDENTITY_URL = 'https://now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1';
 
-    const redirect_url = _.query('redirect');
+  const redirectUrl = _.query('redirect');
 
-    if (redirect_url && isVerify(redirect_url)) {
-        IDENTITY_URL += `&redirect=${redirect_url}`;
-    }
+  if (redirectUrl && isVerify(redirectUrl)) {
+    IDENTITY_URL += `&redirect=${redirectUrl}`;
+  }
 
-    if (_.query('from_lottery')) {
-        IDENTITY_URL += `&from_lottery=${_.query('from_lottery')}`;
-
-        setTimeout(() => {
-            window.location.href = IDENTITY_URL;
-        }, 2000);
-        return;
-    }
-
-    const nowId = getNowId();
+  if (_.query('from_lottery')) {
+    IDENTITY_URL += `&from_lottery=${_.query('from_lottery')}`;
 
     setTimeout(() => {
-        window.location.href = `${IDENTITY_URL}&now_id=${nowId}`;
+      window.location.href = IDENTITY_URL;
     }, 2000);
+    return;
+  }
+
+  const nowId = getNowId();
+
+  setTimeout(() => {
+    window.location.href = `${IDENTITY_URL}&now_id=${nowId}`;
+  }, 2000);
 }
diff --git a/src/business/project-dialog/index.js b/src/business/project-dialog/index.js
index 495ea5e..085b380 100644
--- a/src/business/project-dialog/index.js
+++ b/src/business/project-dialog/index.js
@@ -6,44 +6,44 @@ import Dialog from '@tencent/now-base-dialog';
  * @param {Object} opts 配置
  */
 export default function showDialog(opts) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[showDialog]', opts);
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[showDialog]', opts);
+  }
+
+  const params = Object.assign({
+    text: '提示文案',
+    enterText: '确定',
+    skin: 'mid',
+  }, opts);
+
+  // eslint-disable-next-line prefer-const
+  let dlg;
+
+  const removeDlg = () => {
+    if (typeof dlg !== 'undefined') {
+      dlg.remove();
     }
+  };
 
-    const params = Object.assign({
-        text: '提示文案',
-        enterText: '确定',
-        skin: 'mid'
-    }, opts);
-
-    // eslint-disable-next-line prefer-const
-    let dlg;
-
-    const removeDlg = () => {
-        if (typeof dlg !== 'undefined') {
-            dlg.remove();
-        }
-    };
-
-    // 处理 onEnter
-    const _onEnter = params.onEnter;
-    params.onEnter = () => {
-        removeDlg();
-
-        if (typeof _onEnter === 'function') {
-            _onEnter();
-        }
-    };
-
-    // 处理 onCancel
-    const _onCancel = params.onCancel;
-    params.onCancel = !opts.hideCancel ? (() => {
-        if (typeof _onCancel === 'function') {
-            _onCancel();
-        }
-
-        removeDlg();
-    }) : null;
-
-    dlg = Dialog.create(params);
+  // 处理 onEnter
+  const _onEnter = params.onEnter;
+  params.onEnter = () => {
+    removeDlg();
+
+    if (typeof _onEnter === 'function') {
+      _onEnter();
+    }
+  };
+
+  // 处理 onCancel
+  const _onCancel = params.onCancel;
+  params.onCancel = !opts.hideCancel ? (() => {
+    if (typeof _onCancel === 'function') {
+      _onCancel();
+    }
+
+    removeDlg();
+  }) : null;
+
+  dlg = Dialog.create(params);
 }
diff --git a/src/business/project-login/index.js b/src/business/project-login/index.js
index 253d22f..37916a2 100644
--- a/src/business/project-login/index.js
+++ b/src/business/project-login/index.js
@@ -4,12 +4,12 @@ import loginInMobile from '@tencent/now-login-mobile';
  * 跳转至QQ钱包
  */
 export default function login() {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('start login');
-    }
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('start login');
+  }
 
-    return loginInMobile({
-        connectqq: true
-    });
+  return loginInMobile({
+    connectqq: true,
+  });
 }
 
diff --git a/src/business/project-message-tips/index.js b/src/business/project-message-tips/index.js
index 4168db8..377ea11 100644
--- a/src/business/project-message-tips/index.js
+++ b/src/business/project-message-tips/index.js
@@ -8,13 +8,13 @@ import MessageTips from '../../components/now-display-message-tips';
  * @param {Number} [delay] 延时多久消失，单位为毫秒，默认值为 3000
  */
 export default function showMessageTips(msg, isSuccess, delay = 3000) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[showMessageTips]', msg, isSuccess, delay);
-    }
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[showMessageTips]', msg, isSuccess, delay);
+  }
 
-    MessageTips.create({
-        isSuccess,
-        msg,
-        delay
-    });
-}
\ No newline at end of file
+  MessageTips.create({
+    isSuccess,
+    msg,
+    delay,
+  });
+}
diff --git a/src/business/project-qq-wallet/index.js b/src/business/project-qq-wallet/index.js
index 32279ba..d3e572b 100644
--- a/src/business/project-qq-wallet/index.js
+++ b/src/business/project-qq-wallet/index.js
@@ -7,49 +7,50 @@ import showDialog from '../project-dialog';
  * 跳转至QQ钱包
  */
 export function jumpToQQWallet() {
-    const uin = _.getCookie('uin');
-    const url = 'mqqapi://forward/url?url_prefix='
-        + btoa(location.protocol + '//now.qq.com/qq_mobile/add_card.html?_wv=5123&uin=' + uin)
-        + '&version=1&src_type=web';
+  const uin = _.getCookie('uin');
+  const url = `mqqapi://forward/url?url_prefix=${
+    btoa(`${location.protocol}//now.qq.com/qq_mobile/add_card.html?_wv=5123&uin=${uin}`)
+  }&version=1&src_type=web`;
 
-    // 打印日志，注意，这个日志不要修改和删除，用户做自动化测试
-    console.log(`[jumpToQQWallet] url`, url);
+  // 打印日志，注意，这个日志不要修改和删除，用户做自动化测试
+  console.log('[jumpToQQWallet] url', url);
+  console.log(`[e2e]${url}`);
 
-    const result = openQQ(url);
+  const result = openQQ(url);
 
-    _.query('from_lottery') && showDialog({
-        onEnter: () => {
-            window.location.href = 'mttbrowser://url=qb://home/feeds?tabId=110016';
-        },
-        onCancel: () => {
-            window.location.href = 'mttbrowser://url=qb://home/feeds?tabId=110016';
-        },
-        enterText: '去认证',
-        cancelText: '取消',
-        text: '网络异常，您需要重新领取Q币，进行实名认证',
-        skin: 'dlg-go-download-qq'
-    });
+  _.query('from_lottery') && showDialog({
+    onEnter: () => {
+      window.location.href = 'mttbrowser://url=qb://home/feeds?tabId=110016';
+    },
+    onCancel: () => {
+      window.location.href = 'mttbrowser://url=qb://home/feeds?tabId=110016';
+    },
+    enterText: '去认证',
+    cancelText: '取消',
+    text: '网络异常，您需要重新领取Q币，进行实名认证',
+    skin: 'dlg-go-download-qq',
+  });
 
-    return result;
+  return result;
 }
 
 export function showDialogToGoQQWallet() {
-    showDialog({
-        enterText: '去认证',
-        text: '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
-        skin: 'dlg-go-qq-wallet',
-        onEnter: () => {
-            jumpToQQWallet()
-                .catch(() => {
-                    (!device.isQQBrowser || !_.query('from_lottery')) && showDialog({
-                        onEnter: () => {
-                            window.location.href = 'https://im.qq.com/immobile/index.html';
-                        },
-                        enterText: '确定',
-                        text: 'QQ未下载，请下载QQ',
-                        skin: 'dlg-go-download-qq'
-                    });
-                });
-        }
-    });
+  showDialog({
+    enterText: '去认证',
+    text: '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+    skin: 'dlg-go-qq-wallet',
+    onEnter: () => {
+      jumpToQQWallet()
+        .catch(() => {
+          (!device.isQQBrowser || !_.query('from_lottery')) && showDialog({
+            onEnter: () => {
+              window.location.href = 'https://im.qq.com/immobile/index.html';
+            },
+            enterText: '确定',
+            text: 'QQ未下载，请下载QQ',
+            skin: 'dlg-go-download-qq',
+          });
+        });
+    },
+  });
 }
diff --git a/src/business/project-verify-identity/index.js b/src/business/project-verify-identity/index.js
index c5b218e..7c00162 100644
--- a/src/business/project-verify-identity/index.js
+++ b/src/business/project-verify-identity/index.js
@@ -10,8 +10,8 @@ import showMessageTips from '../project-message-tips';
  * @return {String}
  */
 export function getCheckedName(value = '') {
-    // 去掉多余空格
-    return value.replace(/\s/g, '');
+  // 去掉多余空格
+  return value.replace(/\s/g, '');
 }
 
 /**
@@ -21,8 +21,8 @@ export function getCheckedName(value = '') {
  * @return {Boolean}
  */
 export function checkIfIdValid(value) {
-    const regExp = /^(11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65|71|81|82|91)\d{4}(((19|[2-9]\d)\d{2}(((0[13578]|1[02])31)|((0[1,3-9]|1[0-2])(29|30))))|((((19|[2-9]\d)(0[48]|[2468][048]|[13579][26]))|(([2468][048]|[3579][26])00))0229)|((19|[2-9]\d)\d{2}((0[1-9])|(1[0-2]))(0[1-9]|1\d|2[0-8])))\d{3}(\d|X|x)$/;
-    return regExp.test(value);
+  const regExp = /^(11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65|71|81|82|91)\d{4}(((19|[2-9]\d)\d{2}(((0[13578]|1[02])31)|((0[1,3-9]|1[0-2])(29|30))))|((((19|[2-9]\d)(0[48]|[2468][048]|[13579][26]))|(([2468][048]|[3579][26])00))0229)|((19|[2-9]\d)\d{2}((0[1-9])|(1[0-2]))(0[1-9]|1\d|2[0-8])))\d{3}(\d|X|x)$/;
+  return regExp.test(value);
 }
 
 /**
@@ -30,15 +30,15 @@ export function checkIfIdValid(value) {
  * @type {Object}
  */
 export const CGI_RETCODE = {
-    VERIFY_CODE_ERROR: '1150001', // 手机验证码验证不通过
-    SHOULD_VERIFY_PHONE_AGAIN: '1150003', // 招行的卡，需要用户输入手机号
-    VERIFY_PHONE_FAIL: '1150005', // 征信校验手机不通过
-    NEW_USER: '51068401', // new user.
-    REQUEST_FREQUENT: '66219002', // 操作太频繁
-    NOT_REAL_NAME: '66219004', // 历史用户已绑卡未实名
-    CALL_LOGIN_ERROR: '66210007', // 登录态过期
-    PARAM_ERROR: '66209002', // 输入信息有误，请核对后重试
-    NOT_BINDING_TENPAY: '66230402' // 财付通那边返回的未绑卡状态
+  VERIFY_CODE_ERROR: '1150001', // 手机验证码验证不通过
+  SHOULD_VERIFY_PHONE_AGAIN: '1150003', // 招行的卡，需要用户输入手机号
+  VERIFY_PHONE_FAIL: '1150005', // 征信校验手机不通过
+  NEW_USER: '51068401', // new user.
+  REQUEST_FREQUENT: '66219002', // 操作太频繁
+  NOT_REAL_NAME: '66219004', // 历史用户已绑卡未实名
+  CALL_LOGIN_ERROR: '66210007', // 登录态过期
+  PARAM_ERROR: '66209002', // 输入信息有误，请核对后重试
+  NOT_BINDING_TENPAY: '66230402', // 财付通那边返回的未绑卡状态
 };
 
 /**
@@ -46,23 +46,23 @@ export const CGI_RETCODE = {
  * @type {Object}
  */
 export const CGI_ERR_CODE = {
-    // 当前身份证信息已被绑定
-    // 该身份证已经被绑定超过2个号了
-    CARD_ALREADY_BINDING: 900002,
-
-    // 身份证已绑定一个账号，还可绑定一次。
-    // 当然，有些场景下只允许绑定一次的，也可以认为不能再绑定了，例如浏览器结合版里面就只限定绑定一次
-    // 如果err_code 返回了该值，则可以获取到更多的信息，包括：
-    // nick   标识被管理的号码的昵称
-    // tenpay 标识被管理的号码的财付通账号
-    BINDING_ONE_CARD: 900003,
-
-    // 账号已经通过实名认证，无需重复认证
-    IS_ACCOUNT_VERIFIED: 900004,
-
-    // target_auth_type 传了 1，但是又没有手机认证
-    // 暂时未做处理，老业务里面也没处理过
-    TYPE_1_NOT_VERIFY_PHONE: 900061
+  // 当前身份证信息已被绑定
+  // 该身份证已经被绑定超过2个号了
+  CARD_ALREADY_BINDING: 900002,
+
+  // 身份证已绑定一个账号，还可绑定一次。
+  // 当然，有些场景下只允许绑定一次的，也可以认为不能再绑定了，例如浏览器结合版里面就只限定绑定一次
+  // 如果err_code 返回了该值，则可以获取到更多的信息，包括：
+  // nick   标识被管理的号码的昵称
+  // tenpay 标识被管理的号码的财付通账号
+  BINDING_ONE_CARD: 900003,
+
+  // 账号已经通过实名认证，无需重复认证
+  IS_ACCOUNT_VERIFIED: 900004,
+
+  // target_auth_type 传了 1，但是又没有手机认证
+  // 暂时未做处理，老业务里面也没处理过
+  TYPE_1_NOT_VERIFY_PHONE: 900061,
 };
 
 /**
@@ -71,9 +71,9 @@ export const CGI_ERR_CODE = {
  * @type {Object}
  */
 export const NAME_AUTH_FLAG = {
-    NOT_BINDING_WALLET: '1', // 钱包未实名
-    FAIL: '3', // 认证失败。您提交的信息和QQ钱包绑定的实名认证信息不一致
-    SUCCESS: '2' // 身份认证成功
+  NOT_BINDING_WALLET: '1', // 钱包未实名
+  FAIL: '3', // 认证失败。您提交的信息和QQ钱包绑定的实名认证信息不一致
+  SUCCESS: '2', // 身份认证成功
 };
 
 /**
@@ -82,17 +82,17 @@ export const NAME_AUTH_FLAG = {
  * @type {Object}
  */
 export const ACTION_RESULT = {
-    GO_WITHDRAW_PAGE: 'GO_WITHDRAW_PAGE',
-    VERIFY_CODE_ERROR: 'VERIFY_CODE_ERROR',
-    SHOULD_VERIFY_PHONE: 'SHOULD_VERIFY_PHONE',
-    SHOW_DLG_GO_QQ_WALLET: 'SHOW_DLG_GO_QQ_WALLET',
-    NAME_AUTH_FLAG_FAIL: 'NAME_AUTH_FLAG_FAIL',
-    IS_ID_BIND: 'IS_ID_BIND',
-    IS_ACCOUNT_VERIFIED: 'IS_ACCOUNT_VERIFIED',
-    LOGIN_EXPIRED: 'LOGIN_EXPIRED',
-    PARAM_ERROR: 'PARAM_ERROR',
-    IS_FREQUENT: 'IS_FREQUENT',
-    OTHER_ERROR: 'OTHER_ERROR'
+  GO_WITHDRAW_PAGE: 'GO_WITHDRAW_PAGE',
+  VERIFY_CODE_ERROR: 'VERIFY_CODE_ERROR',
+  SHOULD_VERIFY_PHONE: 'SHOULD_VERIFY_PHONE',
+  SHOW_DLG_GO_QQ_WALLET: 'SHOW_DLG_GO_QQ_WALLET',
+  NAME_AUTH_FLAG_FAIL: 'NAME_AUTH_FLAG_FAIL',
+  IS_ID_BIND: 'IS_ID_BIND',
+  IS_ACCOUNT_VERIFIED: 'IS_ACCOUNT_VERIFIED',
+  LOGIN_EXPIRED: 'LOGIN_EXPIRED',
+  PARAM_ERROR: 'PARAM_ERROR',
+  IS_FREQUENT: 'IS_FREQUENT',
+  OTHER_ERROR: 'OTHER_ERROR',
 };
 
 /**
@@ -103,129 +103,105 @@ export const ACTION_RESULT = {
  * @return {{msg: String, code: String, isSuccess: (Boolean)}}
  */
 export function getActionResultForVerifyFromRes(data = {}, isSuccess) {
-    let code;
-    let msg;
-    let msgIsSuccess;
-
-    if (isSuccess) {
-        if (data.nameauthFlag === NAME_AUTH_FLAG.SUCCESS) {
-
-            //实名认证成功，跳转至提现页
-            code = ACTION_RESULT.GO_WITHDRAW_PAGE;
-            msg = '认证成功';
-            msgIsSuccess = true;
-
-        } else if (data.retcode === CGI_RETCODE.SHOULD_VERIFY_PHONE_AGAIN) {
-
-            // 需要进一步验证手机号码
-            code = ACTION_RESULT.SHOULD_VERIFY_PHONE;
-            msg = '请输入手机号并验证';
-
-        } else if (data.retcode === CGI_RETCODE.VERIFY_PHONE_FAIL) {
-
-            code = ACTION_RESULT.SHOULD_VERIFY_PHONE;
-            msg = '手机号验证失败';
-
-        } else if (data.retcode === CGI_RETCODE.VERIFY_CODE_ERROR) {
-
-            // 手机验证码错误，在需要二次验证手机的场景，输入了一个错误的验证码，
-            // 则可能返回这个错误
-            code = ACTION_RESULT.VERIFY_CODE_ERROR;
-            msg = '验证码错误';
-
-        } else if (data.retcode === CGI_RETCODE.NEW_USER
+  let code;
+  let msg;
+  let msgIsSuccess;
+
+  if (isSuccess) {
+    if (data.nameauthFlag === NAME_AUTH_FLAG.SUCCESS) {
+      // 实名认证成功，跳转至提现页
+      code = ACTION_RESULT.GO_WITHDRAW_PAGE;
+      msg = '认证成功';
+      msgIsSuccess = true;
+    } else if (data.retcode === CGI_RETCODE.SHOULD_VERIFY_PHONE_AGAIN) {
+      // 需要进一步验证手机号码
+      code = ACTION_RESULT.SHOULD_VERIFY_PHONE;
+      msg = '请输入手机号并验证';
+    } else if (data.retcode === CGI_RETCODE.VERIFY_PHONE_FAIL) {
+      code = ACTION_RESULT.SHOULD_VERIFY_PHONE;
+      msg = '手机号验证失败';
+    } else if (data.retcode === CGI_RETCODE.VERIFY_CODE_ERROR) {
+      // 手机验证码错误，在需要二次验证手机的场景，输入了一个错误的验证码，
+      // 则可能返回这个错误
+      code = ACTION_RESULT.VERIFY_CODE_ERROR;
+      msg = '验证码错误';
+    } else if (data.retcode === CGI_RETCODE.NEW_USER
             || data.retcode === CGI_RETCODE.NOT_REAL_NAME
             || data.retcode === CGI_RETCODE.NOT_BINDING_TENPAY
             || data.nameauthFlag === NAME_AUTH_FLAG.NOT_BINDING_WALLET) {
-
-            code = ACTION_RESULT.SHOW_DLG_GO_QQ_WALLET;
-
-        } else if (data.nameauthFlag === NAME_AUTH_FLAG.FAIL) {
-
-            code = ACTION_RESULT.NAME_AUTH_FLAG_FAIL;
-            msg = '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性';
-
-        } else if (data.errCode === CGI_ERR_CODE.CARD_ALREADY_BINDING
+      code = ACTION_RESULT.SHOW_DLG_GO_QQ_WALLET;
+    } else if (data.nameauthFlag === NAME_AUTH_FLAG.FAIL) {
+      code = ACTION_RESULT.NAME_AUTH_FLAG_FAIL;
+      msg = '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性';
+    } else if (data.errCode === CGI_ERR_CODE.CARD_ALREADY_BINDING
             || data.errCode === CGI_ERR_CODE.BINDING_ONE_CARD) {
+      code = ACTION_RESULT.IS_ID_BIND;
+      msg = '当前身份证信息已被绑定';
+    } else if (data.errCode === CGI_ERR_CODE.IS_ACCOUNT_VERIFIED) {
+      code = ACTION_RESULT.IS_ACCOUNT_VERIFIED;
+      msg = '该账号已经通过实名认证，无需重复认证';
+    } else if (data.retcode === CGI_RETCODE.CALL_LOGIN_ERROR) {
+      code = ACTION_RESULT.LOGIN_EXPIRED;
+      msg = '登录过期';
+    } else if (data.retcode === CGI_RETCODE.PARAM_ERROR) {
+      code = ACTION_RESULT.PARAM_ERROR;
+      msg = '输入信息有误，请核对后重试';
+    } else if (data.retcode === CGI_RETCODE.REQUEST_FREQUENT) {
+      code = ACTION_RESULT.IS_FREQUENT;
+      msg = '请求太频繁，请稍后再试';
+    } else {
+      code = ACTION_RESULT.OTHER_ERROR;
 
-            code = ACTION_RESULT.IS_ID_BIND;
-            msg = '当前身份证信息已被绑定';
-
-        } else if (data.errCode === CGI_ERR_CODE.IS_ACCOUNT_VERIFIED) {
-
-            code = ACTION_RESULT.IS_ACCOUNT_VERIFIED;
-            msg = '该账号已经通过实名认证，无需重复认证';
-
-        } else if (data.retcode === CGI_RETCODE.CALL_LOGIN_ERROR) {
-
-            code = ACTION_RESULT.LOGIN_EXPIRED;
-            msg = '登录过期';
-
-        } else if (data.retcode === CGI_RETCODE.PARAM_ERROR) {
-
-            code = ACTION_RESULT.PARAM_ERROR;
-            msg = '输入信息有误，请核对后重试';
-
-        } else if (data.retcode === CGI_RETCODE.REQUEST_FREQUENT) {
-
-            code = ACTION_RESULT.IS_FREQUENT;
-            msg = '请求太频繁，请稍后再试';
-
-        } else {
-
-            code = ACTION_RESULT.OTHER_ERROR;
-
-            const arr = [];
-            if (typeof data.errCode !== 'undefined') {
-                arr.push(`err_code=${data.errCode}`);
-            }
-            if (typeof data.retcode !== 'undefined') {
-                arr.push(`retcode=${data.retcode}`);
-            }
-
-            msg = `绑卡状态获取失败(${arr.join(',')})，请重试`;
+      const arr = [];
+      if (typeof data.errCode !== 'undefined') {
+        arr.push(`err_code=${data.errCode}`);
+      }
+      if (typeof data.retcode !== 'undefined') {
+        arr.push(`retcode=${data.retcode}`);
+      }
 
-        }
-    } else {
-        code = ACTION_RESULT.OTHER_ERROR;
-        msg = `网络异常，请稍后重试(${data.retcode})`;
+      msg = `绑卡状态获取失败(${arr.join(',')})，请重试`;
     }
-
-    return {
-        code: code,
-        msg,
-        isSuccess: !!msgIsSuccess
-    };
+  } else {
+    code = ACTION_RESULT.OTHER_ERROR;
+    msg = `网络异常，请稍后重试(${data.retcode})`;
+  }
+
+  return {
+    code,
+    msg,
+    isSuccess: !!msgIsSuccess,
+  };
 }
 
 export function handleResForVerifyIdentity(data = {}, isSuccess) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForVerifyIdentity]', data, isSuccess);
-    }
-
-    const actionResult = getActionResultForVerifyFromRes(data, isSuccess);
-
-    if (actionResult.code === ACTION_RESULT.GO_WITHDRAW_PAGE) {
-        // 跳转到提现页
-        actionResult._isReadyToJump = true;
-        jumpToWithdrawPage();
-    } else if (actionResult.code === ACTION_RESULT.SHOW_DLG_GO_QQ_WALLET) {
-        // 展示跳转至QQ钱包的弹窗
-        showDialogToGoQQWallet();
-    } else if (actionResult.code === ACTION_RESULT.LOGIN_EXPIRED) {
-        // 登录态过期，重新登录
-        actionResult._isReadyToJump = true;
-        login();
-    }
-
-    // 如果有消息，则展示提示
-    if (actionResult.msg) {
-        showMessageTips(actionResult.msg, actionResult.isSuccess);
-    }
-
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForVerifyIdentity] actionResult', actionResult);
-    }
-
-    return actionResult;
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForVerifyIdentity]', data, isSuccess);
+  }
+
+  const actionResult = getActionResultForVerifyFromRes(data, isSuccess);
+
+  if (actionResult.code === ACTION_RESULT.GO_WITHDRAW_PAGE) {
+    // 跳转到提现页
+    actionResult._isReadyToJump = true;
+    jumpToWithdrawPage();
+  } else if (actionResult.code === ACTION_RESULT.SHOW_DLG_GO_QQ_WALLET) {
+    // 展示跳转至QQ钱包的弹窗
+    showDialogToGoQQWallet();
+  } else if (actionResult.code === ACTION_RESULT.LOGIN_EXPIRED) {
+    // 登录态过期，重新登录
+    actionResult._isReadyToJump = true;
+    login();
+  }
+
+  // 如果有消息，则展示提示
+  if (actionResult.msg) {
+    showMessageTips(actionResult.msg, actionResult.isSuccess);
+  }
+
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForVerifyIdentity] actionResult', actionResult);
+  }
+
+  return actionResult;
 }
diff --git a/src/business/project-verify-phone/index.js b/src/business/project-verify-phone/index.js
index 843c2f5..f1a8aab 100644
--- a/src/business/project-verify-phone/index.js
+++ b/src/business/project-verify-phone/index.js
@@ -7,9 +7,9 @@ import { getQueryNotVerifyId, jumpToIdentityPage, jumpToWithdrawPage } from '../
  * @type {Object}
  */
 export const CGI_CODE_GET_CODE = {
-    SUCCESS: 0, // 绑定手机成功
-    IS_BIND: 900001, // 手机已绑定
-    IS_FREQUENT: 17 // 操作太频繁
+  SUCCESS: 0, // 绑定手机成功
+  IS_BIND: 900001, // 手机已绑定
+  IS_FREQUENT: 17, // 操作太频繁
 };
 
 /**
@@ -18,10 +18,10 @@ export const CGI_CODE_GET_CODE = {
  * @type {Object}
  */
 export const ACTION_RESULT_GET_CODE = {
-    SUCCESS: 'SUCCESS', // 绑定手机成功
-    IS_BIND: 'IS_BIND', // 手机已绑定
-    IS_FREQUENT: 'IS_FREQUENT', // 操作太频繁
-    OTHER_ERROR: 'OTHER_ERROR' // 其他错误
+  SUCCESS: 'SUCCESS', // 绑定手机成功
+  IS_BIND: 'IS_BIND', // 手机已绑定
+  IS_FREQUENT: 'IS_FREQUENT', // 操作太频繁
+  OTHER_ERROR: 'OTHER_ERROR', // 其他错误
 };
 
 /**
@@ -30,12 +30,12 @@ export const ACTION_RESULT_GET_CODE = {
  * @type {Object}
  */
 export const CGI_CODE_VERIFY_CODE = {
-    SUCCESS: 0, // 绑定手机成功
-    IS_BIND: 900001, // 手机已绑定
-    IS_FREQUENT: 17, // 操作太频繁
-    IN_BLACKLIST: 900055, // 被拉黑的手机号或者uid
-    CODE_ERROR: 12, // 验证码错误
-    CODE_ERROR_ALSO: 2 // 另外一种验证码错误
+  SUCCESS: 0, // 绑定手机成功
+  IS_BIND: 900001, // 手机已绑定
+  IS_FREQUENT: 17, // 操作太频繁
+  IN_BLACKLIST: 900055, // 被拉黑的手机号或者uid
+  CODE_ERROR: 12, // 验证码错误
+  CODE_ERROR_ALSO: 2, // 另外一种验证码错误
 };
 
 /**
@@ -44,12 +44,12 @@ export const CGI_CODE_VERIFY_CODE = {
  * @type {Object}
  */
 export const ACTION_RESULT_VERIFY_CODE = {
-    GO_WITHDRAW_PAGE: 'GO_WITHDRAW_PAGE',
-    GO_IDENTITY_PAGE: 'GO_IDENTITY_PAGE',
-    IS_BIND: 'IS_BIND',
-    IS_FREQUENT: 'IS_FREQUENT',
-    CODE_ERROR: 'CODE_ERROR',
-    OTHER_ERROR: 'OTHER_ERROR'
+  GO_WITHDRAW_PAGE: 'GO_WITHDRAW_PAGE',
+  GO_IDENTITY_PAGE: 'GO_IDENTITY_PAGE',
+  IS_BIND: 'IS_BIND',
+  IS_FREQUENT: 'IS_FREQUENT',
+  CODE_ERROR: 'CODE_ERROR',
+  OTHER_ERROR: 'OTHER_ERROR',
 };
 
 /**
@@ -59,11 +59,11 @@ export const ACTION_RESULT_VERIFY_CODE = {
  * @return {String}
  */
 export function getCheckedPhone(value = '') {
-    // 必须以 1 开头，且只允许数字，且最多11位
-    return value
-        .replace(/^[^1][\s\S]*/, '')
-        .replace(/[^\d]/g, '')
-        .replace(/^(\d{11})(.*)$/, '$1');
+  // 必须以 1 开头，且只允许数字，且最多11位
+  return value
+    .replace(/^[^1][\s\S]*/, '')
+    .replace(/[^\d]/g, '')
+    .replace(/^(\d{11})(.*)$/, '$1');
 }
 
 /**
@@ -73,7 +73,7 @@ export function getCheckedPhone(value = '') {
  * @return {Boolean}
  */
 export function checkIfPhoneValid(value) {
-    return /^1\d{10}$/.test(value);
+  return /^1\d{10}$/.test(value);
 }
 
 /**
@@ -83,10 +83,10 @@ export function checkIfPhoneValid(value) {
  * @return {String}
  */
 export function getCheckedCode(value) {
-    // 移除多余空格，且最多6位
-    return value
-        .replace(/\s/g, '')
-        .replace(/^(\S{6})(.*)$/, '$1');
+  // 移除多余空格，且最多6位
+  return value
+    .replace(/\s/g, '')
+    .replace(/^(\S{6})(.*)$/, '$1');
 }
 
 /**
@@ -94,30 +94,30 @@ export function getCheckedCode(value) {
  * @param {Function} tickCallback 进行时的回调，每秒触发一次，接受两个参数 text:文案, isEnd:倒计时是否已结束
  */
 export function countdown(tickCallback) {
-    // 开始时间
-    const startTime = Date.now();
+  // 开始时间
+  const startTime = Date.now();
 
-    // 倒计时 60s ，注意这里单位是 milliseconds
-    const maxDuration = 60 * 1000;
+  // 倒计时 60s ，注意这里单位是 milliseconds
+  const maxDuration = 60 * 1000;
 
-    const cycle = () => {
-        const remainingTime = maxDuration - (Date.now() - startTime);
-        const remainingSeconds = Math.max(0, Math.round(remainingTime / 1000));
+  const cycle = () => {
+    const remainingTime = maxDuration - (Date.now() - startTime);
+    const remainingSeconds = Math.max(0, Math.round(remainingTime / 1000));
 
-        if (remainingTime < 0) {
-            tickCallback('重发', true);
-        } else {
-            const codeTextValue = `重发(${remainingSeconds < 10 ? ('0' + remainingSeconds) : remainingSeconds})`;
+    if (remainingTime < 0) {
+      tickCallback('重发', true);
+    } else {
+      const codeTextValue = `重发(${remainingSeconds < 10 ? (`0${remainingSeconds}`) : remainingSeconds})`;
 
-            tickCallback(codeTextValue, false);
+      tickCallback(codeTextValue, false);
 
-            setTimeout(function () {
-                cycle();
-            }, remainingTime % 1000);
-        }
-    };
+      setTimeout(() => {
+        cycle();
+      }, remainingTime % 1000);
+    }
+  };
 
-    cycle();
+  cycle();
 }
 
 /**
@@ -128,42 +128,42 @@ export function countdown(tickCallback) {
  * @return {{msg: String, code: String, isSuccess: (Boolean)}}
  */
 export function getActionResultForCodeFromRes(errCode, isSuccess) {
-    let code;
-    let msg;
-
-    if (isSuccess) {
-        switch (errCode) {
-            case CGI_CODE_GET_CODE.SUCCESS:
-                // 获取验证码成功
-                code = ACTION_RESULT_GET_CODE.SUCCESS;
-                msg = '验证码已发送';
-                break;
-
-            case CGI_CODE_GET_CODE.IS_BIND:
-                code = ACTION_RESULT_GET_CODE.IS_BIND;
-                msg = '该手机号已被绑定，请重新输入';
-                break;
-
-            case CGI_CODE_GET_CODE.IS_FREQUENT:
-                code = ACTION_RESULT_GET_CODE.IS_FREQUENT;
-                msg = '验证码获取太频繁';
-                break;
-
-            default:
-                code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
-                msg = `验证码发送失败，请稍后重试(code=${errCode})`;
-                break;
-        }
-    } else {
+  let code;
+  let msg;
+
+  if (isSuccess) {
+    switch (errCode) {
+      case CGI_CODE_GET_CODE.SUCCESS:
+        // 获取验证码成功
+        code = ACTION_RESULT_GET_CODE.SUCCESS;
+        msg = '验证码已发送';
+        break;
+
+      case CGI_CODE_GET_CODE.IS_BIND:
+        code = ACTION_RESULT_GET_CODE.IS_BIND;
+        msg = '该手机号已被绑定，请重新输入';
+        break;
+
+      case CGI_CODE_GET_CODE.IS_FREQUENT:
+        code = ACTION_RESULT_GET_CODE.IS_FREQUENT;
+        msg = '验证码获取太频繁';
+        break;
+
+      default:
         code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
-        msg = `网络异常，请稍后重试(${errCode})`;
+        msg = `验证码发送失败，请稍后重试(code=${errCode})`;
+        break;
     }
-
-    return {
-        code,
-        msg,
-        isSuccess: isSuccess && (errCode === CGI_CODE_GET_CODE.SUCCESS)
-    };
+  } else {
+    code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
+    msg = `网络异常，请稍后重试(${errCode})`;
+  }
+
+  return {
+    code,
+    msg,
+    isSuccess: isSuccess && (errCode === CGI_CODE_GET_CODE.SUCCESS),
+  };
 }
 
 /**
@@ -174,58 +174,58 @@ export function getActionResultForCodeFromRes(errCode, isSuccess) {
  * @return {{msg: String, code: String, isSuccess: (Boolean)}}
  */
 export function getActionResultForVerifyFromRes(errCode, isSuccess) {
-    let code;
-    let msg;
-
-    if (isSuccess) {
-        switch (errCode) {
-            case CGI_CODE_VERIFY_CODE.SUCCESS:
-
-                // 验证码校验成功之后，需要根据情况进行跳转，
-                // 因为有些场景下用户可能身份证已认证，但手机未认证
-                // 因此，跳转到手机认证页面时如果携带了not_verify_id=1，
-                // 则不需要再去身份证认证，则直接跳转到提现页了，而不是再去身份证验证页面
-                if (getQueryNotVerifyId() + '' === '1') {
-                    code = ACTION_RESULT_VERIFY_CODE.GO_WITHDRAW_PAGE;
-                    msg = '认证成功';
-                } else {
-                    code = ACTION_RESULT_VERIFY_CODE.GO_IDENTITY_PAGE;
-                    msg = '注册成功';
-                }
-
-                break;
-
-            case CGI_CODE_VERIFY_CODE.IS_BIND:
-                code = ACTION_RESULT_VERIFY_CODE.IS_BIND;
-                msg = '该手机号已被绑定，请重新输入';
-                break;
-
-            case CGI_CODE_VERIFY_CODE.IS_FREQUENT:
-                code = ACTION_RESULT_VERIFY_CODE.IS_FREQUENT;
-                msg = '操作太频繁，请稍后再试';
-                break;
-
-            case CGI_CODE_VERIFY_CODE.CODE_ERROR:
-            case CGI_CODE_VERIFY_CODE.CODE_ERROR_ALSO:
-                code = ACTION_RESULT_VERIFY_CODE.CODE_ERROR;
-                msg = '验证码错误';
-                break;
-
-            default:
-                code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
-                msg = `验证码校验失败，请稍后重试(code=${errCode})`;
-                break;
+  let code;
+  let msg;
+
+  if (isSuccess) {
+    switch (errCode) {
+      case CGI_CODE_VERIFY_CODE.SUCCESS:
+
+        // 验证码校验成功之后，需要根据情况进行跳转，
+        // 因为有些场景下用户可能身份证已认证，但手机未认证
+        // 因此，跳转到手机认证页面时如果携带了not_verify_id=1，
+        // 则不需要再去身份证认证，则直接跳转到提现页了，而不是再去身份证验证页面
+        if (`${getQueryNotVerifyId()}` === '1') {
+          code = ACTION_RESULT_VERIFY_CODE.GO_WITHDRAW_PAGE;
+          msg = '认证成功';
+        } else {
+          code = ACTION_RESULT_VERIFY_CODE.GO_IDENTITY_PAGE;
+          msg = '注册成功';
         }
-    } else {
+
+        break;
+
+      case CGI_CODE_VERIFY_CODE.IS_BIND:
+        code = ACTION_RESULT_VERIFY_CODE.IS_BIND;
+        msg = '该手机号已被绑定，请重新输入';
+        break;
+
+      case CGI_CODE_VERIFY_CODE.IS_FREQUENT:
+        code = ACTION_RESULT_VERIFY_CODE.IS_FREQUENT;
+        msg = '操作太频繁，请稍后再试';
+        break;
+
+      case CGI_CODE_VERIFY_CODE.CODE_ERROR:
+      case CGI_CODE_VERIFY_CODE.CODE_ERROR_ALSO:
+        code = ACTION_RESULT_VERIFY_CODE.CODE_ERROR;
+        msg = '验证码错误';
+        break;
+
+      default:
         code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
-        msg = `网络异常，请稍后重试(${errCode})`;
+        msg = `验证码校验失败，请稍后重试(code=${errCode})`;
+        break;
     }
-
-    return {
-        code: code,
-        msg,
-        isSuccess: isSuccess && (errCode === CGI_CODE_VERIFY_CODE.SUCCESS)
-    };
+  } else {
+    code = ACTION_RESULT_VERIFY_CODE.OTHER_ERROR;
+    msg = `网络异常，请稍后重试(${errCode})`;
+  }
+
+  return {
+    code,
+    msg,
+    isSuccess: isSuccess && (errCode === CGI_CODE_VERIFY_CODE.SUCCESS),
+  };
 }
 
 /**
@@ -236,22 +236,22 @@ export function getActionResultForVerifyFromRes(errCode, isSuccess) {
  * @return {{msg: String, code: String, isSuccess: (Boolean)}}
  */
 export function handleResForGetVerifyCode(errCode, isSuccess) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForGetVerifyCode]', errCode, isSuccess);
-    }
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForGetVerifyCode]', errCode, isSuccess);
+  }
 
-    const actionResult = getActionResultForCodeFromRes(errCode, isSuccess);
+  const actionResult = getActionResultForCodeFromRes(errCode, isSuccess);
 
-    // 如果有消息，则展示提示
-    if (actionResult.msg) {
-        showMessageTips(actionResult.msg, actionResult.isSuccess);
-    }
+  // 如果有消息，则展示提示
+  if (actionResult.msg) {
+    showMessageTips(actionResult.msg, actionResult.isSuccess);
+  }
 
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForGetVerifyCode] actionResult', actionResult);
-    }
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForGetVerifyCode] actionResult', actionResult);
+  }
 
-    return actionResult;
+  return actionResult;
 }
 
 /**
@@ -262,29 +262,29 @@ export function handleResForGetVerifyCode(errCode, isSuccess) {
  * @return {{msg: String, code: String, isSuccess: (Boolean)}}
  */
 export function handleResForCheckVerifyCode(errCode, isSuccess) {
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForCheckVerifyCode]', errCode, isSuccess);
-    }
-
-    const actionResult = getActionResultForVerifyFromRes(errCode, isSuccess);
-
-    // 额外的逻辑处理
-    if (actionResult.code === ACTION_RESULT_VERIFY_CODE.GO_WITHDRAW_PAGE) {
-        actionResult._isReadyToJump = true;
-        jumpToWithdrawPage();
-    } else if (actionResult.code === ACTION_RESULT_VERIFY_CODE.GO_IDENTITY_PAGE) {
-        actionResult._isReadyToJump = true;
-        jumpToIdentityPage();
-    }
-
-    // 如果有消息，则展示提示
-    if (actionResult.msg) {
-        showMessageTips(actionResult.msg, actionResult.isSuccess);
-    }
-
-    if (process.env.NODE_ENV !== 'production') {
-        console.log('[handleResForCheckVerifyCode] actionResult', actionResult);
-    }
-
-    return actionResult;
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForCheckVerifyCode]', errCode, isSuccess);
+  }
+
+  const actionResult = getActionResultForVerifyFromRes(errCode, isSuccess);
+
+  // 额外的逻辑处理
+  if (actionResult.code === ACTION_RESULT_VERIFY_CODE.GO_WITHDRAW_PAGE) {
+    actionResult._isReadyToJump = true;
+    jumpToWithdrawPage();
+  } else if (actionResult.code === ACTION_RESULT_VERIFY_CODE.GO_IDENTITY_PAGE) {
+    actionResult._isReadyToJump = true;
+    jumpToIdentityPage();
+  }
+
+  // 如果有消息，则展示提示
+  if (actionResult.msg) {
+    showMessageTips(actionResult.msg, actionResult.isSuccess);
+  }
+
+  if (process.env.NODE_ENV !== 'production') {
+    console.log('[handleResForCheckVerifyCode] actionResult', actionResult);
+  }
+
+  return actionResult;
 }
diff --git a/src/business/sonic/index.js b/src/business/sonic/index.js
index d3a4216..88a3826 100644
--- a/src/business/sonic/index.js
+++ b/src/business/sonic/index.js
@@ -1,42 +1,43 @@
+/* istanbul ignore file */
 // sonic 修饰器
 export default function SonicDecorator(target) {
-    const newTarget = class extends target {
-        constructor() {
-            super();
+  const newTarget = class extends target {
+    constructor() {
+      super();
 
-            const hooksInLoaded = () => {
-                const prototype = this.__proto__.__proto__;
+      const hooksInLoaded = () => {
+        const prototype = this.__proto__.__proto__;
 
-                const onSonicFirstLoad = this.onSonicFirstLoad || prototype.onSonicFirstLoad || function () {};
-                const onSonicDataUpdate = this.onSonicDataUpdate || prototype.onSonicDataUpdate || function () {};
-                const onSonicTempUpdate = this.onSonicTempUpdate || prototype.onSonicTempUpdate || function () {};
-                const onSonicCache = this.onSonicCache || prototype.onSonicCache || function () {};
+        const onSonicFirstLoad = this.onSonicFirstLoad || prototype.onSonicFirstLoad || function () {};
+        const onSonicDataUpdate = this.onSonicDataUpdate || prototype.onSonicDataUpdate || function () {};
+        const onSonicTempUpdate = this.onSonicTempUpdate || prototype.onSonicTempUpdate || function () {};
+        const onSonicCache = this.onSonicCache || prototype.onSonicCache || function () {};
 
-                if (window.sonicData) {
-                    switch (window.sonicStatus) {
-                        case 1:
-                            onSonicFirstLoad();
-                            break;
-                        case 2:
-                            onSonicTempUpdate();
-                            break;
-                        case 3:
-                            onSonicDataUpdate(window.sonicUpdateData);
-                            break;
-                        case 4:
-                            onSonicCache();
-                            break;
-                        default:
-                            break;
-                    }
-                }
-            };
-
-            window.onSonicLoaded(() => {
-                hooksInLoaded();
-            });
+        if (window.sonicData) {
+          switch (window.sonicStatus) {
+            case 1:
+              onSonicFirstLoad();
+              break;
+            case 2:
+              onSonicTempUpdate();
+              break;
+            case 3:
+              onSonicDataUpdate(window.sonicUpdateData);
+              break;
+            case 4:
+              onSonicCache();
+              break;
+            default:
+              break;
+          }
         }
-    };
+      };
+
+      window.onSonicLoaded(() => {
+        hooksInLoaded();
+      });
+    }
+  };
 
-    return newTarget;
+  return newTarget;
 }
diff --git a/src/components/now-display-form-submit/index.js b/src/components/now-display-form-submit/index.js
index 89f7992..899b6ed 100644
--- a/src/components/now-display-form-submit/index.js
+++ b/src/components/now-display-form-submit/index.js
@@ -4,17 +4,17 @@ import './index.less';
 
 export default class DisplayFormSubmit extends PureComponent {
     handleClick = () => {
-        this.props.enter(this.props.isActive);
+      this.props.enter(this.props.isActive);
     };
 
     render() {
-        const { isActive, text } = this.props;
-        const css = `display-form-submit ${isActive ? 'active' : 'disable'}`;
+      const { isActive, text } = this.props;
+      const css = `display-form-submit ${isActive ? 'active' : 'disable'}`;
 
-        return (
+      return (
             <div id="verify-btn" className={css} onClick={this.handleClick}>
                 {text}
             </div>
-        );
+      );
     }
-}
\ No newline at end of file
+}
diff --git a/src/components/now-display-message-tips/index.js b/src/components/now-display-message-tips/index.js
index 2bea2ce..1bc80d5 100644
--- a/src/components/now-display-message-tips/index.js
+++ b/src/components/now-display-message-tips/index.js
@@ -4,43 +4,43 @@ import ReactDOM from 'react-dom';
 import './index.less';
 
 export default class DisplayMessageTips extends Component {
-    static create(opts) {
-        if (!opts.dom) {
-            opts.dom = document.createElement('div');
-            opts.dom.id = `message-tips-${Date.now()}`;
-            document.body.appendChild(opts.dom);
-        }
-
-        const dom = opts.dom;
-
-        ReactDOM.render(
-            React.createElement(this, opts),
-            dom
-        );
-
-        const remove = function () {
-            if (dom) {
-                ReactDOM.unmountComponentAtNode(dom);
-                document.body.removeChild(dom);
-            }
-        };
-
-        // 自动消失
-        setTimeout(remove, opts.delay || 3000);
-
-        return {
-            remove: remove
-        };
+  static create(opts) {
+    if (!opts.dom) {
+      opts.dom = document.createElement('div');
+      opts.dom.id = `message-tips-${Date.now()}`;
+      document.body.appendChild(opts.dom);
     }
 
-    render() {
-        const { isSuccess, msg } = this.props;
+    const { dom } = opts;
 
-        return (
+    ReactDOM.render(
+      React.createElement(this, opts),
+      dom
+    );
+
+    const remove = function () {
+      if (dom) {
+        ReactDOM.unmountComponentAtNode(dom);
+        document.body.removeChild(dom);
+      }
+    };
+
+    // 自动消失
+    setTimeout(remove, opts.delay || 3000);
+
+    return {
+      remove,
+    };
+  }
+
+  render() {
+    const { isSuccess, msg } = this.props;
+
+    return (
             <div className={'display-message-tips'}>
                 <div className={`icon ${isSuccess ? 'icon-success' : 'icon-err'}`} />
                 <p>{msg}</p>
             </div>
-        );
-    }
+    );
+  }
 }
diff --git a/src/components/now-display-section-title/index.js b/src/components/now-display-section-title/index.js
index 9f2926f..17a760a 100644
--- a/src/components/now-display-section-title/index.js
+++ b/src/components/now-display-section-title/index.js
@@ -3,13 +3,13 @@ import React from 'react';
 import './index.less';
 
 export default function DisplaySectionTitle(props) {
-    const { title, css = '' } = props;
+  const { title, css = '' } = props;
 
-    if (!title) {
-        return null;
-    }
+  if (!title) {
+    return null;
+  }
 
-    return (
-        <div className={'display-section-title ' + css}>{title}</div>
-    );
+  return (
+        <div className={`display-section-title ${css}`}>{title}</div>
+  );
 }
diff --git a/src/components/now-display-verify-identity-form-content/index.js b/src/components/now-display-verify-identity-form-content/index.js
index f74a0be..be9daa2 100644
--- a/src/components/now-display-verify-identity-form-content/index.js
+++ b/src/components/now-display-verify-identity-form-content/index.js
@@ -4,66 +4,66 @@ import device from '@tencent/device';
 import './index.less';
 
 export default class DisplayVerifyIdentityFormContent extends React.PureComponent {
-    constructor(props) {
-        super(props);
-        this.state = {
-            nameValue: '',
-            idInputType: 'tel'
-        };
-    }
+  constructor(props) {
+    super(props);
+    this.state = {
+      nameValue: '',
+      idInputType: 'tel',
+    };
+  }
 
-    componentDidMount() {
-        // 身份证末尾有可能是字母x，iOS 得修改为 text，否则无法输入
-        if (device.isIOS) {
-            this.setState({
-                idInputType: 'text'
-            });
-        }
+  componentDidMount() {
+    // 身份证末尾有可能是字母x，iOS 得修改为 text，否则无法输入
+    if (device.isIOS) {
+      this.setState({
+        idInputType: 'text',
+      });
     }
+  }
 
-    componentWillReceiveProps(props) {
-        const { nameValue } = props;
-        this.setState({ nameValue });
-    }
+  componentWillReceiveProps(props) {
+    const { nameValue } = props;
+    this.setState({ nameValue });
+  }
 
     compositionStartHandler = () => {
-        this._isCompositing = true;
+      this._isCompositing = true;
     };
 
     compositionEndHandler = (e) => {
-        this._isCompositing = false;
-        this.changeHandler(e);
+      this._isCompositing = false;
+      this.changeHandler(e);
     };
 
     changeHandler = (e) => {
-        console.log('changeHandler');
-        e.persist();
+      console.log('changeHandler');
+      e.persist();
 
-        const {
-            handelNameChange
-        } = this.props;
+      const {
+        handelNameChange,
+      } = this.props;
 
-        const value = e.target.value;
+      const { value } = e.target;
 
-        this.setState({ nameValue: value }, () => {
-            if (!this._isCompositing) {
-                console.log('handelNameChangehandel');
-                handelNameChange(e);
-            }
-        });
+      this.setState({ nameValue: value }, () => {
+        if (!this._isCompositing) {
+          console.log('handelNameChangehandel');
+          handelNameChange(e);
+        }
+      });
     };
 
     render() {
-        const {
-            readOnly,
-            idValue,
-            handelIdChange
-        } = this.props;
+      const {
+        readOnly,
+        idValue,
+        handelIdChange,
+      } = this.props;
 
-        const { idInputType } = this.state;
+      const { idInputType } = this.state;
 
-        return (
-            <div className={'display-verify-identity-form-content ' + (readOnly ? 'read-only' : '')}>
+      return (
+            <div className={`display-verify-identity-form-content ${readOnly ? 'read-only' : ''}`}>
                 <div className="row" style={{ borderBottom: '1px solid #f2f2f2' }}>
                     <div className="label">姓名</div>
                     <input
@@ -87,6 +87,6 @@ export default class DisplayVerifyIdentityFormContent extends React.PureComponen
                     />
                 </div>
             </div>
-        );
+      );
     }
 }
diff --git a/src/components/now-display-verify-phone-form-content/index.js b/src/components/now-display-verify-phone-form-content/index.js
index fc6de67..e9036f1 100644
--- a/src/components/now-display-verify-phone-form-content/index.js
+++ b/src/components/now-display-verify-phone-form-content/index.js
@@ -4,20 +4,20 @@ import './index.less';
 
 export default class DisplayVerifyPhoneFormContent extends PureComponent {
     handleClick = () => {
-        this.props.getVerifyCode(this.props.isBtnActive);
+      this.props.getVerifyCode(this.props.isBtnActive);
     };
 
     render() {
-        const {
-            phoneNum,
-            verifyCode,
-            codeBtnText,
-            isBtnActive,
-            onPhoneChange,
-            onCodeChange
-        } = this.props;
+      const {
+        phoneNum,
+        verifyCode,
+        codeBtnText,
+        isBtnActive,
+        onPhoneChange,
+        onCodeChange,
+      } = this.props;
 
-        return (
+      return (
             <div className="display-verify-phone-form-content">
                 <div className="row" style={{ borderBottom: '1px solid #f2f2f2' }}>
                     <input
@@ -47,6 +47,6 @@ export default class DisplayVerifyPhoneFormContent extends PureComponent {
                     </button>
                 </div>
             </div>
-        );
+      );
     }
-}
\ No newline at end of file
+}
diff --git a/src/containers/page-container.js b/src/containers/page-container.js
index de39fb0..294f1a9 100644
--- a/src/containers/page-container.js
+++ b/src/containers/page-container.js
@@ -11,7 +11,7 @@ import thunkMiddleware from 'redux-thunk';
 import { middlewareAPI, middlewareLoginMobile, middlewareReport } from '/middlewares';
 
 export default class PageContainer {
-    /**
+  /**
      *
      * @param RootComponent
      * @param {Object} [opts] 可选参数
@@ -19,122 +19,122 @@ export default class PageContainer {
      * @param {Object} [opts.reducer] redux 的 reducer 配置字典，key为名字，value 为 reducer
      * @param {Object} [opts.initialState] redux 初始化的state，默认值为 window.__initialState
      */
-    constructor(RootComponent, opts = {}) {
-        //=========================================
-        // 1. new store
-        //=========================================
-
-        // 1.1 处理 middleware，必须按照一定顺序插入 store
-        const middlewares = [
-            thunkMiddleware,
-            middlewareAPI,
-            middlewareReport,
-            middlewareLoginMobile,
-            ...(opts.middlewares || [])
-        ];
-
-        // 开发场景下加入 logger 的 middleware
-        if (process.env.NODE_ENV !== 'production') {
-            // 如果 url 中携带了 no_logger=1，则不再使用 redux-logger
-            if (!/no_logger=1/.test(window.location)) {
-                // 具体配置详见: https://github.com/evgenyrodionov/redux-logger#options
-                const { createLogger } = require(`redux-logger`);
-                middlewares.push(createLogger({
-                    // ...options
-                }));
-            }
-        }
+  constructor(RootComponent, opts = {}) {
+    // =========================================
+    // 1. new store
+    // =========================================
+
+    // 1.1 处理 middleware，必须按照一定顺序插入 store
+    const middlewares = [
+      thunkMiddleware,
+      middlewareAPI,
+      middlewareReport,
+      middlewareLoginMobile,
+      ...(opts.middlewares || []),
+    ];
+
+    // 开发场景下加入 logger 的 middleware
+    if (process.env.NODE_ENV !== 'production') {
+      // 如果 url 中携带了 no_logger=1，则不再使用 redux-logger
+      if (!/no_logger=1/.test(window.location)) {
+        // 具体配置详见: https://github.com/evgenyrodionov/redux-logger#options
+        const { createLogger } = require('redux-logger');
+        middlewares.push(createLogger({
+          // ...options
+        }));
+      }
+    }
 
-        // 1.2 处理 reducers
-        // 所用到的reducer，注意这里设置一个默认的，不然在项目未加入任何 reducer 时会有个错误的提示
-        const reducer = { 'default': () => ({}), ...(opts.reducer || {}) };
+    // 1.2 处理 reducers
+    // 所用到的reducer，注意这里设置一个默认的，不然在项目未加入任何 reducer 时会有个错误的提示
+    const reducer = { default: () => ({}), ...(opts.reducer || {}) };
 
-        // 1.3 initialState，默认为 window.__initialState 直出场景下会设置该值
-        const initialState = opts.initialState || (typeof window !== 'undefined') && window.__initialState || {};
+    // 1.3 initialState，默认为 window.__initialState 直出场景下会设置该值
+    const windowInitialState = (typeof window !== 'undefined') ? window.__initialState : {};
+    const initialState = opts.initialState || windowInitialState;
 
-        
 
-        // 1.4 初始化 store
-        this.store = createStore(
-            combineReducers(reducer),
-            initialState,
-            applyMiddleware.apply(null, middlewares)
-        );
+    // 1.4 初始化 store
+    this.store = createStore(
+      combineReducers(reducer),
+      initialState,
+      applyMiddleware.apply(null, middlewares)
+    );
 
-        this.store.reducer = reducer;
-        this.store.middlewares = middlewares;
+    this.store.reducer = reducer;
+    this.store.middlewares = middlewares;
 
-        //=========================================
-        // 2. connect
-        //=========================================
+    // =========================================
+    // 2. connect
+    // =========================================
 
-        // 2.1 获得 connect 结果
-        const Root = RootComponent;
+    // 2.1 获得 connect 结果
+    const Root = RootComponent;
 
-        // 2.2 设置根组件结果
-        this.component = (
+    // 2.2 设置根组件结果
+    this.component = (
             <Provider store={this.store}>
                 <Root />
             </Provider>
-        );
+    );
 
-        this._eventMap = {};
-    }
+    this._eventMap = {};
+  }
 
-    on(eventName, callback) {
-        this._eventMap[eventName] = callback;
-    }
+  on(eventName, callback) {
+    this._eventMap[eventName] = callback;
+  }
 
-    emit(eventName, ...args) {
-        const callback = this._eventMap[eventName];
+  emit(eventName, ...args) {
+    const callback = this._eventMap[eventName];
 
-        if (typeof callback === 'function') {
-            callback(...args);
-        }
+    if (typeof callback === 'function') {
+      callback(...args);
     }
+  }
 
-    /**
+  /**
      * ReactDOM.render 成功时的回调
      * @param {Number} cost ReactDOM.render耗时，单位为ms
      */
-    onReady() {
+  onReady() {
 
-    }
+  }
 
-    init(callback) {
-        try {
-            const containerDom = document.getElementById('container');
-            const self = this;
-            const tStart = Date.now();
-
-            ReactDOM.render(
-                this.component,
-                containerDom,
-                () => {
-                    const tEnd = Date.now();
-
-                    // 成功后判断是否有子元素，如果有则触发 ready 事件
-                    if (containerDom.getElementsByTagName('*').length > 0) {
-                        self.emit('ready', tEnd - tStart);
-                        self.onReady(tEnd - tStart);
-
-                        if (process.env.NODE_ENV !== 'production') {
-                            console.log('ReactDOM.render cost ' + (tEnd - tStart));
-                        }
-                    }
-                }
-            );
-
-            callback(true);
-        } catch (_err) {
-            const err = _err || {};
-
-            if (typeof err === 'object') {
-                // 补充一个标记，用于特殊情况的处理
-                err.__type = 'render';
-            }
+  init(callback) {
+    try {
+      const containerDom = document.getElementById('container');
+      const self = this;
+      const tStart = Date.now();
+
+      ReactDOM.render(
+        this.component,
+        containerDom,
+        () => {
+          const tEnd = Date.now();
 
-            callback(false, err);
+          // 成功后判断是否有子元素，如果有则触发 ready 事件
+          if (containerDom.getElementsByTagName('*').length > 0) {
+            self.emit('ready', tEnd - tStart);
+            self.onReady(tEnd - tStart);
+
+            if (process.env.NODE_ENV !== 'production') {
+              console.log(`ReactDOM.render cost ${tEnd - tStart}`);
+            }
+          }
         }
+      );
+
+      callback(true);
+    } catch (_err) {
+      const err = _err || {};
+
+      if (typeof err === 'object') {
+        // 补充一个标记，用于特殊情况的处理
+        err.__type = 'render';
+      }
+
+      callback(false, err);
     }
+  }
 }
diff --git a/src/datas/now-data-verify-identity/action.js b/src/datas/now-data-verify-identity/action.js
index 37430ea..d865d81 100644
--- a/src/datas/now-data-verify-identity/action.js
+++ b/src/datas/now-data-verify-identity/action.js
@@ -1,6 +1,8 @@
 import _ from '@tencent/util';
+import device from '@tencent/device';
 import { CALL_API, CALL_LOGIN, CALL_REPORT } from '/middlewares';
 import { checkIfIdValid, getCheckedName } from '/business/project-verify-identity';
+import WhiteList from '../../business/base-report/whitelist';
 
 export const IDENTITY_INFO_REQUEST = 'IDENTITY_INFO_REQUEST';
 export const IDENTITY_INFO_REQUEST_SUCCESS = 'IDENTITY_INFO_REQUEST_SUCCESS';
@@ -12,8 +14,9 @@ export const IDENTITY_SHOW_VERIFY_PHONE = 'IDENTITY_SHOW_VERIFY_PHONE';
 export const IDENTITY_CLEAR_FORM = 'IDENTITY_CLEAR_FORM';
 
 function getQQ() {
-    const u = _.getCookie('uin');
-    return u && parseInt(u.replace(/\D/g, ''), 10) || null;
+  const u = _.getCookie('uin');
+  const res = u && parseInt(u.replace(/\D/g, ''), 10);
+  return res || null;
 }
 
 /**
@@ -24,82 +27,106 @@ function getQQ() {
  * @param {Object} [opts] 额外请求参数
  */
 function fetchVerifyIdentity(name, idcard, opts) {
-    const reqOpts = Object.assign({
-        // 	真实姓名
-        name: name,
-
-        // 身份证号
-        idcard: idcard,
-
-        // 财付通的QQ号
-        suin: _.query('from_lottery') ? getQQ() : _.uin(),
-
-        // 财付通QQ号的skey
-        skey: _.getCookie('skey') || 'skey',
-
-        // 认证类型，0-仅财付通实名认证（默认），1-优先征信认证，征信认证不通过降级成财付通认证
-        target_auth_type: _.query('from_lottery') ? 0 : 1
-    }, opts);
-
-    // phone	否	string	验证手机号，不是必填，只有财付通检查到是招行卡需要验证下手机号是否对上才需要
-    // verify_code	否	int	验证手机验证码，不是必填，只有财付通检查到是招行卡需要验证下手机号是否对上才需要
-
-    return {
-        [CALL_API]: {
-            types: [IDENTITY_INFO_REQUEST, IDENTITY_INFO_REQUEST_SUCCESS, IDENTITY_INFO_REQUEST_FAIL],
-            url: '/cgi-bin/ilive/auth/get_tenpay_auth_info',
-            type: 'get',
-            data: reqOpts
-        },
-
-        // 34450607 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求量
-        // 34450608 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求成功
-        // 34450609 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求失败
-        [CALL_REPORT]: {
-            monitor: {
-                [IDENTITY_INFO_REQUEST]: 34450607,
-                [IDENTITY_INFO_REQUEST_SUCCESS]: 34450608,
-                [IDENTITY_INFO_REQUEST_FAIL]: 34450609
-            }
-        },
-
-        [CALL_LOGIN]: { connectqq: true}
+  let data = {
+    // 	真实姓名
+    name,
+
+    // 身份证号
+    idcard,
+
+    // 认证类型，0-仅财付通实名认证（默认），1-优先征信认证，征信认证不通过降级成财付通认证
+    target_auth_type: _.query('from_lottery') ? 0 : 1,
+  };
+    // 财付通QQ号的skey
+  const skey = _.getCookie('skey');
+  if (skey) {
+    // 如果存在skey则直接传skey
+    data = {
+      ...data,
+      skey,
+      // 财付通的QQ号
+      suin: _.query('from_lottery') ? getQQ() : _.uin(),
     };
+  } else {
+    // iOS和安卓在cookie中的key是不同的，所以需要分开处理
+    if (device.isIOS) {
+      data = {
+        ...data,
+        qq_openid: _.getCookie('original_id'),
+        qq_token: _.getCookie('original_key'),
+        qq_appid: _.getCookie('original_auth_appid'),
+      };
+    } else {
+      data = {
+        ...data,
+        qq_openid: _.getCookie('oepnid'),
+        qq_token: _.getCookie('access_token'),
+        qq_appid: _.getCookie('appid'),
+      };
+    }
+  }
+  const reqOpts = Object.assign(data, opts);
+
+  // 由于每天的量不多，因此可以全量上报，毕竟这个接口很重要
+  WhiteList.report('get_tenpay_auth_info reqOpts', reqOpts, { all: true });
+
+  // phone	否	string	验证手机号，不是必填，只有财付通检查到是招行卡需要验证下手机号是否对上才需要
+  // verify_code	否	int	验证手机验证码，不是必填，只有财付通检查到是招行卡需要验证下手机号是否对上才需要
+
+  return {
+    [CALL_API]: {
+      types: [IDENTITY_INFO_REQUEST, IDENTITY_INFO_REQUEST_SUCCESS, IDENTITY_INFO_REQUEST_FAIL],
+      url: '/cgi-bin/ilive/auth/get_tenpay_auth_info',
+      type: 'get',
+      data: reqOpts,
+    },
+
+    // 34450607 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求量
+    // 34450608 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求成功
+    // 34450609 【now直播H5版个人中心-CGI】get_tenpay_auth_info请求失败
+    [CALL_REPORT]: {
+      monitor: {
+        [IDENTITY_INFO_REQUEST]: 34450607,
+        [IDENTITY_INFO_REQUEST_SUCCESS]: 34450608,
+        [IDENTITY_INFO_REQUEST_FAIL]: 34450609,
+      },
+    },
+
+    [CALL_LOGIN]: { connectqq: true },
+  };
 }
 
 export function verifyIdentity(name, idcard, opts) {
-    return (dispatch, getState) => {
-        return dispatch(fetchVerifyIdentity(name, idcard, opts));
-    };
+  return dispatch => dispatch(fetchVerifyIdentity(name, idcard, opts));
 }
 
 export function setInputName(inputValue) {
-    return {
-        type: IDENTITY_SET_INPUT_NAME,
-        data: {
-            nameValue: getCheckedName(inputValue)
-        }
-    };
+  return {
+    type: IDENTITY_SET_INPUT_NAME,
+    data: {
+      nameValue: getCheckedName(inputValue),
+    },
+  };
 }
 
 export function setInputId(inputValue) {
-    return {
-        type: IDENTITY_SET_INPUT_ID,
-        data: {
-            idValue: inputValue,
-            isIdValid: checkIfIdValid(inputValue)
-        }
-    };
+  return {
+    type: IDENTITY_SET_INPUT_ID,
+    data: {
+      idValue: inputValue,
+      isIdValid: checkIfIdValid(inputValue),
+    },
+  };
 }
 
 export function showVerifyPhone() {
-    return {
-        type: IDENTITY_SHOW_VERIFY_PHONE
-    };
+  return {
+    type: IDENTITY_SHOW_VERIFY_PHONE,
+  };
 }
 
 export function clearVerifyIdentityForm() {
-    return {
-        type: IDENTITY_CLEAR_FORM
-    };
+  return {
+    type: IDENTITY_CLEAR_FORM,
+  };
 }
diff --git a/src/datas/now-data-verify-identity/reducer.js b/src/datas/now-data-verify-identity/reducer.js
index cb20258..488bec7 100644
--- a/src/datas/now-data-verify-identity/reducer.js
+++ b/src/datas/now-data-verify-identity/reducer.js
@@ -1,104 +1,104 @@
 import {
-    IDENTITY_CLEAR_FORM,
-    IDENTITY_INFO_REQUEST,
-    IDENTITY_INFO_REQUEST_FAIL,
-    IDENTITY_INFO_REQUEST_SUCCESS,
-    IDENTITY_SET_INPUT_ID,
-    IDENTITY_SET_INPUT_NAME,
-    IDENTITY_SHOW_VERIFY_PHONE
+  IDENTITY_CLEAR_FORM,
+  IDENTITY_INFO_REQUEST,
+  IDENTITY_INFO_REQUEST_FAIL,
+  IDENTITY_INFO_REQUEST_SUCCESS,
+  IDENTITY_SET_INPUT_ID,
+  IDENTITY_SET_INPUT_NAME,
+  IDENTITY_SHOW_VERIFY_PHONE,
 } from './action';
 
 /**
  * @type {Object}
  */
 const initialState = {
-    /**
+  /**
      * 用户输入的姓名
      * @type {String}
      */
-    nameValue: '',
+  nameValue: '',
 
-    /**
+  /**
      * 用户输入的身份证ID
      * @type {String}
      */
-    idValue: '',
+  idValue: '',
 
-    /**
+  /**
      * 用户输入的身份证ID是否合法
      * @type {Boolean}
      */
-    isIdValid: false,
+  isIdValid: false,
 
-    /**
+  /**
      * 是否正在校验中，避免用户重复点击时发出多条请求
      * @type {Boolean}
      */
-    isVerifyLoading: false,
+  isVerifyLoading: false,
 
-    /**
+  /**
      * 发送验证接口之后，后台返回成功数据
      */
-    resData: null,
+  resData: null,
 
-    /**
+  /**
      * 发送验证接口之后，后台返回出错数据
      */
-    resError: null,
+  resError: null,
 
-    /**
+  /**
      * 是否需要再次校验手机号码，在某些场景下是需要的
      * @type {Boolean}
      */
-    shouldVerifyPhone: false
+  shouldVerifyPhone: false,
 };
 
 export default function verifyIdentityInfo(state = initialState, action) {
-    const { data, type } = action;
-    const update = {};
-
-    switch (type) {
-        case IDENTITY_CLEAR_FORM:
-            update.nameValue = '';
-            update.idValue = '';
-            update.isIdValid = false;
-            update.shouldVerifyPhone = false;
-            break;
-
-        case IDENTITY_INFO_REQUEST:
-            update.isVerifyLoading = true;
-            update.resData = null;
-            update.resError = null;
-            break;
-
-        case IDENTITY_INFO_REQUEST_SUCCESS:
-            update.isVerifyLoading = false;
-            update.resData = data;
-            update.resError = null;
-            break;
-
-        case IDENTITY_INFO_REQUEST_FAIL:
-            update.isVerifyLoading = false;
-            update.resData = null;
-            update.resError = data.error;
-            break;
-
-        case IDENTITY_SET_INPUT_NAME:
-            update.nameValue = data.nameValue;
-            break;
-
-        case IDENTITY_SET_INPUT_ID:
-            update.idValue = data.idValue;
-            update.isIdValid = data.isIdValid;
-            break;
-
-        case IDENTITY_SHOW_VERIFY_PHONE:
-            update.shouldVerifyPhone = true;
-            break;
-
-        default:
-            break;
-    }
-
-    return Object.keys(update).length ? Object.assign({}, state, update) : state;
+  const { data, type } = action;
+  const update = {};
+
+  switch (type) {
+    case IDENTITY_CLEAR_FORM:
+      update.nameValue = '';
+      update.idValue = '';
+      update.isIdValid = false;
+      update.shouldVerifyPhone = false;
+      break;
+
+    case IDENTITY_INFO_REQUEST:
+      update.isVerifyLoading = true;
+      update.resData = null;
+      update.resError = null;
+      break;
+
+    case IDENTITY_INFO_REQUEST_SUCCESS:
+      update.isVerifyLoading = false;
+      update.resData = data;
+      update.resError = null;
+      break;
+
+    case IDENTITY_INFO_REQUEST_FAIL:
+      update.isVerifyLoading = false;
+      update.resData = null;
+      update.resError = data.error;
+      break;
+
+    case IDENTITY_SET_INPUT_NAME:
+      update.nameValue = data.nameValue;
+      break;
+
+    case IDENTITY_SET_INPUT_ID:
+      update.idValue = data.idValue;
+      update.isIdValid = data.isIdValid;
+      break;
+
+    case IDENTITY_SHOW_VERIFY_PHONE:
+      update.shouldVerifyPhone = true;
+      break;
+
+    default:
+      break;
+  }
+
+  return Object.keys(update).length ? Object.assign({}, state, update) : state;
 }
diff --git a/src/datas/now-data-verify-phone/action.js b/src/datas/now-data-verify-phone/action.js
index b850b5f..237ad41 100644
--- a/src/datas/now-data-verify-phone/action.js
+++ b/src/datas/now-data-verify-phone/action.js
@@ -18,103 +18,103 @@ export const PHONE_CLEAR_FORM = 'PHONE_CLEAR_FORM';
  * 获取验证码 http://linkstar2.oa.com/#494-0-1-2188
  */
 function fetchVerifyCode(phone) {
-    return {
-        [CALL_API]: {
-            types: [VERIFY_CODE_INFO_REQUEST, VERIFY_CODE_INFO_REQUEST_SUCCESS, VERIFY_CODE_INFO_REQUEST_FAIL],
-            url: '//now.qq.com/cgi-bin/ilive/auth/get_verify_code',
-            type: 'get',
-            data: {
-                phone: phone
-            }
-        },
-
-        // 34450593 【now直播H5版个人中心-CGI】get_verify_code请求量
-        // 34450594 【now直播H5版个人中心-CGI】get_verify_code请求成功
-        // 34450595 【now直播H5版个人中心-CGI】get_verify_code请求失败
-        [CALL_REPORT]: {
-            monitor: {
-                [VERIFY_CODE_INFO_REQUEST]: 34450593,
-                [VERIFY_CODE_INFO_REQUEST_SUCCESS]: 34450594,
-                [VERIFY_CODE_INFO_REQUEST_FAIL]: 34450595
-            }
-        }
-
-        // [CALL_LOGIN]: {}
-    };
+  return {
+    [CALL_API]: {
+      types: [VERIFY_CODE_INFO_REQUEST, VERIFY_CODE_INFO_REQUEST_SUCCESS, VERIFY_CODE_INFO_REQUEST_FAIL],
+      url: '//now.qq.com/cgi-bin/ilive/auth/get_verify_code',
+      type: 'get',
+      data: {
+        phone,
+      },
+    },
+
+    // 34450593 【now直播H5版个人中心-CGI】get_verify_code请求量
+    // 34450594 【now直播H5版个人中心-CGI】get_verify_code请求成功
+    // 34450595 【now直播H5版个人中心-CGI】get_verify_code请求失败
+    [CALL_REPORT]: {
+      monitor: {
+        [VERIFY_CODE_INFO_REQUEST]: 34450593,
+        [VERIFY_CODE_INFO_REQUEST_SUCCESS]: 34450594,
+        [VERIFY_CODE_INFO_REQUEST_FAIL]: 34450595,
+      },
+    },
+
+    // [CALL_LOGIN]: {}
+  };
 }
 
 /**
  * 校验验证码
  */
 function fetchCheckVerifyCode(phone, code) {
-    return {
-        [CALL_API]: {
-            types: [CHECK_VERIFY_CODE_INFO_REQUEST, CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS, CHECK_VERIFY_CODE_INFO_REQUEST_FAIL],
-            url: '//now.qq.com/cgi-bin/ilive/auth/check_verify_code',
-            type: 'get',
-            data: {
-                phone: phone,
-                verify_code: code
-            }
-        },
-
-        // 34450596 【now直播H5版个人中心-CGI】check_verify_code请求量
-        // 34450597 【now直播H5版个人中心-CGI】check_verify_code请求成功
-        // 34450598 【now直播H5版个人中心-CGI】check_verify_code请求失败
-        [CALL_REPORT]: {
-            monitor: {
-                [CHECK_VERIFY_CODE_INFO_REQUEST]: 34450596,
-                [CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS]: 34450597,
-                [CHECK_VERIFY_CODE_INFO_REQUEST_FAIL]: 34450598
-            }
-        },
-
-        [CALL_LOGIN]: { connectqq: true}
-    };
+  return {
+    [CALL_API]: {
+      types: [
+        CHECK_VERIFY_CODE_INFO_REQUEST,
+        CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS,
+        CHECK_VERIFY_CODE_INFO_REQUEST_FAIL,
+      ],
+      url: '//now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+      type: 'get',
+      data: {
+        phone,
+        verify_code: code,
+      },
+    },
+
+    // 34450596 【now直播H5版个人中心-CGI】check_verify_code请求量
+    // 34450597 【now直播H5版个人中心-CGI】check_verify_code请求成功
+    // 34450598 【now直播H5版个人中心-CGI】check_verify_code请求失败
+    [CALL_REPORT]: {
+      monitor: {
+        [CHECK_VERIFY_CODE_INFO_REQUEST]: 34450596,
+        [CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS]: 34450597,
+        [CHECK_VERIFY_CODE_INFO_REQUEST_FAIL]: 34450598,
+      },
+    },
+
+    [CALL_LOGIN]: { connectqq: true },
+  };
 }
 
 export function getVerifyCode(phone) {
-    return (dispatch, getState) => {
-        return dispatch(fetchVerifyCode(phone));
-    };
+  return dispatch => dispatch(fetchVerifyCode(phone));
 }
 
 export function checkVerifyCode(phone, code) {
-    return (dispatch, getState) => {
-        return dispatch(fetchCheckVerifyCode(phone, code));
-    };
+  return dispatch => dispatch(fetchCheckVerifyCode(phone, code));
 }
 
 export function setInputPhone(inputValue) {
-    const phoneNum = getCheckedPhone(inputValue);
-
-    return {
-        type: PHONE_SET_INPUT_PHONE,
-        data: {
-            phoneNum: phoneNum,
-            isPhoneValid: checkIfPhoneValid(phoneNum)
-        }
-    };
+  const phoneNum = getCheckedPhone(inputValue);
+
+  return {
+    type: PHONE_SET_INPUT_PHONE,
+    data: {
+      phoneNum,
+      isPhoneValid: checkIfPhoneValid(phoneNum),
+    },
+  };
 }
 
 export function setInputCode(inputValue) {
-    return {
-        type: PHONE_SET_INPUT_CODE,
-        data: {
-            verifyCode: getCheckedCode(inputValue)
-        }
-    };
+  return {
+    type: PHONE_SET_INPUT_CODE,
+    data: {
+      verifyCode: getCheckedCode(inputValue),
+    },
+  };
 }
 
 export function sendCountdown(data) {
-    return {
-        type: PHONE_SEND_COUNTDOWN,
-        data
-    };
+  return {
+    type: PHONE_SEND_COUNTDOWN,
+    data,
+  };
 }
 
 export function clearVerifyPhoneForm() {
-    return {
-        type: PHONE_CLEAR_FORM
-    };
+  return {
+    type: PHONE_CLEAR_FORM,
+  };
 }
diff --git a/src/datas/now-data-verify-phone/reducer.js b/src/datas/now-data-verify-phone/reducer.js
index cbf765e..3a6f7b2 100644
--- a/src/datas/now-data-verify-phone/reducer.js
+++ b/src/datas/now-data-verify-phone/reducer.js
@@ -1,115 +1,115 @@
 import {
-    CHECK_VERIFY_CODE_INFO_REQUEST,
-    CHECK_VERIFY_CODE_INFO_REQUEST_FAIL,
-    CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS,
-    PHONE_CLEAR_FORM,
-    PHONE_SEND_COUNTDOWN,
-    PHONE_SET_INPUT_CODE,
-    PHONE_SET_INPUT_PHONE,
-    VERIFY_CODE_INFO_REQUEST,
-    VERIFY_CODE_INFO_REQUEST_FAIL,
-    VERIFY_CODE_INFO_REQUEST_SUCCESS
+  CHECK_VERIFY_CODE_INFO_REQUEST,
+  CHECK_VERIFY_CODE_INFO_REQUEST_FAIL,
+  CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS,
+  PHONE_CLEAR_FORM,
+  PHONE_SEND_COUNTDOWN,
+  PHONE_SET_INPUT_CODE,
+  PHONE_SET_INPUT_PHONE,
+  VERIFY_CODE_INFO_REQUEST,
+  VERIFY_CODE_INFO_REQUEST_FAIL,
+  VERIFY_CODE_INFO_REQUEST_SUCCESS,
 } from './action';
 
 /**
  * @type {Object}
  */
 const initialState = {
-    /**
+  /**
      * 用户输入的手机号
      * @type {String}
      */
-    phoneNum: '',
+  phoneNum: '',
 
-    /**
+  /**
      * 用户输入的手机验证码
      * @type {String}
      */
-    verifyCode: '',
+  verifyCode: '',
 
-    /**
+  /**
      * 用户输入的手机号码是否合法
      * @type {Boolean}
      */
-    isPhoneValid: false,
+  isPhoneValid: false,
 
-    /**
+  /**
      * 是否处于验证码倒计时时间段
      * @type {Boolean}
      */
-    isCountingDown: false,
+  isCountingDown: false,
 
-    /**
+  /**
      * 发送验证码按钮上显示的文案
      * @type {String}
      */
-    codeBtnText: '获取验证码',
+  codeBtnText: '获取验证码',
 
-    /**
+  /**
      * 是否正在获取验证码中，避免用户重复点击时发出多条请求
      * @type {Boolean}
      */
-    isGetLoading: false,
+  isGetLoading: false,
 
-    /**
+  /**
      * 是否正在获取验证码中，避免用户重复点击时发出多条请求
      * @type {Boolean}
      */
-    isCheckLoading: false
+  isCheckLoading: false,
 };
 
 export default function verifyPhoneInfo(state = initialState, action) {
-    const { data, type } = action;
-    const update = {};
-
-    switch (type) {
-        case PHONE_CLEAR_FORM:
-            update.phoneNum = '';
-            update.verifyCode = '';
-            update.isPhoneValid = false;
-            break;
-
-        case VERIFY_CODE_INFO_REQUEST:
-            update.isGetLoading = true;
-            break;
-
-        case VERIFY_CODE_INFO_REQUEST_SUCCESS:
-            update.isGetLoading = false;
-            break;
-
-        case VERIFY_CODE_INFO_REQUEST_FAIL:
-            update.isGetLoading = false;
-            break;
-
-        case CHECK_VERIFY_CODE_INFO_REQUEST:
-            update.isCheckLoading = true;
-            break;
-
-        case CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS:
-            update.isCheckLoading = false;
-            break;
-
-        case CHECK_VERIFY_CODE_INFO_REQUEST_FAIL:
-            update.isCheckLoading = false;
-            break;
-
-        case PHONE_SET_INPUT_PHONE:
-            update.phoneNum = data.phoneNum;
-            update.isPhoneValid = data.isPhoneValid;
-            break;
-
-        case PHONE_SET_INPUT_CODE:
-            update.verifyCode = data.verifyCode;
-            break;
-
-        case PHONE_SEND_COUNTDOWN:
-            update.codeBtnText = data.codeBtnText;
-            update.isCountingDown = data.isCountingDown;
-            break;
-
-        default:
-            break;
-    }
-
-    return Object.keys(update).length ? Object.assign({}, state, update) : state;
+  const { data, type } = action;
+  const update = {};
+
+  switch (type) {
+    case PHONE_CLEAR_FORM:
+      update.phoneNum = '';
+      update.verifyCode = '';
+      update.isPhoneValid = false;
+      break;
+
+    case VERIFY_CODE_INFO_REQUEST:
+      update.isGetLoading = true;
+      break;
+
+    case VERIFY_CODE_INFO_REQUEST_SUCCESS:
+      update.isGetLoading = false;
+      break;
+
+    case VERIFY_CODE_INFO_REQUEST_FAIL:
+      update.isGetLoading = false;
+      break;
+
+    case CHECK_VERIFY_CODE_INFO_REQUEST:
+      update.isCheckLoading = true;
+      break;
+
+    case CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS:
+      update.isCheckLoading = false;
+      break;
+
+    case CHECK_VERIFY_CODE_INFO_REQUEST_FAIL:
+      update.isCheckLoading = false;
+      break;
+
+    case PHONE_SET_INPUT_PHONE:
+      update.phoneNum = data.phoneNum;
+      update.isPhoneValid = data.isPhoneValid;
+      break;
+
+    case PHONE_SET_INPUT_CODE:
+      update.verifyCode = data.verifyCode;
+      break;
+
+    case PHONE_SEND_COUNTDOWN:
+      update.codeBtnText = data.codeBtnText;
+      update.isCountingDown = data.isCountingDown;
+      break;
+
+    default:
+      break;
+  }
+
+  return Object.keys(update).length ? Object.assign({}, state, update) : state;
 }
diff --git a/src/node/lib/baseController.js b/src/node/lib/baseController.js
index d9cae68..056fdde 100644
--- a/src/node/lib/baseController.js
+++ b/src/node/lib/baseController.js
@@ -14,135 +14,135 @@ import Koa from 'koa';
 import compress from 'koa-compress';
 
 function checkConfig(config) {
-    const {
-        html,
-        Page, // 需要渲染 Page  实例
-        cacheConfig,
-        l5,
-        report
-    } = config;
-
-    if (typeof html === 'undefined') {
-        throw new Error('缺少 静态资源模板 html');
+  const {
+    html,
+    Page, // 需要渲染 Page  实例
+    cacheConfig,
+    l5,
+    report,
+  } = config;
+
+  if (typeof html === 'undefined') {
+    throw new Error('缺少 静态资源模板 html');
+  }
+
+  if (typeof Page === 'undefined') {
+    throw new Error('缺少 渲染入口对象 Page');
+  }
+
+  if (typeof l5 === 'undefined') {
+    console.warn('没有 l5 id');
+  }
+
+  if (typeof report === 'undefined') {
+    console.warn('没有 上报 id');
+  }
+
+  if (cacheConfig) {
+    cacheConfig.expire = cacheConfig.expire || 1000 * 60 * 5; // 默认缓存时间5分钟
+
+    if (!cacheConfig.name) {
+      throw new Error('没有 cacheConfig.name');
     }
 
-    if (typeof Page === 'undefined') {
-        throw new Error('缺少 渲染入口对象 Page');
+    if (cacheConfig.key instanceof Array) {
+      if (cacheConfig.key.length <= 0) {
+        throw new Error('cacheConfig.key 的长度不能为 0');
+      }
+    } else {
+      throw new Error('cacheConfig.key 必须为数组');
     }
+  }
 
-    if (typeof l5 === 'undefined') {
-        console.warn('没有 l5 id');
-    }
-
-    if (typeof report === 'undefined') {
-        console.warn('没有 上报 id');
-    }
-
-    if (cacheConfig) {
-        cacheConfig.expire = cacheConfig.expire || 1000 * 60 * 5; //默认缓存时间5分钟
-
-        if (!cacheConfig.name) {
-            throw new Error('没有 cacheConfig.name');
-        }
+  // const checkPage = new Page()
 
-        if (cacheConfig.key instanceof Array) {
-            if (cacheConfig.key.length <= 0) {
-                throw new Error('cacheConfig.key 的长度不能为 0');
-            }
-        } else {
-            throw new Error('cacheConfig.key 必须为数组');
-        }
-    }
-
-    // const checkPage = new Page()
-
-    // if(typeof checkPage.render !== 'function') {
-    //   throw new Error('Page 实例没有提供 render 方法')
-    // }
+  // if(typeof checkPage.render !== 'function') {
+  //   throw new Error('Page 实例没有提供 render 方法')
+  // }
 
-    // if(typeof checkPage.fetch !== 'function') {
-    //   logger.warn('Page 实例没有提供 fetch 方法，请确定是否不添加 fetch')
-    // }
+  // if(typeof checkPage.fetch !== 'function') {
+  //   logger.warn('Page 实例没有提供 fetch 方法，请确定是否不添加 fetch')
+  // }
 
-    // if(typeof checkPage.component === 'undefined') {
-    //   throw new Error('Page 实例没有挂载 component ')
-    // }
+  // if(typeof checkPage.component === 'undefined') {
+  //   throw new Error('Page 实例没有挂载 component ')
+  // }
 
-    // if(typeof checkPage.store === 'undefined') {
-    //   throw new Error('Page 实例没有挂载 store')
-    // }
+  // if(typeof checkPage.store === 'undefined') {
+  //   throw new Error('Page 实例没有挂载 store')
+  // }
 }
 
 // 直出的 controller 创建
 const createController = (config) => {
-    const {
-        html, // html 模板
-        needLogin = false, //是否需要登录验证
-        Page, // 需要渲染 Page  实例
-        queryKey,
-        l5 = {}, //l5 相关配置
-        report = {}, // 上报相关配置
-        sonicDiff = false // 是否启用 sonicDiff
-    } = config;
-
-    Object.assign(report.dc, { // 固定用这几个接口
-        cgi: 112700012,
-        cache: 113000362, // 读取 cmem 中的缓存用时
-        render: 112700013, // react render 方法的耗时
-        response: 112700033, // 走 render 方法时的耗时
-        cacheResponse: 113000361, // 使用缓存时，整个请求耗时
-        staticResponse: 112700039 // 走静态资源时，整个请求耗时
-    });
-
-    const app = new Koa();
-
-    checkConfig(config);
-
-    DB.setL5Map(l5.cgi);
-
-    // 会创建 __react__
-    app.use(domainMiddleware({
-        monitorId: 2544,
-        Page
-    }));
-
-    // 如果 query 含有 use_html 则不做 SSR 直接返回静态 html
-    app.use(staticMiddleware({
-        html,
-        report
+  const {
+    html, // html 模板
+    needLogin = false, // 是否需要登录验证
+    Page, // 需要渲染 Page  实例
+    queryKey,
+    l5 = {}, // l5 相关配置
+    report = {}, // 上报相关配置
+    sonicDiff = false, // 是否启用 sonicDiff
+  } = config;
+
+  Object.assign(report.dc, { // 固定用这几个接口
+    cgi: 112700012,
+    cache: 113000362, // 读取 cmem 中的缓存用时
+    render: 112700013, // react render 方法的耗时
+    response: 112700033, // 走 render 方法时的耗时
+    cacheResponse: 113000361, // 使用缓存时，整个请求耗时
+    staticResponse: 112700039, // 走静态资源时，整个请求耗时
+  });
+
+  const app = new Koa();
+
+  checkConfig(config);
+
+  DB.setL5Map(l5.cgi);
+
+  // 会创建 __react__
+  app.use(domainMiddleware({
+    monitorId: 2544,
+    Page,
+  }));
+
+  // 如果 query 含有 use_html 则不做 SSR 直接返回静态 html
+  app.use(staticMiddleware({
+    html,
+    report,
+  }));
+
+  // 需要登录的时候
+  if (needLogin) app.use(loginMiddleware(config));
+
+  if (queryKey && queryKey.length > 0) {
+    app.use(verificationMiddleware(queryKey)); // 参数校验
+  }
+
+  // if(cacheConfig) {
+  // 	app.use(cacheMiddleware(cacheConfig)); // 缓存校验
+  // }
+
+  app.use(cgiMiddleware(config));
+
+  app.use(renderMiddleware(config));
+
+  if (sonicDiff) {
+    // sonic 中间件
+    app.use(sonicMiddleware(config));
+
+    // gzip
+    app.use(compress({
+      filter(contentType) {
+        return /text/i.test(contentType);
+      },
+      threshold: 2048,
+      flush: require('zlib').Z_SYNC_FLUSH,
     }));
+  }
 
-    // 需要登录的时候
-    if (needLogin) app.use(loginMiddleware(config));
-
-    if (queryKey && queryKey.length > 0) {
-        app.use(verificationMiddleware(queryKey)); // 参数校验
-    }
-
-    // if(cacheConfig) {
-    // 	app.use(cacheMiddleware(cacheConfig)); // 缓存校验
-    // }
-
-    app.use(cgiMiddleware(config));
-
-    app.use(renderMiddleware(config));
-
-    if (sonicDiff) {
-        // sonic 中间件
-        app.use(sonicMiddleware(config));
-
-        // gzip
-        app.use(compress({
-            filter: function (content_type) {
-                return /text/i.test(content_type);
-            },
-            threshold: 2048,
-            flush: require('zlib').Z_SYNC_FLUSH
-        }));
-    }
-
-    // return (req, res) => app.callback()(req, res);
-    return app.callback();
+  // return (req, res) => app.callback()(req, res);
+  return app.callback();
 };
 
 export default createController;
diff --git a/src/node/lib/init.js b/src/node/lib/init.js
index 5ae6349..947cbcf 100644
--- a/src/node/lib/init.js
+++ b/src/node/lib/init.js
@@ -1,69 +1,62 @@
 // init.js 注入了各种全局变量；用于模拟浏览器环境
 
-global.atob = (str) => {
-    return Buffer.from(str, 'base64').toString('binary');
-}; // 兼容 atob 方法
+global.atob = str => Buffer.from(str, 'base64').toString('binary'); // 兼容 atob 方法
 
 if (!global.IS_MOCK_WINDOW) {
-    global.IS_MOCK_WINDOW = true;
-    global.Promise = Promise;
-    global.IS_SERVER = true;
-    global.Image = function () {};
+  global.IS_MOCK_WINDOW = true;
+  global.Promise = Promise;
+  global.IS_SERVER = true;
+  global.Image = function () {};
 
-    Object.defineProperties(global, {
-        document: {
-            get() {
-                if (process.domain && process.domain.document) {
-                    return process.domain.document;
-                } else {
-                    return undefined;
-                }
-            }
-        },
-        // window: {
-        //     get() {
-        //         if (process.domain && process.domain.window) {
-        //             return process.domain.window;
-        //         } else {
-        //             return undefined;
-        //         }
-        //     }
-        // },
-        navigator: {
-            get() {
-                if (process.domain && process.domain.navigator) {
-                    return process.domain.navigator;
-                } else {
-                    return undefined;
-                }
-            }
-        },
-        location: {
-            get() {
-                if (process.domain && process.domain.location) {
-                    return process.domain.location;
-                } else {
-                    return undefined;
-                }
-            }
-        },
-        request: {
-            get() {
-                if (process.domain && process.domain.request) {
-                    return process.domain.request;
-                } else {
-                    return undefined;
-                }
-            }
-        },
-        DEBUG: {
-            get() {
-                if (process.domain && process.domain.DEBUG) {
-                    return process.domain.DEBUG;
-                } else {
-                    return undefined;
-                }
-            }
+  Object.defineProperties(global, {
+    document: {
+      get() {
+        if (process.domain && process.domain.document) {
+          return process.domain.document;
         }
-    });
+        return undefined;
+      },
+    },
+    // window: {
+    //     get() {
+    //         if (process.domain && process.domain.window) {
+    //             return process.domain.window;
+    //         } else {
+    //             return undefined;
+    //         }
+    //     }
+    // },
+    navigator: {
+      get() {
+        if (process.domain && process.domain.navigator) {
+          return process.domain.navigator;
+        }
+        return undefined;
+      },
+    },
+    location: {
+      get() {
+        if (process.domain && process.domain.location) {
+          return process.domain.location;
+        }
+        return undefined;
+      },
+    },
+    request: {
+      get() {
+        if (process.domain && process.domain.request) {
+          return process.domain.request;
+        }
+        return undefined;
+      },
+    },
+    DEBUG: {
+      get() {
+        if (process.domain && process.domain.DEBUG) {
+          return process.domain.DEBUG;
+        }
+        return undefined;
+      },
+    },
+  });
 }
diff --git a/src/node/lib/middlewares/cacheMiddleware.js b/src/node/lib/middlewares/cacheMiddleware.js
index 707619f..373a1b4 100644
--- a/src/node/lib/middlewares/cacheMiddleware.js
+++ b/src/node/lib/middlewares/cacheMiddleware.js
@@ -2,85 +2,85 @@ import reactCache from '../reactCache';
 import { logger, monitor, dcReport } from '../utils';
 
 export default function createCacheMiddleware(config) {
-    const {
-        htmlPath,
-        report,
-        cacheConfig
-    } = config;
-
-    return function cacheMiddleware(request, response, next) {
-        /* 检查是否应该有缓存 */
-        const useCache = request.query.use_cache !== '0';  // 是否强制不使用缓存
-
-        if (!useCache) {
-            next();
-            return;
+  const {
+    htmlPath,
+    report,
+    cacheConfig,
+  } = config;
+
+  return function cacheMiddleware(request, response, next) {
+    /* 检查是否应该有缓存 */
+    const useCache = request.query.use_cache !== '0';  // 是否强制不使用缓存
+
+    if (!useCache) {
+      next();
+      return;
+    }
+
+    request.__react__.useCache = useCache; // 设置相关标志位
+    /* name + key 作为 cacheKey */
+    let cacheKey = cacheConfig.name;
+
+    for (let i = 0; i < cacheConfig.key.length; i++) {
+      const key = cacheConfig.key[i];
+      if (request.query[key]) {
+        cacheKey += request.query[key];
+      } else {
+        logger.warn(`未带参数${key}, 无法读取缓存`);
+        next();
+        return;
+      }
+    }
+
+    request.__react__.cacheKey = cacheKey;
+
+    const cacheRequestStartTime = Date.now();
+
+    reactCache
+      .get(cacheKey)
+      .then((data) => {
+        if (!data) {
+          logger.info('没有发现缓存');
+          return;
         }
 
-        request.__react__.useCache = useCache; // 设置相关标志位
-        /* name + key 作为 cacheKey */
-        let cacheKey = cacheConfig.name;
-
-        for (let i = 0; i < cacheConfig.key.length; i++) {
-            const key = cacheConfig.key[i];
-            if (request.query[key]) {
-                cacheKey += request.query[key];
-            } else {
-                logger.warn(`未带参数${key}, 无法读取缓存`);
-                next();
-                return;
-            }
+        let cacheData = null;
+
+        try {
+          cacheData = JSON.parse(data);
+        } catch (e) {
+          logger.info('转换 cmem 缓存数据出错');
+          return;
         }
 
-        request.__react__.cacheKey = cacheKey;
-
-        const cacheRequestStartTime = Date.now();
-
-        reactCache
-            .get(cacheKey)
-            .then((data) => {
-                if (!data) {
-                    logger.info('没有发现缓存');
-                    return;
-                }
-
-                let cacheData = null;
-
-                try {
-                    cacheData = JSON.parse(data);
-                } catch (e) {
-                    logger.info('转换 cmem 缓存数据出错');
-                    return;
-                }
-
-                const {
-                    state,
-                    cacheHTML,
-                    expire
-                } = cacheData;
-
-                dcReport(report.dc.fromId, report.dc.toId, report.dc.cache, Date.now() - cacheRequestStartTime);
-
-                if (expire <= Date.now()) {
-                    logger.info('缓存已过期');
-                } else {
-                    logger.info('读取缓存成功');
-
-                    request.isEnd = true;
-
-                    const html = Browser.getFinalHtmlFromCache(htmlPath, cacheHTML, state); // 返回缓存
-                    response.processType = 'cache';
-
-                    response(null, html);
-                    monitor(report.monitor.cache);
-                }
-            }, (error) => {
-                logger.info('读取缓存失败');
-                if (error) {
-                    logger.info(error);
-                }
-                monitor(report.monitor.cacheFail);
-            })
-            .finally(next);
-    };
+        const {
+          state,
+          cacheHTML,
+          expire,
+        } = cacheData;
+
+        dcReport(report.dc.fromId, report.dc.toId, report.dc.cache, Date.now() - cacheRequestStartTime);
+
+        if (expire <= Date.now()) {
+          logger.info('缓存已过期');
+        } else {
+          logger.info('读取缓存成功');
+
+          request.isEnd = true;
+
+          const html = Browser.getFinalHtmlFromCache(htmlPath, cacheHTML, state); // 返回缓存
+          response.processType = 'cache';
+
+          response(null, html);
+          monitor(report.monitor.cache);
+        }
+      }, (error) => {
+        logger.info('读取缓存失败');
+        if (error) {
+          logger.info(error);
+        }
+        monitor(report.monitor.cacheFail);
+      })
+      .finally(next);
+  };
 }
diff --git a/src/node/lib/middlewares/cgiMiddleware.js b/src/node/lib/middlewares/cgiMiddleware.js
index b791916..b50d979 100644
--- a/src/node/lib/middlewares/cgiMiddleware.js
+++ b/src/node/lib/middlewares/cgiMiddleware.js
@@ -24,57 +24,55 @@ const monitorReport = plug('api/monitor').report;
  */
 
 function cgiMiddleware(options) {
-    const {
-        report,
-        cgiHandler // 自定义的 CGI 处理函数
-    } = options;
-
-    return async function (ctx, next) {
-
-        const { page } = ctx.__react__;
-
-        const fetchStartTime = +new Date();
-
-        monitorReport(report.monitor.fetch);
-        try {
-            logger.debug('start fetch');
-
-            const result = await page.fetch({
-                query: { ...ctx.query }
-            });
-
-            logger.debug('fetch result');
-
-            logger.debug(result);
-
-            dcReport(report.dc.fromId, report.dc.toId, report.dc.cgi, Date.now() - fetchStartTime);
-
-            if (report.monitor) {
-                monitorReport(report.monitor.fetchSuccess);
-            }
-
-            const storeState = page.store.getState();
-
-            ctx.__react__.state = storeState;
-
-            logger.info('fetch success');
-            if (cgiHandler) {
-                await cgiHandler({
-                    ctx,
-                    result,
-                    next
-                });
-            } else {
-                await next();
-            }
-
-        } catch (err) {
-            logger.error('fetch fail');
-            // logger.error(err);
-            monitorReport(report.monitor.fetchFail);
-            ctx.isError = true;
-        }
-    };
+  const {
+    report,
+    cgiHandler, // 自定义的 CGI 处理函数
+  } = options;
+
+  return async function (ctx, next) {
+    const { page } = ctx.__react__;
+
+    const fetchStartTime = +new Date();
+
+    monitorReport(report.monitor.fetch);
+    try {
+      logger.debug('start fetch');
+
+      const result = await page.fetch({
+        query: { ...ctx.query },
+      });
+
+      logger.debug('fetch result');
+
+      logger.debug(result);
+
+      dcReport(report.dc.fromId, report.dc.toId, report.dc.cgi, Date.now() - fetchStartTime);
+
+      if (report.monitor) {
+        monitorReport(report.monitor.fetchSuccess);
+      }
+
+      const storeState = page.store.getState();
+
+      ctx.__react__.state = storeState;
+
+      logger.info('fetch success');
+      if (cgiHandler) {
+        await cgiHandler({
+          ctx,
+          result,
+          next,
+        });
+      } else {
+        await next();
+      }
+    } catch (err) {
+      logger.error('fetch fail');
+      // logger.error(err);
+      monitorReport(report.monitor.fetchFail);
+      ctx.isError = true;
+    }
+  };
 }
 
 export default cgiMiddleware;
diff --git a/src/node/lib/middlewares/domainMiddleware.js b/src/node/lib/middlewares/domainMiddleware.js
index 7c18bb5..fdcdf82 100644
--- a/src/node/lib/middlewares/domainMiddleware.js
+++ b/src/node/lib/middlewares/domainMiddleware.js
@@ -11,77 +11,75 @@ const monitorReport = plug('api/monitor').report;
  */
 
 function domainMiddleware(options) {
-    const {
-        Page
-    } = options;
+  const {
+    Page,
+  } = options;
 
-    return async function (ctx, next) {
+  return async function (ctx, next) {
+    const { request } = ctx;
 
-        const request = ctx.request;
-
-        ctx.__react__ = {
-            page: new Page(),
-            state: {}
-        };
-
-        ctx.response.type = 'html'; // 设置返回类型
-
-        const d = process.domain || domain.create();
-        d.request = request;
-        d.document = {
-            cookie: request.headers.cookie || '',
-            referrer: request.headers.referrer,
-            querySelector() {
-            },
-            querySelectorAll() {
-            }
-        };
-        d.navigator = {
-            userAgent: request.headers['user-agent'] || ''
-        };
+    ctx.__react__ = {
+      page: new Page(),
+      state: {},
+    };
 
-        const tmpSearchStr = request.url.split('?')[1] || '';
+    ctx.response.type = 'html'; // 设置返回类型
+
+    const d = process.domain || domain.create();
+    d.request = request;
+    d.document = {
+      cookie: request.headers.cookie || '',
+      referrer: request.headers.referrer,
+      querySelector() {
+      },
+      querySelectorAll() {
+      },
+    };
+    d.navigator = {
+      userAgent: request.headers['user-agent'] || '',
+    };
 
-        d.location = {
-            host: request.headers.host,
-            href: request.url || '',
-            pathname: request.originPath,
-            search: tmpSearchStr ? `?${tmpSearchStr}` : ''
-        };
+    const tmpSearchStr = request.url.split('?')[1] || '';
 
-        d.window = {
-            innerHeight: 0,
-            location: d.location,
-            isServer: true
-        };
-        d.DEBUG = request.query.debug;
-        logger.debug(process.domain.navigator);
-        const errHandler = (err) => {
-            if (options.monitorId) {
-                if (options.monitorId.error) {
-                    monitorReport(options.monitorId.error);
-                }
-            }
+    d.location = {
+      host: request.headers.host,
+      href: request.url || '',
+      pathname: request.originPath,
+      search: tmpSearchStr ? `?${tmpSearchStr}` : '',
+    };
 
-            logger.error(err);
-            logger.error('server error', err);
-            ctx.set('Content-Type', 'text/html; charset=UTF-8');
-            ctx.body = options.staticHtml;
-        };
+    d.window = {
+      innerHeight: 0,
+      location: d.location,
+      isServer: true,
+    };
+    d.DEBUG = request.query.debug;
+    logger.debug(process.domain.navigator);
+    const errHandler = (err) => {
+      if (options.monitorId) {
+        if (options.monitorId.error) {
+          monitorReport(options.monitorId.error);
+        }
+      }
 
-        d.on('error', errHandler);
+      logger.error(err);
+      logger.error('server error', err);
+      ctx.set('Content-Type', 'text/html; charset=UTF-8');
+      ctx.body = options.staticHtml;
+    };
 
-        d.add(ctx.request);
-        d.add(ctx.response);
-        try {
-            await next();
-        } catch (e) {
-            errHandler(e);
-        }
+    d.on('error', errHandler);
 
-        // d.run(next);
+    d.add(ctx.request);
+    d.add(ctx.response);
+    try {
+      await next();
+    } catch (e) {
+      errHandler(e);
+    }
 
-    };
+    // d.run(next);
+  };
 }
 
 export default domainMiddleware;
diff --git a/src/node/lib/middlewares/getFileMiddleware.js b/src/node/lib/middlewares/getFileMiddleware.js
index 1c042fc..73adae7 100644
--- a/src/node/lib/middlewares/getFileMiddleware.js
+++ b/src/node/lib/middlewares/getFileMiddleware.js
@@ -8,12 +8,12 @@
  */
 
 export function getFileMiddleware(options) {
-    // TODO: support get file from disk
-    return async function (ctx, next) {
-        const { fileName, content } = options;
-        if (fileName && typeof content !== 'undefined') {
-            ctx[fileName] = content;
-        }
-        await next();
-    };
+  // TODO: support get file from disk
+  return async function (ctx, next) {
+    const { fileName, content } = options;
+    if (fileName && typeof content !== 'undefined') {
+      ctx[fileName] = content;
+    }
+    await next();
+  };
 }
diff --git a/src/node/lib/middlewares/index.js b/src/node/lib/middlewares/index.js
index 27d3a47..ae14559 100644
--- a/src/node/lib/middlewares/index.js
+++ b/src/node/lib/middlewares/index.js
@@ -3,4 +3,4 @@
 export { domainMiddleware } from './domainMiddleware';
 export { getFileMiddleware } from './getFileMiddleware';
 export { cgiMiddleware } from './cgiMiddleware';
-export { renderMiddleware } from './renderMiddleware';
\ No newline at end of file
+export { renderMiddleware } from './renderMiddleware';
diff --git a/src/node/lib/middlewares/loginMiddleware.js b/src/node/lib/middlewares/loginMiddleware.js
index 4ba5a09..87599de 100644
--- a/src/node/lib/middlewares/loginMiddleware.js
+++ b/src/node/lib/middlewares/loginMiddleware.js
@@ -1,76 +1,72 @@
 import {
-    logger,
-    monitor,
-    dcReport,
-    ptlogin
+  logger,
+  ptlogin,
 } from '../utils';
 
 // 校验skey
 function checkSkey(ctx) {
-    const state = ctx.request.cookie || {};
-    let uin;
-    let skey;
+  const state = ctx.request.cookie || {};
+  let uin;
+  let skey;
 
-    if (Array.isArray(state.uin)) {
-        uin = state.uin[0];
-    } else {
-        uin = String(state.uin);
-    }
+  if (Array.isArray(state.uin)) {
+    uin = state.uin[0];
+  } else {
+    uin = String(state.uin);
+  }
 
-    if (Array.isArray(state.skey)) {
-        skey = state.skey[0];
-    } else {
-        skey = String(state.skey);
-    }
+  if (Array.isArray(state.skey)) {
+    skey = state.skey[0];
+  } else {
+    skey = String(state.skey);
+  }
 
-    return ptlogin.skey({
-        appid: 1600000849,
-        uin,
-        skey
-    });
+  return ptlogin.skey({
+    appid: 1600000849,
+    uin,
+    skey,
+  });
 }
 
 // 跳转QQ登录
-function createUrl(opt = {}, location, type) {
-    let url = opt.url || 'http:/' + location.pathname + (location.search || '') + (location.search ? '&' : '?') + (type ? 'wx' : 'pt') + 'login=1' + (location.hash || '');
-    if (opt.url) {
-        url += (url.indexOf('#') !== -1 ? '&' : '#') + (type ? 'wx' : 'pt') + 'login=1';
-    }
-    url += opt && opt.action ? '&action=' + opt.action : '';
-    return url;
-}
+// function createUrl(opt = {}, location, type) {
+//   let url = opt.url || `http:/${location.pathname}${location.search
+// || ''}${location.search ? '&' : '?'}${type ? 'wx' : 'pt'}login=1${location.hash || ''}`;
+//   if (opt.url) {
+//     url += `${(url.indexOf('#') !== -1 ? '&' : '#') + (type ? 'wx' : 'pt')}login=1`;
+//   }
+//   url += opt && opt.action ? `&action=${opt.action}` : '';
+//   return url;
+// }
 
-function redirect(req, res) {
-    const url = createUrl({}, req.url);
-    res.redirect(`//ui.ptlogin2.qq.com/cgi-bin/login?daid=233&style=9&appid=716040006&target=self&s_url=${encodeURIComponent(url)}&low_login=0`);
-}
+// function redirect(req, res) {
+//   const url = createUrl({}, req.url);
+//   res.redirect(`//ui.ptlogin2.qq.com/cgi-bin/login?daid=233&style=9
+// &appid=716040006&target=self&s_url=${encodeURIComponent(url)}&low_login=0`);
+// }
 
 /** 没通过校验的跳转第三方qq验证 */
-export default function loginMiddleware(config) {
-    const {
-        report
-    } = config;
-
-    return async function (ctx, next) {
-        try {
-            const result = await new Promise((resolve, reject) => {
-                checkSkey(ctx)
-                    .done(() => {
-                        resolve();
-                    })
-                    .fail(() => {
-                        reject();
-                    });
-            });
-        } catch (ex) {
-            logger.info('login error');
-            const loginurl = `//ui.ptlogin2.qq.com/cgi-bin/login?daid=233&style=9&appid=1600001315&target=self&s_url=${encodeURIComponent('//' + ctx.host + ctx.url)}&low_login=0`;
-            ctx.redirect(loginurl);
-            return;
-        }
+export default function loginMiddleware() {
+  return async function (ctx, next) {
+    try {
+      await new Promise((resolve, reject) => {
+        checkSkey(ctx)
+          .done(() => {
+            resolve();
+          })
+          .fail(() => {
+            reject();
+          });
+      });
+    } catch (ex) {
+      logger.info('login error');
+      const loginurl = `//ui.ptlogin2.qq.com/cgi-bin/login?daid=233&style=9&appid=1600001315&target=self&s_url=${encodeURIComponent(`//${ctx.host}${ctx.url}`)}&low_login=0`;
+      ctx.redirect(loginurl);
+      return;
+    }
 
-        await next();
+    await next();
 
-        return;
-    };
+    return;
+  };
 }
diff --git a/src/node/lib/middlewares/renderMiddleware.js b/src/node/lib/middlewares/renderMiddleware.js
index bd85822..16d3a9e 100644
--- a/src/node/lib/middlewares/renderMiddleware.js
+++ b/src/node/lib/middlewares/renderMiddleware.js
@@ -1,73 +1,72 @@
-const ReactDomServer = require('react-dom/server');
 import { logger, dcReport } from '../utils';
+const ReactDomServer = require('react-dom/server');
 
 export const HTML_PLACEHOLDER = '<!--HTML_PLACEHOLDER-->';
 export const STATE_PLACEHOLDER = '<!--STATE_PLACEHOLDER-->';
 export const ISOMORPHISM = '<!--ISOMORPHISM-->';
 
 function replaceState(staticHtml, reactHtml, initialState) {
-    const stateHTML = `
+  const stateHTML = `
         <script>
             window.__initialState = ${JSON.stringify(initialState || {})}
         </script>`;
 
-    return staticHtml.replace(HTML_PLACEHOLDER, reactHtml)
-        .replace(STATE_PLACEHOLDER, stateHTML)
-        .replace(ISOMORPHISM, '<script>window.isIsomorphism = true;</script>');
+  return staticHtml.replace(HTML_PLACEHOLDER, reactHtml)
+    .replace(STATE_PLACEHOLDER, stateHTML)
+    .replace(ISOMORPHISM, '<script>window.isIsomorphism = true;</script>');
 }
 
 function renderHTML(staticHtml, component, state, getFull = true) {
-    const reactHtml = ReactDomServer.renderToString(component);
-    console.log(reactHtml);
-    const finalHtml = replaceState(staticHtml, reactHtml, state);
+  const reactHtml = ReactDomServer.renderToString(component);
+  console.log(reactHtml);
+  const finalHtml = replaceState(staticHtml, reactHtml, state);
 
-    if (getFull) {
-        return {
-            finalHtml,
-            reactHtml,
-            initialState: state
-        };
-    } else {
-        return finalHtml;
-    }
+  if (getFull) {
+    return {
+      finalHtml,
+      reactHtml,
+      initialState: state,
+    };
+  }
+  return finalHtml;
 }
 
 export default function renderMiddleware(config) {
-    const {
-        report,
-        html
-    } = config;
+  const {
+    report,
+    html,
+  } = config;
 
-    return async function (ctx, next) {
-        const {
-            state = {},
-            page
-        } = ctx.__react__;
+  return async function (ctx, next) {
+    const {
+      state = {},
+      page,
+    } = ctx.__react__;
 
-        const renderStartTime = Date.now();
+    const renderStartTime = Date.now();
 
-        logger.info('start render');
+    logger.info('start render');
 
-        const {
-            finalHtml
-        } = renderHTML(html, page.component, state, true);
-        logger.info('render success');
+    const {
+      finalHtml,
+    } = renderHTML(html, page.component, state, true);
+    logger.info('render success');
 
-        dcReport(report.dc.fromId, report.dc.toId, report.dc.render, Date.now() - renderStartTime);
+    dcReport(report.dc.fromId, report.dc.toId, report.dc.render, Date.now() - renderStartTime);
 
-        ctx.body = finalHtml;
-        ctx.isEnd = true; // 一定要设置这个标记为，不然会返回静态资源
+    ctx.body = finalHtml;
+    ctx.isEnd = true; // 一定要设置这个标记为，不然会返回静态资源
 
-        // if(useCache && cacheKey) {
-        //     /* 设置缓存 */
-        //     reactCache.set(cacheKey, JSON.stringify({
-        //         state,
-        //         cacheHTML: htmlObj.reactHtml,
-        //         expire: Date.now() + cacheConfig.expire
-        //     }));
-        // }
+    // if(useCache && cacheKey) {
+    //     /* 设置缓存 */
+    //     reactCache.set(cacheKey, JSON.stringify({
+    //         state,
+    //         cacheHTML: htmlObj.reactHtml,
+    //         expire: Date.now() + cacheConfig.expire
+    //     }));
+    // }
 
-        await next();
-    };
+    await next();
+  };
 }
 
diff --git a/src/node/lib/middlewares/sonicMiddleware.js b/src/node/lib/middlewares/sonicMiddleware.js
index 35f792c..a369c92 100644
--- a/src/node/lib/middlewares/sonicMiddleware.js
+++ b/src/node/lib/middlewares/sonicMiddleware.js
@@ -1,43 +1,43 @@
-import { logger, monitor, dcReport } from '../utils';
-
-const sonic_differ = require('../../util/sonic_diff');
-
-export default function renderMiddleware(config) {
-    return async function (ctx, next) {
-        const {
-            request,
-            response,
-            query
-        } = ctx;
-
-        // 只拦截 html 请求
-        if (!response.is('html')) {
-            logger.info('非 HTML 请求');
-            await next();
-            return;
-        }
-
-        // 非 sonic 模式不做特殊处理
-        if (!request.header['accept-diff'] || !query.asyncMode || parseInt(query.asyncMode, 10) !== 3) {
-            logger.info('非 Sonic 逻辑');
-            await next();
-            return;
-        }
-
-        // 使用 sonic_differ 模块对数据进行处理
-        let sonicData = sonic_differ(ctx, ctx.body);
-
-        logger.info('Sonic diff 成功');
-
-        if (sonicData.cache) {
-            // sonic 模式：完全缓存
-            ctx.body = '';
-        } else {
-            // 其它 sonic 状态
-            ctx.body = sonicData.data;
-        }
-
-        await next();
-    };
+import { logger } from '../utils';
+
+const sonicDiffer = require('../../util/sonic_diff');
+
+export default function renderMiddleware() {
+  return async function (ctx, next) {
+    const {
+      request,
+      response,
+      query,
+    } = ctx;
+
+    // 只拦截 html 请求
+    if (!response.is('html')) {
+      logger.info('非 HTML 请求');
+      await next();
+      return;
+    }
+
+    // 非 sonic 模式不做特殊处理
+    if (!request.header['accept-diff'] || !query.asyncMode || parseInt(query.asyncMode, 10) !== 3) {
+      logger.info('非 Sonic 逻辑');
+      await next();
+      return;
+    }
+
+    // 使用 sonicDiffer 模块对数据进行处理
+    const sonicData = sonicDiffer(ctx, ctx.body);
+
+    logger.info('Sonic diff 成功');
+
+    if (sonicData.cache) {
+      // sonic 模式：完全缓存
+      ctx.body = '';
+    } else {
+      // 其它 sonic 状态
+      ctx.body = sonicData.data;
+    }
+
+    await next();
+  };
 }
 
diff --git a/src/node/lib/middlewares/staticMiddleware.js b/src/node/lib/middlewares/staticMiddleware.js
index 0b952ae..76ae6bf 100644
--- a/src/node/lib/middlewares/staticMiddleware.js
+++ b/src/node/lib/middlewares/staticMiddleware.js
@@ -1,29 +1,28 @@
 import {
-    logger
+  logger,
 } from '../utils';
 
 export default function staticMiddleware(config) {
-    const {
-        html
-    } = config;
+  const {
+    html,
+  } = config;
 
-    return async function (ctx, next) {
-        const useHtml = Boolean(ctx.request.query.use_html); // 是否直接返回静态Html
+  return async function (ctx, next) {
+    const useHtml = Boolean(ctx.request.query.use_html); // 是否直接返回静态Html
 
-        if (useHtml) {
-            ctx.body = html;
-        } else {
-            try {
-                await next();
+    if (useHtml) {
+      ctx.body = html;
+    } else {
+      try {
+        await next();
 
-                if (ctx.isError || !ctx.isEnd) { // 有错误 或者 请求没有处理完， 一定要判断静态页面
-                    ctx.body = html;
-                }
-
-            } catch (e) {
-                logger.error(e);
-                ctx.body = html;
-            }
+        if (ctx.isError || !ctx.isEnd) { // 有错误 或者 请求没有处理完， 一定要判断静态页面
+          ctx.body = html;
         }
-    };
+      } catch (e) {
+        logger.error(e);
+        ctx.body = html;
+      }
+    }
+  };
 }
diff --git a/src/node/lib/middlewares/verificationMiddleware.js b/src/node/lib/middlewares/verificationMiddleware.js
index b9d3514..11d0d2c 100644
--- a/src/node/lib/middlewares/verificationMiddleware.js
+++ b/src/node/lib/middlewares/verificationMiddleware.js
@@ -1,26 +1,26 @@
 import {
-    logger
+  logger,
 } from '../utils';
 
 export default function createVerificationMiddleware(config) {
-    const {
-        queryKey
-    } = config;
+  const {
+    queryKey,
+  } = config;
 
-    return async function verificationMiddleware(ctx, next) {
-        let flag = true;
-        for (let i = 0; i < queryKey.length; i++) {
-            const key = queryKey[i];
-            if (!ctx.query[key]) {
-                logger.error(`请求未带参数${key}`);
-                flag = false;
-            }
-        }
+  return async function verificationMiddleware(ctx, next) {
+    let flag = true;
+    for (let i = 0; i < queryKey.length; i++) {
+      const key = queryKey[i];
+      if (!ctx.query[key]) {
+        logger.error(`请求未带参数${key}`);
+        flag = false;
+      }
+    }
 
-        if (flag) {
-            await next();
-        } else {
-            ctx.isError = true;
-        }
-    };
+    if (flag) {
+      await next();
+    } else {
+      ctx.isError = true;
+    }
+  };
 }
diff --git a/src/node/lib/reactCache.js b/src/node/lib/reactCache.js
index c39460e..df8cd15 100644
--- a/src/node/lib/reactCache.js
+++ b/src/node/lib/reactCache.js
@@ -1,63 +1,58 @@
-/* global plugin */
 const Promise = require('bluebird');
 
 const logger = plug('logger');
 const monitor = plug('api/monitor');
 
 if (process.platform !== 'linux') {
-    const cache = require('./reactLocalCache.js');
+  const cache = require('./reactLocalCache.js');
 
-    module.exports = cache;
+  module.exports = cache;
 } else {
-    // For Linux
-    // const CMEM = require('./cmem')
-    const CMEM = plug('api/cmem-asn13');
-
-    const NODE_ENV = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';
-    const modid = NODE_ENV === 'development' ? 125761 : 807873;
-    const cmdid = NODE_ENV === 'development' ? 65536 : 131072;
-    const bid = NODE_ENV === 'development' ? 101020558 : 101010359;
-
-    const configL5 = {
-        bid,
-        l5modid: modid,
-        l5cmd: cmdid,
-        keepAlive: true
-    };
-
-    const cmem = new CMEM({
-        prefix: 'now',
-        config: configL5
-    });
-
-    function get(key) {
-        return cmem
-            .find(key)
-            .then((ret) => {
-                return ret.result;
-            }, (err) => {
-                monitor.reportAttrInc(2450202); // 缓存拉取失败
-                return Promise.reject(err);
-            });
-    }
-
-    function set(key, value) {
-        return cmem.update(key, value)
-            .then(() => {
-                return logger.info(`${key} 缓存成功`);
-            }, err => {
-                logger.info(`${err.msg || err.err} 缓存失败`);
-                return Promise.reject(err.msg || err.err);
-            });
-    }
-
-    function remove(key) {
-        return cmem.delete(key);
-    }
-
-    module.exports = {
-        get,
-        set,
-        remove
-    };
+  // For Linux
+  // const CMEM = require('./cmem')
+  const CMEM = plug('api/cmem-asn13');
+
+  const NODE_ENV = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';
+  const modid = NODE_ENV === 'development' ? 125761 : 807873;
+  const cmdid = NODE_ENV === 'development' ? 65536 : 131072;
+  const bid = NODE_ENV === 'development' ? 101020558 : 101010359;
+
+  const configL5 = {
+    bid,
+    l5modid: modid,
+    l5cmd: cmdid,
+    keepAlive: true,
+  };
+
+  const cmem = new CMEM({
+    prefix: 'now',
+    config: configL5,
+  });
+
+  function get(key) {
+    return cmem
+      .find(key)
+      .then(ret => ret.result, (err) => {
+        monitor.reportAttrInc(2450202); // 缓存拉取失败
+        return Promise.reject(err);
+      });
+  }
+
+  function set(key, value) {
+    return cmem.update(key, value)
+      .then(() => logger.info(`${key} 缓存成功`), (err) => {
+        logger.info(`${err.msg || err.err} 缓存失败`);
+        return Promise.reject(err.msg || err.err);
+      });
+  }
+
+  function remove(key) {
+    return cmem.delete(key);
+  }
+
+  module.exports = {
+    get,
+    set,
+    remove,
+  };
 }
diff --git a/src/node/lib/reactLocalCache.js b/src/node/lib/reactLocalCache.js
index 367eb83..36f984d 100644
--- a/src/node/lib/reactLocalCache.js
+++ b/src/node/lib/reactLocalCache.js
@@ -7,105 +7,102 @@ const logger = plug('logger');
 let staticDir = path.join(__dirname, '../html');
 
 function readHtmlFile(filePath) {
-    return new Promise((resolve, reject) => {
-        fs.readFile(filePath, (err, data) => {
-            if (err) {
-                reject(err);
-            } else {
-                resolve(data);
-            }
-        });
+  return new Promise((resolve, reject) => {
+    fs.readFile(filePath, (err, data) => {
+      if (err) {
+        reject(err);
+      } else {
+        resolve(data);
+      }
     });
+  });
 }
 
 function saveHtmlFile(filePath, content) {
-    return new Promise((resolve, reject) => {
-        fs.writeFile(filePath, content, (err) => {
-            if (err) {
-                reject(err);
-            } else {
-                resolve(true);
-            }
-        });
+  return new Promise((resolve, reject) => {
+    fs.writeFile(filePath, content, (err) => {
+      if (err) {
+        reject(err);
+      } else {
+        resolve(true);
+      }
     });
+  });
 }
 
 function deleteHtmlFile(filePath) {
-    return new Promise((resolve, reject) => {
-        fs.unlink(filePath, (error) => {
-            if (error) {
-                reject(error);
-            } else {
-                resolve(filePath);
-            }
-        });
+  return new Promise((resolve, reject) => {
+    fs.unlink(filePath, (error) => {
+      if (error) {
+        reject(error);
+      } else {
+        resolve(filePath);
+      }
     });
+  });
 }
 
 setStaticDir(staticDir);
 
 const staticHtmlCache = new LRU({
-    max: 10000, //缓存10000个
-    maxAge: 1000 * 60 * 60, //缓存一小时
-    dispose: (key, value) => {
-        const filePath = value;
-        logger.info(`缓存文件${filePath}被删除`);
-        deleteHtmlFile(filePath); //缓存失效时，删除 html 文件
-    }
+  max: 10000, // 缓存10000个
+  maxAge: 1000 * 60 * 60, // 缓存一小时
+  dispose: (key, value) => {
+    const filePath = value;
+    logger.info(`缓存文件${filePath}被删除`);
+    deleteHtmlFile(filePath); // 缓存失效时，删除 html 文件
+  },
 });
 
-//退出时，删除缓存静态文件
+// 退出时，删除缓存静态文件
 process.on('beforeExit', () => {
-    staticHtmlCache.forEach((value, key) => {
-        console.log(value, key);
-        fs.unlinkSync(value);
-    });
+  staticHtmlCache.forEach((value, key) => {
+    console.log(value, key);
+    fs.unlinkSync(value);
+  });
 });
 
 function get(key) {
-    const filePath = staticHtmlCache.get(key);
-    if (!filePath) {
-        return Promise.resolve(null);
-    } else {
-        return readHtmlFile(filePath)
-            .catch((error) => {
-                staticHtmlCache.del(key);
-                console.log('key', key, '读取缓存失败，清除该缓存');
-                return Promise.reject(error);
-            });
-    }
+  const filePath = staticHtmlCache.get(key);
+  if (!filePath) {
+    return Promise.resolve(null);
+  }
+  return readHtmlFile(filePath)
+    .catch((error) => {
+      staticHtmlCache.del(key);
+      console.log('key', key, '读取缓存失败，清除该缓存');
+      return Promise.reject(error);
+    });
 }
 
 function set(key, value) {
-    const filePath = path.join(staticDir, key);
-    return saveHtmlFile(filePath, value)
-        .then(() => {
-            logger.info(`静态化成功 ${filePath}`);
-            staticHtmlCache.set(key, filePath);
-        }, (error) => {
-            return Promise.reject(error);
-        });
+  const filePath = path.join(staticDir, key);
+  return saveHtmlFile(filePath, value)
+    .then(() => {
+      logger.info(`静态化成功 ${filePath}`);
+      staticHtmlCache.set(key, filePath);
+    }, error => Promise.reject(error));
 }
 
 function setStaticDir(path) {
-    staticDir = path;
-    fs.access(staticDir, (error) => {
+  staticDir = path;
+  fs.access(staticDir, (error) => {
+    if (error) {
+      fs.mkdir(staticDir, (error) => {
         if (error) {
-            fs.mkdir(staticDir, (error) => {
-                if (error) {
-                    logger.warn(error);
-                } else {
-                    logger.info(`创建缓存文件夹${path}成功`);
-                }
-            });
+          logger.warn(error);
+        } else {
+          logger.info(`创建缓存文件夹${path}成功`);
         }
-    });
+      });
+    }
+  });
 }
 
 setStaticDir(staticDir);
 
 export default {
-    get,
-    set,
-    setStaticDir
+  get,
+  set,
+  setStaticDir,
 };
diff --git a/src/node/lib/utils.js b/src/node/lib/utils.js
index 702fe9f..a0c26f6 100644
--- a/src/node/lib/utils.js
+++ b/src/node/lib/utils.js
@@ -4,25 +4,25 @@ const ptlogin = plug('api/ptlogin');
 const monitor = plug('api/monitor');
 
 function dcReport(fromId, toId, interfaceId, delay, code = 0) {
-    try {
-        dcapi.report({
-            fromId: fromId,
-            toId: toId,
-            interfaceId: interfaceId,
-            toIp: '127.0.0.1',
-            code: code,
-            isFail: 0,
-            delay: delay
-        });
-        console.log('dcapi report interfaceId: ' + interfaceId + ', delay: ' + delay);
-    } catch (e) {
-        console.log('dcapi replrt error: ' + e);
-    }
+  try {
+    dcapi.report({
+      fromId,
+      toId,
+      interfaceId,
+      toIp: '127.0.0.1',
+      code,
+      isFail: 0,
+      delay,
+    });
+    console.log(`dcapi report interfaceId: ${interfaceId}, delay: ${delay}`);
+  } catch (e) {
+    console.log(`dcapi replrt error: ${e}`);
+  }
 }
 
 export {
-    logger,
-    dcReport,
-    ptlogin,
-    monitor
+  logger,
+  dcReport,
+  ptlogin,
+  monitor,
 };
diff --git a/src/node/route/verify-identity/config.js b/src/node/route/verify-identity/config.js
index 3354093..eb88c91 100644
--- a/src/node/route/verify-identity/config.js
+++ b/src/node/route/verify-identity/config.js
@@ -6,43 +6,43 @@ const PAGE_NAME = 'verify-identity';
 
 // 其他额外参数
 const controllerOpts = {
-    report: {
-        dc: {
-            // 注意：NOW直播业务固定为该值，花样直播等其他业务请按实际情况修改
-            fromId: 213000434,
-            toId: 0
-        },
-        monitor: {
-            // 33968922 【now直播H5版个人中心-身份认证-NODE】PV
-            pv: 33968922,
+  report: {
+    dc: {
+      // 注意：NOW直播业务固定为该值，花样直播等其他业务请按实际情况修改
+      fromId: 213000434,
+      toId: 0,
+    },
+    monitor: {
+      // 33968922 【now直播H5版个人中心-身份认证-NODE】PV
+      pv: 33968922,
 
-            // 33968923 【now直播H5版个人中心-身份认证-NODE】fetch
-            fetch: 33968923,
+      // 33968923 【now直播H5版个人中心-身份认证-NODE】fetch
+      fetch: 33968923,
 
-            // 33968924 【now直播H5版个人中心-身份认证-NODE】fetch成功
-            fetchSuccess: 33968924,
+      // 33968924 【now直播H5版个人中心-身份认证-NODE】fetch成功
+      fetchSuccess: 33968924,
 
-            // 33968925 【now直播H5版个人中心-身份认证-NODE】fetch失败
-            fetchFail: 33968925,
+      // 33968925 【now直播H5版个人中心-身份认证-NODE】fetch失败
+      fetchFail: 33968925,
 
-            // 33968926 【now直播H5版个人中心-身份认证-NODE】服务异常
-            error: 33968926
-        }
+      // 33968926 【now直播H5版个人中心-身份认证-NODE】服务异常
+      error: 33968926,
     },
-    l5: {
-        cgi: {
-            // 545217:65536
-            '//now.qq.com/cgi-bin/now/web/room/get_top_room_info': {
-                modid: 545217,
-                cmd: 65536
-            }
-        }
+  },
+  l5: {
+    cgi: {
+      // 545217:65536
+      '//now.qq.com/cgi-bin/now/web/room/get_top_room_info': {
+        modid: 545217,
+        cmd: 65536,
+      },
     },
-    sonicDiff: true
+  },
+  sonicDiff: true,
 };
 
 export default {
-    BIZ_NAME: BIZ_NAME,
-    PAGE_NAME: PAGE_NAME,
-    controllerOpts: controllerOpts
+  BIZ_NAME,
+  PAGE_NAME,
+  controllerOpts,
 };
diff --git a/src/node/route/verify-identity/main.js b/src/node/route/verify-identity/main.js
index 7db7bf6..29366bd 100644
--- a/src/node/route/verify-identity/main.js
+++ b/src/node/route/verify-identity/main.js
@@ -14,26 +14,25 @@ import feflowConfig from '../../../../feflow';
  * @returns {*}
  */
 function init(opts = {}) {
-    const Page = require(`../../../pages/${opts.PAGE_NAME}/node-init`).default;
-
-    const html = (() => {
-        if (process.env.NODE_ENV !== 'production') {
-            return require(`../../../../dev/${opts.PAGE_NAME}.html`);
-        } else {
-            const { builderOptions = {} } = feflowConfig;
-            const outDir = builderOptions.outDir || 'public';
-
-            return require(`../../../../${outDir}/webserver/${opts.BIZ_NAME}/${opts.PAGE_NAME}.html`);
-        }
-    })();
-
-    const controllerOpts = Object.assign({
-        html: html,
-        needLogin: false,
-        Page: Page
-    }, opts.controllerOpts);
-
-    return controller(controllerOpts);
+  const Page = require(`../../../pages/${opts.PAGE_NAME}/node-init`).default;
+
+  const html = (() => {
+    if (process.env.NODE_ENV !== 'production') {
+      return require(`../../../../dev/${opts.PAGE_NAME}.html`);
+    }
+    const { builderOptions = {} } = feflowConfig;
+    const outDir = builderOptions.outDir || 'public';
+
+    return require(`../../../../${outDir}/webserver/${opts.BIZ_NAME}/${opts.PAGE_NAME}.html`);
+  })();
+
+  const controllerOpts = Object.assign({
+    html,
+    needLogin: false,
+    Page,
+  }, opts.controllerOpts);
+
+  return controller(controllerOpts);
 }
 
 // 注意注意注意！！！ 这里一定只能用 module.exports， 原因是 tsw 是使用 require 的方式来引用的
diff --git a/src/node/route/verify-phone/config.js b/src/node/route/verify-phone/config.js
index e5d0c16..5a47354 100644
--- a/src/node/route/verify-phone/config.js
+++ b/src/node/route/verify-phone/config.js
@@ -6,43 +6,43 @@ const PAGE_NAME = 'verify-phone';
 
 // 其他额外参数
 const controllerOpts = {
-    report: {
-        dc: {
-            // 注意：NOW直播业务固定为该值，花样直播等其他业务请按实际情况修改
-            fromId: 213000434,
-            toId: 0
-        },
-        monitor: {
-            // 33968908 【now直播H5版个人中心-手机认证-NODE】PV
-            pv: 33968908,
+  report: {
+    dc: {
+      // 注意：NOW直播业务固定为该值，花样直播等其他业务请按实际情况修改
+      fromId: 213000434,
+      toId: 0,
+    },
+    monitor: {
+      // 33968908 【now直播H5版个人中心-手机认证-NODE】PV
+      pv: 33968908,
 
-            // 33968909 【now直播H5版个人中心-手机认证-NODE】fetch
-            fetch: 33968909,
+      // 33968909 【now直播H5版个人中心-手机认证-NODE】fetch
+      fetch: 33968909,
 
-            // 33968910 【now直播H5版个人中心-手机认证-NODE】fetch成功
-            fetchSuccess: 33968910,
+      // 33968910 【now直播H5版个人中心-手机认证-NODE】fetch成功
+      fetchSuccess: 33968910,
 
-            // 33968911 【now直播H5版个人中心-手机认证-NODE】fetch失败
-            fetchFail: 33968911,
+      // 33968911 【now直播H5版个人中心-手机认证-NODE】fetch失败
+      fetchFail: 33968911,
 
-            // 33968912 【now直播H5版个人中心-手机认证-NODE】服务异常
-            error: 33968912
-        }
+      // 33968912 【now直播H5版个人中心-手机认证-NODE】服务异常
+      error: 33968912,
     },
-    l5: {
-        cgi: {
-            // 545217:65536
-            '//now.qq.com/cgi-bin/now/web/room/get_top_room_info': {
-                modid: 545217,
-                cmd: 65536
-            }
-        }
+  },
+  l5: {
+    cgi: {
+      // 545217:65536
+      '//now.qq.com/cgi-bin/now/web/room/get_top_room_info': {
+        modid: 545217,
+        cmd: 65536,
+      },
     },
-    sonicDiff: true
+  },
+  sonicDiff: true,
 };
 
 export default {
-    BIZ_NAME: BIZ_NAME,
-    PAGE_NAME: PAGE_NAME,
-    controllerOpts: controllerOpts
+  BIZ_NAME,
+  PAGE_NAME,
+  controllerOpts,
 };
diff --git a/src/node/route/verify-phone/main.js b/src/node/route/verify-phone/main.js
index 7db7bf6..29366bd 100644
--- a/src/node/route/verify-phone/main.js
+++ b/src/node/route/verify-phone/main.js
@@ -14,26 +14,25 @@ import feflowConfig from '../../../../feflow';
  * @returns {*}
  */
 function init(opts = {}) {
-    const Page = require(`../../../pages/${opts.PAGE_NAME}/node-init`).default;
-
-    const html = (() => {
-        if (process.env.NODE_ENV !== 'production') {
-            return require(`../../../../dev/${opts.PAGE_NAME}.html`);
-        } else {
-            const { builderOptions = {} } = feflowConfig;
-            const outDir = builderOptions.outDir || 'public';
-
-            return require(`../../../../${outDir}/webserver/${opts.BIZ_NAME}/${opts.PAGE_NAME}.html`);
-        }
-    })();
-
-    const controllerOpts = Object.assign({
-        html: html,
-        needLogin: false,
-        Page: Page
-    }, opts.controllerOpts);
-
-    return controller(controllerOpts);
+  const Page = require(`../../../pages/${opts.PAGE_NAME}/node-init`).default;
+
+  const html = (() => {
+    if (process.env.NODE_ENV !== 'production') {
+      return require(`../../../../dev/${opts.PAGE_NAME}.html`);
+    }
+    const { builderOptions = {} } = feflowConfig;
+    const outDir = builderOptions.outDir || 'public';
+
+    return require(`../../../../${outDir}/webserver/${opts.BIZ_NAME}/${opts.PAGE_NAME}.html`);
+  })();
+
+  const controllerOpts = Object.assign({
+    html,
+    needLogin: false,
+    Page,
+  }, opts.controllerOpts);
+
+  return controller(controllerOpts);
 }
 
 // 注意注意注意！！！ 这里一定只能用 module.exports， 原因是 tsw 是使用 require 的方式来引用的
diff --git a/src/node/util/sonic_diff.js b/src/node/util/sonic_diff.js
index 14c00e0..bb6e187 100644
--- a/src/node/util/sonic_diff.js
+++ b/src/node/util/sonic_diff.js
@@ -1,114 +1,110 @@
-const fs = require('fs');
-const path = require('path');
 const crypto = require('crypto');
 
 module.exports = function (ctx, buffer) {
-    let etag = ctx.get('if-none-match');
-    let now = Date.now();
-    let md5 = crypto.createHash('sha1').update(buffer).digest('hex');
-
-    console.info(`请求头etag = ${etag}`);
-    console.info(`页面md5 = ${md5}`);
-    if (etag && md5 == etag) {
-        ctx.set('Cache-Offline', 'store');
-        ctx.set('Content-Length', 0);
-        ctx.status = 304;
-        ctx.sonicMode = 0;
-        return {
-            cache: true
-        }
-    } else {
-        let htmlStr = buffer.toString('utf8');
-        //替换 &&提取　title，body
-        let title = "";
-
-        let now2 = Date.now();
-        let templateHtml = htmlStr.replace(/<title(.*?)<\/title>/i, function (titleHtml) {
-            title = titleHtml;
-            return "{title}";
-        });
-        //判断是否成功替换wnsdiffbody
-        let flag = false;
-
-        let tagIndex = 0, tagPrefix = 'auto';
-
-        let diffTagNames = {};
-
-        templateHtml = templateHtml.replace(/<!--wnsdiff-?(\w*)-->([\s\S]+?)<!--wnsdiff-?(\w*)-end-->/ig, function (diffhtml, tagName) {
-            flag = true;
-            if (!tagName) {
-                tagName = tagPrefix + tagIndex++;
-            }
-
-            diffTagNames[tagName] = diffhtml;
-
-            return '{' + tagName + '}';
-        });
+  const etag = ctx.get('if-none-match');
+  const now = Date.now();
+  const md5 = crypto.createHash('sha1').update(buffer)
+    .digest('hex');
+
+  console.info(`请求头etag = ${etag}`);
+  console.info(`页面md5 = ${md5}`);
+  if (etag && md5 == etag) {
+    ctx.set('Cache-Offline', 'store');
+    ctx.set('Content-Length', 0);
+    ctx.status = 304;
+    ctx.sonicMode = 0;
+    return {
+      cache: true,
+    };
+  }
+  const htmlStr = buffer.toString('utf8');
+  // 替换 &&提取　title，body
+  let title = '';
+
+  const now2 = Date.now();
+  let templateHtml = htmlStr.replace(/<title(.*?)<\/title>/i, (titleHtml) => {
+    title = titleHtml;
+    return '{title}';
+  });
+  // 判断是否成功替换wnsdiffbody
+  let flag = false;
+
+  let tagIndex = 0; const tagPrefix = 'auto';
+
+  const diffTagNames = {};
+
+  templateHtml = templateHtml.replace(/<!--wnsdiff-?(\w*)-->([\s\S]+?)<!--wnsdiff-?(\w*)-end-->/ig, (diffhtml, tagName) => {
+    flag = true;
+    if (!tagName) {
+      tagName = tagPrefix + tagIndex;
+      tagIndex = tagIndex + 1;
+    }
 
-        console.info(`获取sonic diff耗时${Date.now() - now2}`);
+    diffTagNames[tagName] = diffhtml;
 
-        let now3 = Date.now();
+    return `{${tagName}}`;
+  });
 
-        let templateMd5 = crypto.createHash('sha1').update(new Buffer(templateHtml)).digest('hex');
+  console.info(`获取sonic diff耗时${Date.now() - now2}`);
 
-        console.info(`获取sonic diff耗时${Date.now() - now3}`);
+  const now3 = Date.now();
 
-        ctx.set('Etag', `${md5}`);
-        ctx.set('template-tag', templateMd5);
+  const templateMd5 = crypto.createHash('sha1').update(new Buffer(templateHtml))
+    .digest('hex');
 
-        ctx.set('Cache-Offline', true);
+  console.info(`获取sonic diff耗时${Date.now() - now3}`);
 
-        if(flag){
-            let templateTag = ctx.get('template-tag');
-            if(templateMd5 == templateTag){
-                ctx.set('template-change', 'false');
+  ctx.set('Etag', `${md5}`);
+  ctx.set('template-tag', templateMd5);
 
-                let result = {
-                    'data':{
-                        '{title}': title
-                    },
-                    'diff': '',
-                    'html-sha1': md5,
-                    "template-tag" : templateMd5
-                };
+  ctx.set('Cache-Offline', true);
 
-                Object.keys(diffTagNames).forEach(v=>{
-                    result['data']['{' + v + '}'] = diffTagNames[v];
-                });
+  if (flag) {
+    const templateTag = ctx.get('template-tag');
+    if (templateMd5 == templateTag) {
+      ctx.set('template-change', 'false');
 
-                console.info(`数据更新耗时${Date.now() - now}`);
+      const result = {
+        data: {
+          '{title}': title,
+        },
+        diff: '',
+        'html-sha1': md5,
+        'template-tag': templateMd5,
+      };
 
-                ctx.sonicMode = 2;
+      Object.keys(diffTagNames).forEach((v) => {
+        result.data[`{${v}}`] = diffTagNames[v];
+      });
 
-                return {
-                    data : new Buffer(JSON.stringify(result))
-                }
+      console.info(`数据更新耗时${Date.now() - now}`);
 
-            }else{
-                ctx.set('template-change', 'true');
+      ctx.sonicMode = 2;
 
-                ctx.sonicMode = templateTag ? 3 : 1;
+      return {
+        data: new Buffer(JSON.stringify(result)),
+      };
+    }
+    ctx.set('template-change', 'true');
 
-                console.info(`模版更新耗时${Date.now() - now}`);
+    ctx.sonicMode = templateTag ? 3 : 1;
 
-                return {
-                    data: new Buffer(htmlStr)
-                }
-            }
+    console.info(`模版更新耗时${Date.now() - now}`);
 
-        }else{
+    return {
+      data: new Buffer(htmlStr),
+    };
+  }
 
-            let result = {
-                'template': templateHtml,
-                'html-sha1': md5,
-                "template-tag" : templateMd5
-            };
+  const result = {
+    template: templateHtml,
+    'html-sha1': md5,
+    'template-tag': templateMd5,
+  };
 
-            ctx.sonicMode = 4;
+  ctx.sonicMode = 4;
 
-            return {
-                data : new Buffer(JSON.stringify(result))
-            }
-        }
-    }
+  return {
+    data: new Buffer(JSON.stringify(result)),
+  };
 };
diff --git a/src/pages/verify-identity/RootComponent.js b/src/pages/verify-identity/RootComponent.js
index 2205c7b..cba2ce0 100644
--- a/src/pages/verify-identity/RootComponent.js
+++ b/src/pages/verify-identity/RootComponent.js
@@ -7,35 +7,35 @@ import Report from './report';
 import './index.less';
 
 export default class RootComponent extends Component {
-    constructor(props, context) {
-        super(props, context);
+  constructor(props, context) {
+    super(props, context);
 
-        if (process.browser) {
-            // 浏览器环境中，RootComponent 的初始化必须要在 constructor 进行
-            new Report(this, 'verify-identity.html').init();
-        }
+    if (process.browser) {
+      // 浏览器环境中，RootComponent 的初始化必须要在 constructor 进行
+      new Report(this, 'verify-identity.html').init();
     }
+  }
 
-    componentDidMount() {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[verify-identity.html] componentDidMount()');
-        }
-
-        // 设置 ready
-        this.handleOnReady();
+  componentDidMount() {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('[verify-identity.html] componentDidMount()');
     }
 
+    // 设置 ready
+    this.handleOnReady();
+  }
+
     handleOnReady = () => {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[verify-identity.html] handleOnReady()');
-        }
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[verify-identity.html] handleOnReady()');
+      }
     };
 
     render() {
-        return (
+      return (
             <div id="root">
                 <VerifyIdentity />
             </div>
-        );
+      );
     }
-}
\ No newline at end of file
+}
diff --git a/src/pages/verify-identity/business/major-controller/index.js b/src/pages/verify-identity/business/major-controller/index.js
index 2043e32..3f2d064 100644
--- a/src/pages/verify-identity/business/major-controller/index.js
+++ b/src/pages/verify-identity/business/major-controller/index.js
@@ -4,5 +4,5 @@
  * @param {Number} [roomId] 房间ID
  */
 export function openOrDownloadNow(roomId) {
-    alert('openOrDownloadNow(' + roomId + ')');
+  alert(`openOrDownloadNow(${roomId})`);
 }
diff --git a/src/pages/verify-identity/business/report/config.js b/src/pages/verify-identity/business/report/config.js
index 348ef23..f787cb8 100644
--- a/src/pages/verify-identity/business/report/config.js
+++ b/src/pages/verify-identity/business/report/config.js
@@ -3,20 +3,20 @@
  * @type {Object}
  */
 export const REPORT_TDBANK = {
-    // opername 字段的值，业务名称
-    OPERNAME: 'now-h5',
+  // opername 字段的值，业务名称
+  OPERNAME: 'now-h5',
 
-    // module 字段的值，模块名称
-    MODULE: 'annual_hongbao',
+  // module 字段的值，模块名称
+  MODULE: 'annual_hongbao',
 
-    // action 字段的值，当前页面的pv
-    ACTION_PV: 'identity_verify_view'
+  // action 字段的值，当前页面的pv
+  ACTION_PV: 'identity_verify_view',
 };
 
 // 开发场景下，设置产品上报表的地址，会在单元测试的时候帮忙校验，避免忘记
 export const TDBANK_DOCS = [];
 if (process.env.NODE_ENV !== 'production') {
-    // TDBANK_DOCS.push('');
+  // TDBANK_DOCS.push('');
 }
 
 /**
@@ -24,26 +24,26 @@ if (process.env.NODE_ENV !== 'production') {
  * @type {Object}
  */
 export const REPORT_MONITOR = {
-    // 33968915 【now直播H5版个人中心-身份认证】PV
-    PV: 33968915,
+  // 33968915 【now直播H5版个人中心-身份认证】PV
+  PV: 33968915,
 
-    // 33968916 【now直播H5版个人中心-身份认证】离线包
-    OFFLINE_PV: 33968916,
+  // 33968916 【now直播H5版个人中心-身份认证】离线包
+  OFFLINE_PV: 33968916,
 
-    // 33968917 【now直播H5版个人中心-身份认证】badjs
-    BADJS_PV: 33968917,
+  // 33968917 【now直播H5版个人中心-身份认证】badjs
+  BADJS_PV: 33968917,
 
-    // 33968918 【now直播H5版个人中心-身份认证】首次加载成功
-    LOAD_SUCCESS: 33968918,
+  // 33968918 【now直播H5版个人中心-身份认证】首次加载成功
+  LOAD_SUCCESS: 33968918,
 
-    // 33968919 【now直播H5版个人中心-身份认证】首次加载失败
-    LOAD_FAIL: 33968919,
+  // 33968919 【now直播H5版个人中心-身份认证】首次加载失败
+  LOAD_FAIL: 33968919,
 
-    // 33968920 【now直播H5版个人中心-身份认证】重试一次后加载成功
-    LOAD_SUCCESS_RETRY: 33968920,
+  // 33968920 【now直播H5版个人中心-身份认证】重试一次后加载成功
+  LOAD_SUCCESS_RETRY: 33968920,
 
-    // 33968921 【now直播H5版个人中心-身份认证】重试一次后仍加载失败
-    LOAD_FAIL_RETRY: 33968921
+  // 33968921 【now直播H5版个人中心-身份认证】重试一次后仍加载失败
+  LOAD_FAIL_RETRY: 33968921,
 };
 
 /**
@@ -51,6 +51,6 @@ export const REPORT_MONITOR = {
  * @type {Object}
  */
 export const REPORT_HUATUO = {
-    // 页面名称 ：now直播H5版个人中心-身份认证，测速点：21432-1-0-x
-    PAGE_ID: 0
+  // 页面名称 ：now直播H5版个人中心-身份认证，测速点：21432-1-0-x
+  PAGE_ID: 0,
 };
diff --git a/src/pages/verify-identity/business/report/index.js b/src/pages/verify-identity/business/report/index.js
index 18d6aee..79d0910 100644
--- a/src/pages/verify-identity/business/report/index.js
+++ b/src/pages/verify-identity/business/report/index.js
@@ -10,40 +10,40 @@ import { REPORT_HUATUO, REPORT_TDBANK } from './config';
  * 重设一下网络状态，注意延时一点点去处理。之所以如此处理，是因为使用 qqapi 可以获得更为精确的网络状况
  */
 function resetNetworkType() {
-    setTimeout(() => {
-        getNetworkType(true)
-            .then((type) => {
-                TdBank.updateNetworkType(type);
-            })
-            .catch((err) => {
-                console.log(err);
-            });
-    }, 100);
+  setTimeout(() => {
+    getNetworkType(true)
+      .then((type) => {
+        TdBank.updateNetworkType(type);
+      })
+      .catch((err) => {
+        console.log(err);
+      });
+  }, 100);
 }
 
 /**
  * 上报数据到 tdbank 中，为其初始化。
  */
 export function initReport() {
-    // 初始化 badjs，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
-    // 但如果需要重设 badjs 上报的 monitorID，或者自定义过滤规则，则推荐在此处进行设置
-    // BadJS.init(gConfig.badjsId, REPORT_MONITOR.BADJS_PV, {});
+  // 初始化 badjs，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
+  // 但如果需要重设 badjs 上报的 monitorID，或者自定义过滤规则，则推荐在此处进行设置
+  // BadJS.init(gConfig.badjsId, REPORT_MONITOR.BADJS_PV, {});
 
-    // 初始化白名单上报，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
-    // WhiteList.init(gConfig.badjsId);
+  // 初始化白名单上报，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
+  // WhiteList.init(gConfig.badjsId);
 
-    // 初始化白名单的 CGI 请求的上报
-    WhiteListDB.init();
+  // 初始化白名单的 CGI 请求的上报
+  WhiteListDB.init();
 
-    // 初始化 tdbank 上报
-    TdBank.init({
-        opername: REPORT_TDBANK.OPERNAME,
-        module: REPORT_TDBANK.MODULE
-    });
+  // 初始化 tdbank 上报
+  TdBank.init({
+    opername: REPORT_TDBANK.OPERNAME,
+    module: REPORT_TDBANK.MODULE,
+  });
 
-    // 初始化 huatuo 上报
-    HuaTuo.init(REPORT_HUATUO.PAGE_ID);
+  // 初始化 huatuo 上报
+  HuaTuo.init(REPORT_HUATUO.PAGE_ID);
 
-    // 重设一下网络状态，使用qqapi获取精确的网络状况
-    resetNetworkType();
+  // 重设一下网络状态，使用qqapi获取精确的网络状况
+  resetNetworkType();
 }
diff --git a/src/pages/verify-identity/business/window-gConfig/index.js b/src/pages/verify-identity/business/window-gConfig/index.js
index c756930..98e783e 100644
--- a/src/pages/verify-identity/business/window-gConfig/index.js
+++ b/src/pages/verify-identity/business/window-gConfig/index.js
@@ -2,9 +2,9 @@ import { REPORT_MONITOR } from '../report/config';
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    if (!REPORT_MONITOR || !REPORT_MONITOR.BADJS_PV) {
-        throw new Error('请在 /pages/*/business/report/config.js 中配置 REPORT_MONITOR.BADJS_PV');
-    }
+  if (!REPORT_MONITOR || !REPORT_MONITOR.BADJS_PV) {
+    throw new Error('请在 /pages/*/business/report/config.js 中配置 REPORT_MONITOR.BADJS_PV');
+  }
 }
 
 /**
@@ -12,14 +12,14 @@ if (process.env.NODE_ENV !== 'production') {
  * 注意：只有在不得不这么做时才在此定义！！！
  */
 const gConfigModule = {
-    badjsId: 539,
-    badjsMonitor: REPORT_MONITOR.BADJS_PV,
-    avReportName: 'now直播H5版个人中心-身份认证',
-    REPORT_MONITOR
+  badjsId: 539,
+  badjsMonitor: REPORT_MONITOR.BADJS_PV,
+  avReportName: 'now直播H5版个人中心-身份认证',
+  REPORT_MONITOR,
 };
 
 if (typeof window !== 'undefined') {
-    window.gConfig = gConfigModule;
+  window.gConfig = gConfigModule;
 }
 
 export default gConfigModule;
diff --git a/src/pages/verify-identity/components/now-display-verify-identity/index.js b/src/pages/verify-identity/components/now-display-verify-identity/index.js
index 7827a4e..90b1e54 100644
--- a/src/pages/verify-identity/components/now-display-verify-identity/index.js
+++ b/src/pages/verify-identity/components/now-display-verify-identity/index.js
@@ -12,59 +12,59 @@ export default class DisplayVerifyIdentity extends PureComponent {
      * 获取并检验用户输入的姓名
      */
     handelNameChange = (e) => {
-        // 需要补充手机号码阶段时不允许再修改
-        if (this.props.verifyIdentityInfo.shouldVerifyPhone) {
-            return;
-        }
+      // 需要补充手机号码阶段时不允许再修改
+      if (this.props.verifyIdentityInfo.shouldVerifyPhone) {
+        return;
+      }
 
-        this.props.setInputName(e.target.value);
+      this.props.setInputName(e.target.value);
     };
 
     /**
      * 获取并检验用户输入的身份证号码
      */
     handelIdChange = (e) => {
-        // 需要补充手机号码阶段时不允许再修改
-        if (this.props.verifyIdentityInfo.shouldVerifyPhone) {
-            return;
-        }
+      // 需要补充手机号码阶段时不允许再修改
+      if (this.props.verifyIdentityInfo.shouldVerifyPhone) {
+        return;
+      }
 
-        this.props.setInputId(e.target.value);
+      this.props.setInputId(e.target.value);
     };
 
     /**
      * 获取并检验用户输入的手机号
      */
     handelPhoneChange = (e) => {
-        this.props.setInputPhone(e.target.value);
+      this.props.setInputPhone(e.target.value);
     };
 
     /**
      * 获取并检验用户输入的验证码
      */
     handelCodeChange = (e) => {
-        this.props.setInputCode(e.target.value);
+      this.props.setInputCode(e.target.value);
     };
 
     render() {
-        const { verifyIdentityInfo, verifyPhoneInfo, getVerifyCode, verifyIdentity } = this.props;
+      const { verifyIdentityInfo, verifyPhoneInfo, getVerifyCode, verifyIdentity } = this.props;
 
-        const { nameValue, idValue, isIdValid, shouldVerifyPhone } = verifyIdentityInfo;
-        const { phoneNum, verifyCode, isPhoneValid, codeBtnText, isCountingDown } = verifyPhoneInfo;
+      const { nameValue, idValue, isIdValid, shouldVerifyPhone } = verifyIdentityInfo;
+      const { phoneNum, verifyCode, isPhoneValid, codeBtnText, isCountingDown } = verifyPhoneInfo;
 
-        // 获取验证码按钮是否可点击
-        const shouldActiveGetVerify = phoneNum && isPhoneValid && !isCountingDown;
+      // 获取验证码按钮是否可点击
+      const shouldActiveGetVerify = phoneNum && isPhoneValid && !isCountingDown;
 
-        // 身份证信息是否已OK
-        const shouldActiveIdentity = nameValue && idValue && isIdValid;
+      // 身份证信息是否已OK
+      const shouldActiveIdentity = nameValue && idValue && isIdValid;
 
-        // 手机信息是否已OK
-        const shouldActivePhone = phoneNum && verifyCode && isPhoneValid;
+      // 手机信息是否已OK
+      const shouldActivePhone = phoneNum && verifyCode && isPhoneValid;
 
-        // 验证按钮是否可点击，需要验证手机时才需要检查手机信息是否OK
-        const shouldActiveSubmit = shouldVerifyPhone ? shouldActivePhone && shouldActiveIdentity : shouldActiveIdentity;
+      // 验证按钮是否可点击，需要验证手机时才需要检查手机信息是否OK
+      const shouldActiveSubmit = shouldVerifyPhone ? shouldActivePhone && shouldActiveIdentity : shouldActiveIdentity;
 
-        return (
+      return (
             <div className="display-verify-identity">
                 <SectionTitle css="verify-identity-title" title="请核实身份信息，确保成功提现" />
 
@@ -100,6 +100,6 @@ export default class DisplayVerifyIdentity extends PureComponent {
                     enter={verifyIdentity}
                 />
             </div>
-        );
+      );
     }
 }
diff --git a/src/pages/verify-identity/components/now-highorder-verify-identity/index.js b/src/pages/verify-identity/components/now-highorder-verify-identity/index.js
index 38290be..153c8c5 100644
--- a/src/pages/verify-identity/components/now-highorder-verify-identity/index.js
+++ b/src/pages/verify-identity/components/now-highorder-verify-identity/index.js
@@ -12,185 +12,184 @@ import { ACTION_RESULT, handleResForVerifyIdentity } from '/business/project-ver
 import { ACTION_RESULT_GET_CODE, countdown, handleResForGetVerifyCode } from '/business/project-verify-phone';
 
 import {
-    clearVerifyIdentityForm,
-    setInputId,
-    setInputName,
-    showVerifyPhone,
-    verifyIdentity
+  clearVerifyIdentityForm,
+  setInputId,
+  setInputName,
+  showVerifyPhone,
+  verifyIdentity,
 } from '/datas/now-data-verify-identity';
 
 import {
-    clearVerifyPhoneForm,
-    getVerifyCode,
-    sendCountdown,
-    setInputCode,
-    setInputPhone
+  clearVerifyPhoneForm,
+  getVerifyCode,
+  sendCountdown,
+  setInputCode,
+  setInputPhone,
 } from '/datas/now-data-verify-phone';
 
 import Report from './report';
 
 class HighorderVerifyIdentity extends Component {
-    componentDidMount() {
-        // 从浏览器抽奖活动过来，且没有 ptlogin 登录态 直接跳登录
-        if ((!_.getCookie('uin') || !_.getCookie('skey')) && _.query('from_lottery')) {
-            showDialog({
-                onEnter: () => {
-                    return login();
-                },
-                enterText: '跳转登录',
-                hideCancel: true,
-                skin: 'jump-qq-login',
-                text: '即将跳转QQ登录进行QQ钱包绑定'
-            });
-        }
-        // 数据上报
-        new Report(this, 'HighorderVerifyIdentity').init();
+  componentDidMount() {
+    // 从浏览器抽奖活动过来，且没有 ptlogin 登录态 直接跳登录
+    if ((!_.getCookie('uin') || !_.getCookie('skey')) && _.query('from_lottery')) {
+      showDialog({
+        onEnter: () => login(),
+        enterText: '跳转登录',
+        hideCancel: true,
+        skin: 'jump-qq-login',
+        text: '即将跳转QQ登录进行QQ钱包绑定',
+      });
     }
+    // 数据上报
+    new Report(this, 'HighorderVerifyIdentity').init();
+  }
 
     /**
      * 启动验证码倒计时
      */
     startCountdown = () => {
-        // 倒计时计数，每一秒触发一次回调
-        countdown((text, isEnd) => {
-            this.props.sendCountdown({
-                codeBtnText: text,
-                isCountingDown: !isEnd
-            });
+      // 倒计时计数，每一秒触发一次回调
+      countdown((text, isEnd) => {
+        this.props.sendCountdown({
+          codeBtnText: text,
+          isCountingDown: !isEnd,
         });
+      });
     };
 
     /**
      * 点击获取手机验证码
      */
     handleGetVerifyCode = (isActive) => {
-        const { phoneNum, isPhoneValid, isCountingDown, isGetLoading } = this.props.verifyPhoneInfo;
-
-        // 如果手机号码不合法，或者正在倒计时阶段，则不处理
-        if (!isActive) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleGetVerifyCode param lost', phoneNum, isPhoneValid, isCountingDown);
-            }
+      const { phoneNum, isPhoneValid, isCountingDown, isGetLoading } = this.props.verifyPhoneInfo;
 
-            return;
+      // 如果手机号码不合法，或者正在倒计时阶段，则不处理
+      if (!isActive) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleGetVerifyCode param lost', phoneNum, isPhoneValid, isCountingDown);
         }
 
-        // 如果当前在请求中，也将拒绝此次操作
-        if (isGetLoading) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleGetVerifyCode isGetLoading');
-            }
+        return;
+      }
 
-            return;
+      // 如果当前在请求中，也将拒绝此次操作
+      if (isGetLoading) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleGetVerifyCode isGetLoading');
         }
 
-        // 请求接口
-        this.props.getVerifyCode(phoneNum)
-            .then((res) => {
-                const actionResult = handleResForGetVerifyCode(res && res.data && res.data.errCode, true);
+        return;
+      }
 
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleGetVerifyCode] then actionResult', actionResult, res);
-                }
+      // 请求接口
+      this.props.getVerifyCode(phoneNum)
+        .then((res) => {
+          const actionResult = handleResForGetVerifyCode(res && res.data && res.data.errCode, true);
 
-                // 获取验证码成功之后，启动倒计时
-                if (actionResult.code === ACTION_RESULT_GET_CODE.SUCCESS) {
-                    this.startCountdown();
-                }
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleGetVerifyCode] then actionResult', actionResult, res);
+          }
 
-                this.reportGetVerifyCode(actionResult);
-            })
-            .catch((err) => {
-                const actionResult = handleResForGetVerifyCode(err && err.error && err.error.retcode, false);
+          // 获取验证码成功之后，启动倒计时
+          if (actionResult.code === ACTION_RESULT_GET_CODE.SUCCESS) {
+            this.startCountdown();
+          }
 
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleGetVerifyCode] catch actionResult', actionResult, err);
-                }
+          this.reportGetVerifyCode(actionResult);
+        })
+        .catch((err) => {
+          const actionResult = handleResForGetVerifyCode(err && err.error && err.error.retcode, false);
 
-                this.reportGetVerifyCode(actionResult);
-            });
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleGetVerifyCode] catch actionResult', actionResult, err);
+          }
+
+          this.reportGetVerifyCode(actionResult);
+        });
     };
 
     /**
      * 点击验证身份
      */
     handleVerifyIdentity = (isActive) => {
-        const { verifyIdentityInfo, verifyPhoneInfo } = this.props;
-        const { nameValue, idValue, isVerifyLoading, shouldVerifyPhone } = verifyIdentityInfo;
+      const { verifyIdentityInfo, verifyPhoneInfo } = this.props;
+      const { nameValue, idValue, isVerifyLoading, shouldVerifyPhone } = verifyIdentityInfo;
 
-        // 如果参数不合法，则不处理
-        if (!isActive) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleVerifyIdentity param lost', verifyIdentityInfo, verifyPhoneInfo);
-            }
-
-            return;
-        }
-
-        // 如果当前在请求中，也将拒绝此次操作
-        if (isVerifyLoading) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleVerifyIdentity isVerifyLoading');
-            }
-
-            return;
+      // 如果参数不合法，则不处理
+      if (!isActive) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleVerifyIdentity param lost', verifyIdentityInfo, verifyPhoneInfo);
         }
 
-        // 额外请求参数项
-        const reqOpts = {};
+        return;
+      }
 
-        // 需要手机认证时则需要加上对于的手机号和验证码
-        if (shouldVerifyPhone) {
-            reqOpts.phone = verifyPhoneInfo.phoneNum;
-            reqOpts.verify_code = verifyPhoneInfo.verifyCode;
+      // 如果当前在请求中，也将拒绝此次操作
+      if (isVerifyLoading) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleVerifyIdentity isVerifyLoading');
         }
 
-        // 请求接口
-        this.props.verifyIdentity(nameValue, idValue, reqOpts)
-            .then((res) => {
-                const actionResult = handleResForVerifyIdentity(res && res.data, true);
-
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleVerifyIdentity] then actionResult', actionResult, res);
-                }
-
-                // 需要跳转的时候，清理下表单的内容
-                if (actionResult._isReadyToJump) {
-                    this.props.clearVerifyIdentityForm();
-                    this.props.clearVerifyPhoneForm();
-                }
-
-                // 如果还需要手机认证，则展示之
-                if (actionResult.code === ACTION_RESULT.SHOULD_VERIFY_PHONE || actionResult.code === ACTION_RESULT.VERIFY_CODE_ERROR) {
-                    this.props.showVerifyPhone();
-                }
-            })
-            .catch((err) => {
-                const actionResult = handleResForVerifyIdentity(err && err.error && err.error.retcode, false);
-
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleVerifyIdentity] catch actionResult', actionResult, err);
-                }
-            });
+        return;
+      }
+
+      // 额外请求参数项
+      const reqOpts = {};
+
+      // 需要手机认证时则需要加上对于的手机号和验证码
+      if (shouldVerifyPhone) {
+        reqOpts.phone = verifyPhoneInfo.phoneNum;
+        reqOpts.verify_code = verifyPhoneInfo.verifyCode;
+      }
+
+      // 请求接口
+      this.props.verifyIdentity(nameValue, idValue, reqOpts)
+        .then((res) => {
+          const actionResult = handleResForVerifyIdentity(res && res.data, true);
+
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleVerifyIdentity] then actionResult', actionResult, res);
+          }
+
+          // 需要跳转的时候，清理下表单的内容
+          if (actionResult._isReadyToJump) {
+            this.props.clearVerifyIdentityForm();
+            this.props.clearVerifyPhoneForm();
+          }
+
+          // 如果还需要手机认证，则展示之
+          if (actionResult.code === ACTION_RESULT.SHOULD_VERIFY_PHONE
+            || actionResult.code === ACTION_RESULT.VERIFY_CODE_ERROR) {
+            this.props.showVerifyPhone();
+          }
+        })
+        .catch((err) => {
+          const actionResult = handleResForVerifyIdentity(err && err.error && err.error.retcode, false);
+
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleVerifyIdentity] catch actionResult', actionResult, err);
+          }
+        });
     };
 
     reportGetVerifyCode(actionResult) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[reportGetVerifyCode] actionResult', actionResult);
-        }
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[reportGetVerifyCode] actionResult', actionResult);
+      }
     }
 
     render() {
-        const {
-            setInputName,
-            setInputId,
-            setInputPhone,
-            setInputCode,
-            verifyIdentityInfo,
-            verifyPhoneInfo
-        } = this.props;
-
-        return (
+      const {
+        setInputName,
+        setInputId,
+        setInputPhone,
+        setInputCode,
+        verifyIdentityInfo,
+        verifyPhoneInfo,
+      } = this.props;
+
+      return (
             <DisplayVerifyIdentity
                 verifyIdentityInfo={verifyIdentityInfo}
                 verifyPhoneInfo={verifyPhoneInfo}
@@ -201,61 +200,61 @@ class HighorderVerifyIdentity extends Component {
                 getVerifyCode={this.handleGetVerifyCode}
                 verifyIdentity={this.handleVerifyIdentity}
             />
-        );
+      );
     }
 }
 
 function mapStateToProps(state) {
-    const { verifyIdentityInfo, verifyPhoneInfo } = state;
+  const { verifyIdentityInfo, verifyPhoneInfo } = state;
 
-    return {
-        verifyIdentityInfo,
-        verifyPhoneInfo
-    };
+  return {
+    verifyIdentityInfo,
+    verifyPhoneInfo,
+  };
 }
 
 function mapDispatchToProps(dispatch) {
-    return {
-        getVerifyCode(phone) {
-            return dispatch(getVerifyCode(phone));
-        },
-
-        sendCountdown(data) {
-            return dispatch(sendCountdown(data));
-        },
-
-        verifyIdentity(name, idcard, opts) {
-            return dispatch(verifyIdentity(name, idcard, opts));
-        },
-
-        setInputName(inputValue) {
-            return dispatch(setInputName(inputValue));
-        },
-
-        setInputId(inputValue) {
-            return dispatch(setInputId(inputValue));
-        },
-
-        setInputPhone(inputValue) {
-            return dispatch(setInputPhone(inputValue));
-        },
-
-        setInputCode(inputValue) {
-            return dispatch(setInputCode(inputValue));
-        },
-
-        showVerifyPhone() {
-            return dispatch(showVerifyPhone());
-        },
-
-        clearVerifyIdentityForm() {
-            return dispatch(clearVerifyIdentityForm());
-        },
-
-        clearVerifyPhoneForm() {
-            return dispatch(clearVerifyPhoneForm());
-        }
-    };
+  return {
+    getVerifyCode(phone) {
+      return dispatch(getVerifyCode(phone));
+    },
+
+    sendCountdown(data) {
+      return dispatch(sendCountdown(data));
+    },
+
+    verifyIdentity(name, idcard, opts) {
+      return dispatch(verifyIdentity(name, idcard, opts));
+    },
+
+    setInputName(inputValue) {
+      return dispatch(setInputName(inputValue));
+    },
+
+    setInputId(inputValue) {
+      return dispatch(setInputId(inputValue));
+    },
+
+    setInputPhone(inputValue) {
+      return dispatch(setInputPhone(inputValue));
+    },
+
+    setInputCode(inputValue) {
+      return dispatch(setInputCode(inputValue));
+    },
+
+    showVerifyPhone() {
+      return dispatch(showVerifyPhone());
+    },
+
+    clearVerifyIdentityForm() {
+      return dispatch(clearVerifyIdentityForm());
+    },
+
+    clearVerifyPhoneForm() {
+      return dispatch(clearVerifyPhoneForm());
+    },
+  };
 }
 
 export default connect(mapStateToProps, mapDispatchToProps)(HighorderVerifyIdentity);
diff --git a/src/pages/verify-identity/components/now-highorder-verify-identity/report.js b/src/pages/verify-identity/components/now-highorder-verify-identity/report.js
index 128218f..f185e1d 100644
--- a/src/pages/verify-identity/components/now-highorder-verify-identity/report.js
+++ b/src/pages/verify-identity/components/now-highorder-verify-identity/report.js
@@ -5,42 +5,41 @@ import WhiteList from '/business/base-report/whitelist';
 import Monitor from '/business/base-report/monitor';
 
 export default class Report {
-    constructor(component, tag) {
-        this.component = component;
-        this.tag = tag;
-    }
-
-    init() {
-        // 推荐列表展示次数
-        aop.after(this.component, 'handleOnReady', (isSuccess, data) => {
-            const reportOpts = {
-                action: 'view_top_toom',
-                obj1: isSuccess ? '1' : '0'
-            };
-
-            if (isSuccess) {
-                reportOpts.roomid = data.roomId;
-            }
-
-            TdBank.report(reportOpts.tdbank);
-            WhiteList.report(`${this.tag} view top room`, reportOpts);
-        });
-
-        // 点击进房统计
-        aop.after(this.component, 'handleEnterRoom', () => {
-            const { topRoomData } = this.component.props;
-
-            const reportOpts = {
-                action: 'click_top_room',
-                roomid: topRoomData.roomId
-            };
-
-            TdBank.report(reportOpts);
-            WhiteList.report(`${this.tag} enter top room`, reportOpts);
-
-            // 3216284 【厘米秀红包-收益页】取消关注
-            Monitor.report(3216284);
-        });
-
-    }
+  constructor(component, tag) {
+    this.component = component;
+    this.tag = tag;
+  }
+
+  init() {
+    // 推荐列表展示次数
+    aop.after(this.component, 'handleOnReady', (isSuccess, data) => {
+      const reportOpts = {
+        action: 'view_top_toom',
+        obj1: isSuccess ? '1' : '0',
+      };
+
+      if (isSuccess) {
+        reportOpts.roomid = data.roomId;
+      }
+
+      TdBank.report(reportOpts.tdbank);
+      WhiteList.report(`${this.tag} view top room`, reportOpts);
+    });
+
+    // 点击进房统计
+    aop.after(this.component, 'handleEnterRoom', () => {
+      const { topRoomData } = this.component.props;
+
+      const reportOpts = {
+        action: 'click_top_room',
+        roomid: topRoomData.roomId,
+      };
+
+      TdBank.report(reportOpts);
+      WhiteList.report(`${this.tag} enter top room`, reportOpts);
+
+      // 3216284 【厘米秀红包-收益页】取消关注
+      Monitor.report(3216284);
+    });
+  }
 }
diff --git a/src/pages/verify-identity/index.js b/src/pages/verify-identity/index.js
index 0c8a15e..337e756 100644
--- a/src/pages/verify-identity/index.js
+++ b/src/pages/verify-identity/index.js
@@ -9,36 +9,32 @@ import { verifyPhoneInfo } from '/datas/now-data-verify-phone';
 // import pwa from '/business/base-pwa';
 
 class PageContainer extends BasePageContainer {
-    constructor() {
-
-        // 根组件 connect 到 redux 上
-        const Root = connect(
-            state => state
-        )(RootComponent);
-
-        // 定义额外参数
-        const opts = {
-            reducer: {
-                verifyIdentityInfo,
-                verifyPhoneInfo
-            }
-        };
-
-        // 初始化
-        super(Root, opts);
-    }
-
-    /**
+  constructor() {
+    // 根组件 connect 到 redux 上
+    const Root = connect(state => state)(RootComponent);
+
+    // 定义额外参数
+    const opts = {
+      reducer: {
+        verifyIdentityInfo,
+        verifyPhoneInfo,
+      },
+    };
+
+    // 初始化
+    super(Root, opts);
+  }
+
+  /**
      * ReactDOM.render 成功时的回调
      * @param {Number} cost ReactDOM.render耗时，单位为ms
      */
-    onReady(cost) {
-        // 若需NOW webview 运行，则需要在此手动调用stoploading，否则会在资源被阻塞时，出现白屏
-        if (process.env.NODE_ENV !== 'production') {
-            console.log(`ReactDOM.render success! cost ${cost} ms.`);
-        }
+  onReady(cost) {
+    // 若需NOW webview 运行，则需要在此手动调用stoploading，否则会在资源被阻塞时，出现白屏
+    if (process.env.NODE_ENV !== 'production') {
+      console.log(`ReactDOM.render success! cost ${cost} ms.`);
     }
-
+  }
 }
 
 // 注册 ServiceWorker
diff --git a/src/pages/verify-identity/init.js b/src/pages/verify-identity/init.js
index 036d3b1..1301aa1 100644
--- a/src/pages/verify-identity/init.js
+++ b/src/pages/verify-identity/init.js
@@ -8,4 +8,4 @@ window.gReporter.pageMainStart();
 window.Pager = require('./index.js').default;
 
 // 页面主逻辑js已经结束
-window.gReporter.pageMainEnd();
\ No newline at end of file
+window.gReporter.pageMainEnd();
diff --git a/src/pages/verify-identity/node-init.js b/src/pages/verify-identity/node-init.js
index d4b6ca5..fdb0a05 100644
--- a/src/pages/verify-identity/node-init.js
+++ b/src/pages/verify-identity/node-init.js
@@ -4,32 +4,29 @@ import BasePageContainer from '/containers/page-container';
 import RootComponent from './RootComponent';
 
 export default class PageContainer extends BasePageContainer {
-    constructor() {
+  constructor() {
+    // 根组件 connect 到 redux 上
+    const Root = connect(state => state)(RootComponent);
 
-        // 根组件 connect 到 redux 上
-        const Root = connect(
-            state => state
-        )(RootComponent);
+    // 定义额外参数
+    const opts = {
+      reducer: {},
+    };
 
-        // 定义额外参数
-        const opts = {
-            reducer: {}
-        };
+    // 初始化
+    super(Root, opts);
+  }
 
-        // 初始化
-        super(Root, opts);
-    }
-
-    /**
+  /**
      * node 直出时调用的 CGI 请求
      * @param {Object} opts 参数
      * @param {Object} opts.query url中的请求参数对象，例如a=1&b=2时结果为{a:1, b:2}
      */
-    fetch(opts) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('--fetch--', opts);
-        }
-
-        return Promise.resolve('ok');
+  fetch(opts) {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('--fetch--', opts);
     }
+
+    return Promise.resolve('ok');
+  }
 }
diff --git a/src/pages/verify-identity/report.js b/src/pages/verify-identity/report.js
index 812bbab..d920fee 100644
--- a/src/pages/verify-identity/report.js
+++ b/src/pages/verify-identity/report.js
@@ -11,47 +11,47 @@ import { initReport } from './business/report';
 import { REPORT_MONITOR, REPORT_TDBANK } from './business/report/config';
 
 export default class Report {
-    constructor(component, tag) {
-        this.component = component;
-        this.tag = tag ? `[${tag}] ` : '';
-    }
+  constructor(component, tag) {
+    this.component = component;
+    this.tag = tag ? `[${tag}] ` : '';
+  }
 
-    init() {
-        // 初始化上报相关
-        initReport();
+  init() {
+    // 初始化上报相关
+    initReport();
 
-        // 立即上报pv
-        this.reportPv();
+    // 立即上报pv
+    this.reportPv();
 
-        // 页面首屏渲染完成
-        aop.after(this.component, 'handleOnReady', () => {
-            window.gReporter.pageRenderEnd();
+    // 页面首屏渲染完成
+    aop.after(this.component, 'handleOnReady', () => {
+      window.gReporter.pageRenderEnd();
 
-            // 首屏渲染完成之后，上报测速数据
-            HuaTuo.reportPageSpeed();
-        });
-    }
+      // 首屏渲染完成之后，上报测速数据
+      HuaTuo.reportPageSpeed();
+    });
+  }
 
-    /**
+  /**
      * 上报 PV
      */
-    reportPv() {
-        TdBank.report({
-            module: REPORT_TDBANK.MODULE,
-            action: REPORT_TDBANK.ACTION_PV
-        });
-
-        _.query('from_lottery') && TdBank.report({
-            opername: 'now_jiehe',
-            module: 'browser_now_room',
-            action: 'proof_view',
-            obj1: 2
-        });
-
-        Monitor.report([
-            REPORT_MONITOR.PV, window.gTool.isPack() ? REPORT_MONITOR.OFFLINE_PV : ''
-        ]);
-
-        WhiteList.report(`${this.tag} PV`);
-    }
+  reportPv() {
+    TdBank.report({
+      module: REPORT_TDBANK.MODULE,
+      action: REPORT_TDBANK.ACTION_PV,
+    });
+
+    _.query('from_lottery') && TdBank.report({
+      opername: 'now_jiehe',
+      module: 'browser_now_room',
+      action: 'proof_view',
+      obj1: 2,
+    });
+
+    Monitor.report([
+      REPORT_MONITOR.PV, window.gTool.isPack() ? REPORT_MONITOR.OFFLINE_PV : '',
+    ]);
+
+    WhiteList.report(`${this.tag} PV`);
+  }
 }
diff --git a/src/pages/verify-phone/RootComponent.js b/src/pages/verify-phone/RootComponent.js
index 52fe9f6..30e502e 100644
--- a/src/pages/verify-phone/RootComponent.js
+++ b/src/pages/verify-phone/RootComponent.js
@@ -7,35 +7,35 @@ import Report from './report';
 import './index.less';
 
 export default class RootComponent extends Component {
-    constructor(props, context) {
-        super(props, context);
+  constructor(props, context) {
+    super(props, context);
 
-        if (process.browser) {
-            // 浏览器环境中，RootComponent 的初始化必须要在 constructor 进行
-            new Report(this, 'verify-phone.html').init();
-        }
+    if (process.browser) {
+      // 浏览器环境中，RootComponent 的初始化必须要在 constructor 进行
+      new Report(this, 'verify-phone.html').init();
     }
+  }
 
-    componentDidMount() {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[verify-phone.html] componentDidMount()');
-        }
-
-        // 设置 ready
-        this.handleOnReady();
+  componentDidMount() {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('[verify-phone.html] componentDidMount()');
     }
 
+    // 设置 ready
+    this.handleOnReady();
+  }
+
     handleOnReady = () => {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[verify-phone.html] handleOnReady()');
-        }
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[verify-phone.html] handleOnReady()');
+      }
     };
 
     render() {
-        return (
+      return (
             <div id="root">
                 <VerifyPhone />
             </div>
-        );
+      );
     }
-}
\ No newline at end of file
+}
diff --git a/src/pages/verify-phone/business/report/config.js b/src/pages/verify-phone/business/report/config.js
index a4373e5..42e4267 100644
--- a/src/pages/verify-phone/business/report/config.js
+++ b/src/pages/verify-phone/business/report/config.js
@@ -3,20 +3,20 @@
  * @type {Object}
  */
 export const REPORT_TDBANK = {
-    // opername 字段的值，业务名称
-    OPERNAME: 'now-h5',
+  // opername 字段的值，业务名称
+  OPERNAME: 'now-h5',
 
-    // module 字段的值，模块名称
-    MODULE: 'annual_hongbao',
+  // module 字段的值，模块名称
+  MODULE: 'annual_hongbao',
 
-    // action 字段的值，当前页面的pv
-    ACTION_PV: 'phone_verify_view'
+  // action 字段的值，当前页面的pv
+  ACTION_PV: 'phone_verify_view',
 };
 
 // 开发场景下，设置产品上报表的地址，会在单元测试的时候帮忙校验，避免忘记
 export const TDBANK_DOCS = [];
 if (process.env.NODE_ENV !== 'production') {
-    // TDBANK_DOCS.push('');
+  // TDBANK_DOCS.push('');
 }
 
 /**
@@ -24,26 +24,26 @@ if (process.env.NODE_ENV !== 'production') {
  * @type {Object}
  */
 export const REPORT_MONITOR = {
-    // 33968901 【now直播H5版个人中心-手机认证】PV
-    PV: 33968901,
+  // 33968901 【now直播H5版个人中心-手机认证】PV
+  PV: 33968901,
 
-    // 33968902 【now直播H5版个人中心-手机认证】离线包
-    OFFLINE_PV: 33968902,
+  // 33968902 【now直播H5版个人中心-手机认证】离线包
+  OFFLINE_PV: 33968902,
 
-    // 33968903 【now直播H5版个人中心-手机认证】badjs
-    BADJS_PV: 33968903,
+  // 33968903 【now直播H5版个人中心-手机认证】badjs
+  BADJS_PV: 33968903,
 
-    // 33968904 【now直播H5版个人中心-手机认证】首次加载成功
-    LOAD_SUCCESS: 33968904,
+  // 33968904 【now直播H5版个人中心-手机认证】首次加载成功
+  LOAD_SUCCESS: 33968904,
 
-    // 33968905 【now直播H5版个人中心-手机认证】首次加载失败
-    LOAD_FAIL: 33968905,
+  // 33968905 【now直播H5版个人中心-手机认证】首次加载失败
+  LOAD_FAIL: 33968905,
 
-    // 33968906 【now直播H5版个人中心-手机认证】重试一次后加载成功
-    LOAD_SUCCESS_RETRY: 33968906,
+  // 33968906 【now直播H5版个人中心-手机认证】重试一次后加载成功
+  LOAD_SUCCESS_RETRY: 33968906,
 
-    // 33968907 【now直播H5版个人中心-手机认证】重试一次后仍加载失败
-    LOAD_FAIL_RETRY: 33968907
+  // 33968907 【now直播H5版个人中心-手机认证】重试一次后仍加载失败
+  LOAD_FAIL_RETRY: 33968907,
 };
 
 /**
@@ -51,6 +51,6 @@ export const REPORT_MONITOR = {
  * @type {Object}
  */
 export const REPORT_HUATUO = {
-    // 页面名称 ：now直播H5版个人中心-手机认证，测速点：21432-1-0-x
-    PAGE_ID: 0
+  // 页面名称 ：now直播H5版个人中心-手机认证，测速点：21432-1-0-x
+  PAGE_ID: 0,
 };
diff --git a/src/pages/verify-phone/business/report/index.js b/src/pages/verify-phone/business/report/index.js
index 18d6aee..79d0910 100644
--- a/src/pages/verify-phone/business/report/index.js
+++ b/src/pages/verify-phone/business/report/index.js
@@ -10,40 +10,40 @@ import { REPORT_HUATUO, REPORT_TDBANK } from './config';
  * 重设一下网络状态，注意延时一点点去处理。之所以如此处理，是因为使用 qqapi 可以获得更为精确的网络状况
  */
 function resetNetworkType() {
-    setTimeout(() => {
-        getNetworkType(true)
-            .then((type) => {
-                TdBank.updateNetworkType(type);
-            })
-            .catch((err) => {
-                console.log(err);
-            });
-    }, 100);
+  setTimeout(() => {
+    getNetworkType(true)
+      .then((type) => {
+        TdBank.updateNetworkType(type);
+      })
+      .catch((err) => {
+        console.log(err);
+      });
+  }, 100);
 }
 
 /**
  * 上报数据到 tdbank 中，为其初始化。
  */
 export function initReport() {
-    // 初始化 badjs，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
-    // 但如果需要重设 badjs 上报的 monitorID，或者自定义过滤规则，则推荐在此处进行设置
-    // BadJS.init(gConfig.badjsId, REPORT_MONITOR.BADJS_PV, {});
+  // 初始化 badjs，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
+  // 但如果需要重设 badjs 上报的 monitorID，或者自定义过滤规则，则推荐在此处进行设置
+  // BadJS.init(gConfig.badjsId, REPORT_MONITOR.BADJS_PV, {});
 
-    // 初始化白名单上报，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
-    // WhiteList.init(gConfig.badjsId);
+  // 初始化白名单上报，由于在 /business/base-inline-in-head/report 中已经初始过了，此处可忽略
+  // WhiteList.init(gConfig.badjsId);
 
-    // 初始化白名单的 CGI 请求的上报
-    WhiteListDB.init();
+  // 初始化白名单的 CGI 请求的上报
+  WhiteListDB.init();
 
-    // 初始化 tdbank 上报
-    TdBank.init({
-        opername: REPORT_TDBANK.OPERNAME,
-        module: REPORT_TDBANK.MODULE
-    });
+  // 初始化 tdbank 上报
+  TdBank.init({
+    opername: REPORT_TDBANK.OPERNAME,
+    module: REPORT_TDBANK.MODULE,
+  });
 
-    // 初始化 huatuo 上报
-    HuaTuo.init(REPORT_HUATUO.PAGE_ID);
+  // 初始化 huatuo 上报
+  HuaTuo.init(REPORT_HUATUO.PAGE_ID);
 
-    // 重设一下网络状态，使用qqapi获取精确的网络状况
-    resetNetworkType();
+  // 重设一下网络状态，使用qqapi获取精确的网络状况
+  resetNetworkType();
 }
diff --git a/src/pages/verify-phone/business/window-gConfig/index.js b/src/pages/verify-phone/business/window-gConfig/index.js
index 10c3e63..5541c2b 100644
--- a/src/pages/verify-phone/business/window-gConfig/index.js
+++ b/src/pages/verify-phone/business/window-gConfig/index.js
@@ -2,9 +2,9 @@ import { REPORT_MONITOR } from '../report/config';
 
 // 开发场景下的校验
 if (process.env.NODE_ENV !== 'production') {
-    if (!REPORT_MONITOR || !REPORT_MONITOR.BADJS_PV) {
-        throw new Error('请在 /pages/*/business/report/config.js 中配置 REPORT_MONITOR.BADJS_PV');
-    }
+  if (!REPORT_MONITOR || !REPORT_MONITOR.BADJS_PV) {
+    throw new Error('请在 /pages/*/business/report/config.js 中配置 REPORT_MONITOR.BADJS_PV');
+  }
 }
 
 /**
@@ -12,14 +12,14 @@ if (process.env.NODE_ENV !== 'production') {
  * 注意：只有在不得不这么做时才在此定义！！！
  */
 const gConfigModule = {
-    badjsId: 539,
-    badjsMonitor: REPORT_MONITOR.BADJS_PV,
-    avReportName: 'now直播H5版个人中心-手机认证',
-    REPORT_MONITOR
+  badjsId: 539,
+  badjsMonitor: REPORT_MONITOR.BADJS_PV,
+  avReportName: 'now直播H5版个人中心-手机认证',
+  REPORT_MONITOR,
 };
 
 if (typeof window !== 'undefined') {
-    window.gConfig = gConfigModule;
+  window.gConfig = gConfigModule;
 }
 
 export default gConfigModule;
diff --git a/src/pages/verify-phone/components/now-display-verify-phone/index.js b/src/pages/verify-phone/components/now-display-verify-phone/index.js
index c5b0bb2..7fe804d 100644
--- a/src/pages/verify-phone/components/now-display-verify-phone/index.js
+++ b/src/pages/verify-phone/components/now-display-verify-phone/index.js
@@ -11,28 +11,28 @@ export default class DisplayVerifyPhone extends PureComponent {
      * 获取并检验用户输入的手机号
      */
     handelPhoneChange = (e) => {
-        this.props.setInputPhone(e.target.value);
+      this.props.setInputPhone(e.target.value);
     };
 
     /**
      * 获取并检验用户输入的验证码
      */
     handelCodeChange = (e) => {
-        this.props.setInputCode(e.target.value);
+      this.props.setInputCode(e.target.value);
     };
 
     render() {
-        const { verifyPhoneInfo, getVerifyCode, checkVerifyCode } = this.props;
+      const { verifyPhoneInfo, getVerifyCode, checkVerifyCode } = this.props;
 
-        const { phoneNum, verifyCode, isPhoneValid, codeBtnText, isCountingDown } = verifyPhoneInfo;
+      const { phoneNum, verifyCode, isPhoneValid, codeBtnText, isCountingDown } = verifyPhoneInfo;
 
-        // 获取验证码按钮是否可点击
-        const shouldActiveGetVerify = phoneNum && isPhoneValid && !isCountingDown;
+      // 获取验证码按钮是否可点击
+      const shouldActiveGetVerify = phoneNum && isPhoneValid && !isCountingDown;
 
-        // 验证按钮是否可点击
-        const shouldActiveSubmit = phoneNum && verifyCode && isPhoneValid;
+      // 验证按钮是否可点击
+      const shouldActiveSubmit = phoneNum && verifyCode && isPhoneValid;
 
-        return (
+      return (
             <div className="display-verify-phone">
                 <SectionTitle css="verify-phone-title" title="请输入手机号并验证" />
 
@@ -53,6 +53,6 @@ export default class DisplayVerifyPhone extends PureComponent {
                     enter={checkVerifyCode}
                 />
             </div>
-        );
+      );
     }
 }
diff --git a/src/pages/verify-phone/components/now-highorder-verify-phone/index.js b/src/pages/verify-phone/components/now-highorder-verify-phone/index.js
index 6f56d7c..1981239 100644
--- a/src/pages/verify-phone/components/now-highorder-verify-phone/index.js
+++ b/src/pages/verify-phone/components/now-highorder-verify-phone/index.js
@@ -4,177 +4,177 @@ import _ from '@tencent/util';
 import DisplayVerifyPhone from '../now-display-verify-phone';
 
 import {
-    ACTION_RESULT_GET_CODE,
-    countdown,
-    handleResForCheckVerifyCode,
-    handleResForGetVerifyCode
+  ACTION_RESULT_GET_CODE,
+  countdown,
+  handleResForCheckVerifyCode,
+  handleResForGetVerifyCode,
 } from '/business/project-verify-phone';
 
 import {
-    checkVerifyCode,
-    clearVerifyPhoneForm,
-    getVerifyCode,
-    sendCountdown,
-    setInputCode,
-    setInputPhone
+  checkVerifyCode,
+  clearVerifyPhoneForm,
+  getVerifyCode,
+  sendCountdown,
+  setInputCode,
+  setInputPhone,
 } from '/datas/now-data-verify-phone';
 
 import Report from './report';
 
 class HighorderVerifyPhone extends Component {
-    componentDidMount() {
-        // 数据上报
-        new Report(this, 'HighorderVerifyPhone').init();
-    }
+  componentDidMount() {
+    // 数据上报
+    new Report(this, 'HighorderVerifyPhone').init();
+  }
 
     /**
      * 启动验证码倒计时
      */
     startCountdown = () => {
-        // 倒计时计数，每一秒触发一次回调
-        countdown((text, isEnd) => {
-            this.props.sendCountdown({
-                codeBtnText: text,
-                isCountingDown: !isEnd
-            });
+      // 倒计时计数，每一秒触发一次回调
+      countdown((text, isEnd) => {
+        this.props.sendCountdown({
+          codeBtnText: text,
+          isCountingDown: !isEnd,
         });
+      });
     };
 
     /**
      * 点击获取手机验证码
      */
     handleGetVerifyCode = (isActive) => {
-        const { phoneNum, isPhoneValid, isCountingDown, isGetLoading } = this.props.verifyPhoneInfo;
-
-        // 如果手机号码不合法，或者正在倒计时阶段，则不处理
-        if (!isActive) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleGetVerifyCode param lost', phoneNum, isPhoneValid, isCountingDown);
-            }
+      const { phoneNum, isPhoneValid, isCountingDown, isGetLoading } = this.props.verifyPhoneInfo;
 
-            return;
+      // 如果手机号码不合法，或者正在倒计时阶段，则不处理
+      if (!isActive) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleGetVerifyCode param lost', phoneNum, isPhoneValid, isCountingDown);
         }
 
-        // 如果当前在请求中，也将拒绝此次操作
-        if (isGetLoading) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleGetVerifyCode isGetLoading');
-            }
+        return;
+      }
 
-            return;
+      // 如果当前在请求中，也将拒绝此次操作
+      if (isGetLoading) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleGetVerifyCode isGetLoading');
         }
 
-        // 请求接口
-        this.props.getVerifyCode(phoneNum)
-            .then((res) => {
-                const actionResult = handleResForGetVerifyCode(res && res.data && res.data.errCode, true);
-
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleGetVerifyCode] then actionResult', actionResult, res);
-                }
-
-                // 获取验证码成功之后，启动倒计时
-                if (actionResult.code === ACTION_RESULT_GET_CODE.SUCCESS) {
-                    this.startCountdown();
-                }
-
-                this.reportGetVerifyCode(actionResult);
-            })
-            .catch((err) => {
-                const actionResult = handleResForGetVerifyCode(err && err.error && err.error.retcode, false);
-
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleGetVerifyCode] catch actionResult', actionResult, err);
-                }
-
-                this.reportGetVerifyCode(actionResult);
-                if (err.error.retcode == 100000 || err.error.retcode == 100021) {
-                    const url = window.location.href;
-                    const APPID = '101490787';
-                    // eslint-disable-next-line max-len
-                    const REDIRECTURL = `${location.protocol}//now.qq.com/cgi-bin/now/web/user/qq_open_auth?redirect_url=${encodeURIComponent(url)}}&url=${encodeURIComponent(url)}&appid=${APPID}`;
-                    const codeParams = {
-                        response_type: 'code',
-                        client_id: APPID,
-                        redirect_uri: REDIRECTURL
-                    };
-                    const getCodeUrl = `https://graph.qq.com/oauth2.0/authorize?${_.param(codeParams)}`;
-                    window.location.href = getCodeUrl;
-                }
-            });
+        return;
+      }
+
+      // 请求接口
+      this.props.getVerifyCode(phoneNum)
+        .then((res) => {
+          const actionResult = handleResForGetVerifyCode(res && res.data && res.data.errCode, true);
+
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleGetVerifyCode] then actionResult', actionResult, res);
+          }
+
+          // 获取验证码成功之后，启动倒计时
+          if (actionResult.code === ACTION_RESULT_GET_CODE.SUCCESS) {
+            this.startCountdown();
+          }
+
+          this.reportGetVerifyCode(actionResult);
+        })
+        .catch((err) => {
+          const actionResult = handleResForGetVerifyCode(err && err.error && err.error.retcode, false);
+
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleGetVerifyCode] catch actionResult', actionResult, err);
+          }
+
+          this.reportGetVerifyCode(actionResult);
+          if (err.error.retcode == 100000 || err.error.retcode == 100021) {
+            const url = window.location.href;
+            const APPID = '101490787';
+            // eslint-disable-next-line max-len
+            const REDIRECTURL = `${location.protocol}//now.qq.com/cgi-bin/now/web/user/qq_open_auth?redirect_url=${encodeURIComponent(url)}}&url=${encodeURIComponent(url)}&appid=${APPID}`;
+            const codeParams = {
+              response_type: 'code',
+              client_id: APPID,
+              redirect_uri: REDIRECTURL,
+            };
+            const getCodeUrl = `https://graph.qq.com/oauth2.0/authorize?${_.param(codeParams)}`;
+            window.location.href = getCodeUrl;
+          }
+        });
     };
 
     /**
      * 点击验证手机
      */
     handleCheckVerifyCode = (isActive) => {
-        const { phoneNum, verifyCode, isPhoneValid, isCheckLoading } = this.props.verifyPhoneInfo;
-
-        // 如果手机号码不合法，或者正在倒计时阶段，则不处理
-        if (!isActive) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleCheckVerifyCode param lost', phoneNum, verifyCode, isPhoneValid);
-            }
+      const { phoneNum, verifyCode, isPhoneValid, isCheckLoading } = this.props.verifyPhoneInfo;
 
-            return;
+      // 如果手机号码不合法，或者正在倒计时阶段，则不处理
+      if (!isActive) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleCheckVerifyCode param lost', phoneNum, verifyCode, isPhoneValid);
         }
 
-        // 如果当前在请求中，也将拒绝此次操作
-        if (isCheckLoading) {
-            if (process.env.NODE_ENV !== 'production') {
-                console.log('handleCheckVerifyCode isGetLoading');
-            }
+        return;
+      }
 
-            return;
+      // 如果当前在请求中，也将拒绝此次操作
+      if (isCheckLoading) {
+        if (process.env.NODE_ENV !== 'production') {
+          console.log('handleCheckVerifyCode isGetLoading');
         }
 
-        // 请求接口
-        this.props.checkVerifyCode(phoneNum, verifyCode)
-            .then((res) => {
-                const actionResult = handleResForCheckVerifyCode(res && res.data && res.data.errCode, true);
+        return;
+      }
+
+      // 请求接口
+      this.props.checkVerifyCode(phoneNum, verifyCode)
+        .then((res) => {
+          const actionResult = handleResForCheckVerifyCode(res && res.data && res.data.errCode, true);
 
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleCheckVerifyCode] then actionResult', actionResult, res);
-                }
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleCheckVerifyCode] then actionResult', actionResult, res);
+          }
 
-                // 需要跳转的时候，清理下表单的内容
-                if (actionResult._isReadyToJump) {
-                    this.props.clearVerifyPhoneForm();
-                }
+          // 需要跳转的时候，清理下表单的内容
+          if (actionResult._isReadyToJump) {
+            this.props.clearVerifyPhoneForm();
+          }
 
-                this.reportCheckVerifyCode(actionResult);
-            })
-            .catch((err) => {
-                const actionResult = handleResForCheckVerifyCode(err && err.error && err.error.retcode, false);
+          this.reportCheckVerifyCode(actionResult);
+        })
+        .catch((err) => {
+          const actionResult = handleResForCheckVerifyCode(err && err.error && err.error.retcode, false);
 
-                if (process.env.NODE_ENV !== 'production') {
-                    console.log('[handleCheckVerifyCode] catch actionResult', actionResult, err);
-                }
+          if (process.env.NODE_ENV !== 'production') {
+            console.log('[handleCheckVerifyCode] catch actionResult', actionResult, err);
+          }
 
-                this.reportCheckVerifyCode(actionResult);
-            });
+          this.reportCheckVerifyCode(actionResult);
+        });
     };
 
     reportGetVerifyCode(actionResult) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[reportGetVerifyCode] actionResult', actionResult);
-        }
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[reportGetVerifyCode] actionResult', actionResult);
+      }
     }
 
     reportCheckVerifyCode(actionResult) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('[reportCheckVerifyCode] actionResult', actionResult);
-        }
+      if (process.env.NODE_ENV !== 'production') {
+        console.log('[reportCheckVerifyCode] actionResult', actionResult);
+      }
     }
 
     render() {
-        const {
-            setInputPhone,
-            setInputCode,
-            verifyPhoneInfo
-        } = this.props;
+      const {
+        setInputPhone,
+        setInputCode,
+        verifyPhoneInfo,
+      } = this.props;
 
-        return (
+      return (
             <DisplayVerifyPhone
                 verifyPhoneInfo={verifyPhoneInfo}
                 setInputPhone={setInputPhone}
@@ -182,44 +182,44 @@ class HighorderVerifyPhone extends Component {
                 getVerifyCode={this.handleGetVerifyCode}
                 checkVerifyCode={this.handleCheckVerifyCode}
             />
-        );
+      );
     }
 }
 
 function mapStateToProps(state) {
-    const { verifyPhoneInfo } = state;
+  const { verifyPhoneInfo } = state;
 
-    return {
-        verifyPhoneInfo
-    };
+  return {
+    verifyPhoneInfo,
+  };
 }
 
 function mapDispatchToProps(dispatch) {
-    return {
-        getVerifyCode(phone) {
-            return dispatch(getVerifyCode(phone));
-        },
-
-        checkVerifyCode(phone, code) {
-            return dispatch(checkVerifyCode(phone, code));
-        },
-
-        sendCountdown(data) {
-            return dispatch(sendCountdown(data));
-        },
-
-        setInputPhone(inputValue) {
-            return dispatch(setInputPhone(inputValue));
-        },
-
-        setInputCode(inputValue) {
-            return dispatch(setInputCode(inputValue));
-        },
-
-        clearVerifyPhoneForm() {
-            return dispatch(clearVerifyPhoneForm());
-        }
-    };
+  return {
+    getVerifyCode(phone) {
+      return dispatch(getVerifyCode(phone));
+    },
+
+    checkVerifyCode(phone, code) {
+      return dispatch(checkVerifyCode(phone, code));
+    },
+
+    sendCountdown(data) {
+      return dispatch(sendCountdown(data));
+    },
+
+    setInputPhone(inputValue) {
+      return dispatch(setInputPhone(inputValue));
+    },
+
+    setInputCode(inputValue) {
+      return dispatch(setInputCode(inputValue));
+    },
+
+    clearVerifyPhoneForm() {
+      return dispatch(clearVerifyPhoneForm());
+    },
+  };
 }
 
 export default connect(mapStateToProps, mapDispatchToProps)(HighorderVerifyPhone);
diff --git a/src/pages/verify-phone/components/now-highorder-verify-phone/report.js b/src/pages/verify-phone/components/now-highorder-verify-phone/report.js
index 60b12dd..e33e392 100644
--- a/src/pages/verify-phone/components/now-highorder-verify-phone/report.js
+++ b/src/pages/verify-phone/components/now-highorder-verify-phone/report.js
@@ -1,21 +1,20 @@
+/* istanbul ignore file */
 import aop from '@tencent/aop';
 import WhiteList from '/business/base-report/whitelist';
 
 export default class Report {
-    constructor(component, tag) {
-        this.component = component;
-        this.tag = tag;
-    }
+  constructor(component, tag) {
+    this.component = component;
+    this.tag = tag;
+  }
 
-    init() {
+  init() {
+    aop.after(this.component, 'reportGetVerifyCode', (actionResult) => {
+      WhiteList.report(`${this.tag} reportGetVerifyCode`, actionResult);
+    });
 
-        aop.after(this.component, 'reportGetVerifyCode', (actionResult) => {
-            WhiteList.report(`${this.tag} reportGetVerifyCode`, actionResult);
-        });
-
-        aop.after(this.component, 'reportCheckVerifyCode', (actionResult) => {
-            WhiteList.report(`${this.tag} reportCheckVerifyCode`, actionResult);
-        });
-
-    }
+    aop.after(this.component, 'reportCheckVerifyCode', (actionResult) => {
+      WhiteList.report(`${this.tag} reportCheckVerifyCode`, actionResult);
+    });
+  }
 }
diff --git a/src/pages/verify-phone/index.js b/src/pages/verify-phone/index.js
index eb7e472..86667be 100644
--- a/src/pages/verify-phone/index.js
+++ b/src/pages/verify-phone/index.js
@@ -1,3 +1,4 @@
+/* istanbul ignore file */
 import { connect } from 'react-redux';
 
 import BasePageContainer from '/containers/page-container';
@@ -8,35 +9,31 @@ import { verifyPhoneInfo } from '/datas/now-data-verify-phone';
 // import pwa from '/business/base-pwa';
 
 class PageContainer extends BasePageContainer {
-    constructor() {
-
-        // 根组件 connect 到 redux 上
-        const Root = connect(
-            state => state
-        )(RootComponent);
-
-        // 定义额外参数
-        const opts = {
-            reducer: {
-                verifyPhoneInfo
-            }
-        };
-
-        // 初始化
-        super(Root, opts);
-    }
-
-    /**
+  constructor() {
+    // 根组件 connect 到 redux 上
+    const Root = connect(state => state)(RootComponent);
+
+    // 定义额外参数
+    const opts = {
+      reducer: {
+        verifyPhoneInfo,
+      },
+    };
+
+    // 初始化
+    super(Root, opts);
+  }
+
+  /**
      * ReactDOM.render 成功时的回调
      * @param {Number} cost ReactDOM.render耗时，单位为ms
      */
-    onReady(cost) {
-        // 若需NOW webview 运行，则需要在此手动调用stoploading，否则会在资源被阻塞时，出现白屏
-        if (process.env.NODE_ENV !== 'production') {
-            console.log(`ReactDOM.render success! cost ${cost} ms.`);
-        }
+  onReady(cost) {
+    // 若需NOW webview 运行，则需要在此手动调用stoploading，否则会在资源被阻塞时，出现白屏
+    if (process.env.NODE_ENV !== 'production') {
+      console.log(`ReactDOM.render success! cost ${cost} ms.`);
     }
-
+  }
 }
 
 // 注册 ServiceWorker
diff --git a/src/pages/verify-phone/init.js b/src/pages/verify-phone/init.js
index 036d3b1..1301aa1 100644
--- a/src/pages/verify-phone/init.js
+++ b/src/pages/verify-phone/init.js
@@ -8,4 +8,4 @@ window.gReporter.pageMainStart();
 window.Pager = require('./index.js').default;
 
 // 页面主逻辑js已经结束
-window.gReporter.pageMainEnd();
\ No newline at end of file
+window.gReporter.pageMainEnd();
diff --git a/src/pages/verify-phone/node-init.js b/src/pages/verify-phone/node-init.js
index d4b6ca5..6a641e6 100644
--- a/src/pages/verify-phone/node-init.js
+++ b/src/pages/verify-phone/node-init.js
@@ -1,35 +1,34 @@
+
+/* istanbul ignore file */
 import { connect } from 'react-redux';
 
 import BasePageContainer from '/containers/page-container';
 import RootComponent from './RootComponent';
 
 export default class PageContainer extends BasePageContainer {
-    constructor() {
-
-        // 根组件 connect 到 redux 上
-        const Root = connect(
-            state => state
-        )(RootComponent);
+  constructor() {
+    // 根组件 connect 到 redux 上
+    const Root = connect(state => state)(RootComponent);
 
-        // 定义额外参数
-        const opts = {
-            reducer: {}
-        };
+    // 定义额外参数
+    const opts = {
+      reducer: {},
+    };
 
-        // 初始化
-        super(Root, opts);
-    }
+    // 初始化
+    super(Root, opts);
+  }
 
-    /**
+  /**
      * node 直出时调用的 CGI 请求
      * @param {Object} opts 参数
      * @param {Object} opts.query url中的请求参数对象，例如a=1&b=2时结果为{a:1, b:2}
      */
-    fetch(opts) {
-        if (process.env.NODE_ENV !== 'production') {
-            console.log('--fetch--', opts);
-        }
-
-        return Promise.resolve('ok');
+  fetch(opts) {
+    if (process.env.NODE_ENV !== 'production') {
+      console.log('--fetch--', opts);
     }
+
+    return Promise.resolve('ok');
+  }
 }
diff --git a/src/pages/verify-phone/report.js b/src/pages/verify-phone/report.js
index d3f7760..da12bb3 100644
--- a/src/pages/verify-phone/report.js
+++ b/src/pages/verify-phone/report.js
@@ -11,47 +11,47 @@ import { initReport } from './business/report';
 import { REPORT_MONITOR, REPORT_TDBANK } from './business/report/config';
 
 export default class Report {
-    constructor(component, tag) {
-        this.component = component;
-        this.tag = tag ? `[${tag}] ` : '';
-    }
+  constructor(component, tag) {
+    this.component = component;
+    this.tag = tag ? `[${tag}] ` : '';
+  }
 
-    init() {
-        // 初始化上报相关
-        initReport();
+  init() {
+    // 初始化上报相关
+    initReport();
 
-        // 立即上报pv
-        this.reportPv();
+    // 立即上报pv
+    this.reportPv();
 
-        // 页面首屏渲染完成
-        aop.after(this.component, 'handleOnReady', () => {
-            window.gReporter.pageRenderEnd();
+    // 页面首屏渲染完成
+    aop.after(this.component, 'handleOnReady', () => {
+      window.gReporter.pageRenderEnd();
 
-            // 首屏渲染完成之后，上报测速数据
-            HuaTuo.reportPageSpeed();
-        });
-    }
+      // 首屏渲染完成之后，上报测速数据
+      HuaTuo.reportPageSpeed();
+    });
+  }
 
-    /**
+  /**
      * 上报 PV
      */
-    reportPv() {
-        TdBank.report({
-            module: REPORT_TDBANK.MODULE,
-            action: REPORT_TDBANK.ACTION_PV
-        });
-
-        _.query('from_lottery') && TdBank.report({
-            opername: 'now_jiehe',
-            module: 'browser_now_room',
-            action: 'proof_view',
-            obj1: 1
-        });
-
-        Monitor.report([
-            REPORT_MONITOR.PV, window.gTool.isPack() ? REPORT_MONITOR.OFFLINE_PV : ''
-        ]);
-
-        WhiteList.report(`${this.tag} PV`);
-    }
+  reportPv() {
+    TdBank.report({
+      module: REPORT_TDBANK.MODULE,
+      action: REPORT_TDBANK.ACTION_PV,
+    });
+
+    _.query('from_lottery') && TdBank.report({
+      opername: 'now_jiehe',
+      module: 'browser_now_room',
+      action: 'proof_view',
+      obj1: 1,
+    });
+
+    Monitor.report([
+      REPORT_MONITOR.PV, window.gTool.isPack() ? REPORT_MONITOR.OFFLINE_PV : '',
+    ]);
+
+    WhiteList.report(`${this.tag} PV`);
+  }
 }
diff --git a/test/dwt-for-epc.config.js b/test/dwt-for-epc.config.js
new file mode 100644
index 0000000..61ed9bb
--- /dev/null
+++ b/test/dwt-for-epc.config.js
@@ -0,0 +1,16 @@
+const path = require('path');
+const { createMochaHooks } = require('@tencent/dwt');
+const { dwtOutputPath } = require('../dwt.config');
+
+// 导出为 mocha 的钩子事件
+exports.mochaHooks = createMochaHooks(dwtOutputPath, {
+    // 需要依赖 mochawesome 来解析测试结果，配置详见 .mocharc.yml
+    mochawesomeJsonFilePath: path.join(dwtOutputPath, './mochawesome/mochawesome.json'),
+
+    // 测试用例的默认注解
+    // testbase 规范： https://iwiki.oa.tencent.com/pages/viewpage.action?pageId=178300624
+    defaultComment: {
+        author: 'linjianghe',
+        priority: 'P1'
+    }
+});
diff --git a/test/e2e/mocha.opts b/test/e2e/mocha.opts
deleted file mode 100644
index 3629c7a..0000000
--- a/test/e2e/mocha.opts
+++ /dev/null
@@ -1,2 +0,0 @@
---reporter spec
---recursive
diff --git a/test/e2e/page-verify-identity/basic-check.test.js b/test/e2e/page-verify-identity/basic-check.test.js
index 841060e..6a74eb7 100644
--- a/test/e2e/page-verify-identity/basic-check.test.js
+++ b/test/e2e/page-verify-identity/basic-check.test.js
@@ -1,69 +1,67 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistTDBank, isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/basic-check');
 
 describe('verify-identity.html：常规检查', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
 
-    before(function () {
-        return checkPage({ show: false, doNotCloseBrowser: false, useRecorder: true })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
     });
+  });
 
-    describe('检查基本信息', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.data;
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
+  describe('检查基本信息', function () {
+    let data;
 
-        it('上报了tdbank：phone_verify_view 页面曝光', function () {
-            const result = e2eQueue.isExistTDBank({
-                module: 'annual_hongbao',
-                action: 'identity_verify_view'
-            });
-
-            expect(result).to.be.true;
-        });
+    before(function () {
+      data = matmanResult.get('init');
+    });
 
-        it('上报了monitor：33968915 【now直播H5版个人中心-身份认证】PV', function () {
-            const result = e2eQueue.isExistMonitor([33968915]);
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
 
-            expect(result).to.be.true;
-        });
+    it('上报了tdbank：phone_verify_view 页面曝光', function () {
+      expect(isExistTDBank(matmanResult, {
+        module: 'annual_hongbao',
+        action: 'identity_verify_view',
+      })).to.be.true;
+    });
 
-        it('上报了monitor：33968918 【now直播H5版个人中心-身份认证】首次加载成功', function () {
-            const result = e2eQueue.isExistMonitor([33968918]);
+    it('上报了monitor：33968915 【now直播H5版个人中心-身份认证】PV', function () {
+      expect(isExistMonitor(matmanResult, [33968915])).to.be.true;
+    });
 
-            expect(result).to.be.true;
-        });
+    it('上报了monitor：33968918 【now直播H5版个人中心-身份认证】首次加载成功', function () {
+      expect(isExistMonitor(matmanResult, [33968918])).to.be.true;
     });
+  });
 });
-
diff --git a/test/e2e/page-verify-identity/verify-basic.test.js b/test/e2e/page-verify-identity/verify-basic.test.js
index 7458b9c..4d6fe95 100644
--- a/test/e2e/page-verify-identity/verify-basic.test.js
+++ b/test/e2e/page-verify-identity/verify-basic.test.js
@@ -1,266 +1,315 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-basic');
 
 describe('verify-identity.html：验证身份证操作基本逻辑', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为空', function () {
+      expect(data.formContentInfo.nameValue).to.be.empty;
+    });
+
+    it('身份证为空', function () {
+      expect(data.formContentInfo.idValue).to.be.empty;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第二步：身份证输入框输入: 至尊宝', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第三步：尝试点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtnWithoutCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('没有任何消息提示', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第四步：身份证输入框输入: 431129', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputIdPart1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('身份证为 431129', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129');
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第五步：身份证输入框继续输入: 199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputIdPart2');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第六步：再次尝试点击验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({ show: false, doNotCloseBrowser: false, useRecorder: true })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('clickVerifyBtn');
     });
 
-    describe('第一步：开始操作之前', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('init');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为空', function () {
-            expect(data.formContentInfo.nameValue).to.be.empty;
-        });
-
-        it('身份证为空', function () {
-            expect(data.formContentInfo.idValue).to.be.empty;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '认证成功',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第二步：身份证输入框输入: 至尊宝', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('成功之后清空了输入：姓名', function () {
+      expect(data.formContentInfo.nameValue).to.be.empty;
     });
 
-    describe('第三步：尝试点击验证按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtnWithoutCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('没有任何消息提示', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('成功之后清空了输入：身份证', function () {
+      expect(data.formContentInfo.idValue).to.be.empty;
     });
 
-    describe('第四步：身份证输入框输入: 431129', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputIdPart1');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('身份证为 431129', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129');
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('有消息提示: 认证成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '认证成功',
+      });
     });
 
-    describe('第五步：身份证输入框继续输入: 199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputIdPart2');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
     });
 
-    describe('第六步：再次尝试点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': false, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '认证成功'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('成功之后清空了输入：姓名', function () {
-            expect(data.formContentInfo.nameValue).to.be.empty;
-        });
-
-        it('成功之后清空了输入：身份证', function () {
-            expect(data.formContentInfo.idValue).to.be.empty;
-        });
-
-        it('有消息提示: 认证成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '认证成功'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
     });
+  });
+
+  describe('第七步：3s后再次获取页面状态', function () {
+    it('已经跳转到了提现页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageWithdraw =
+        'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
+
+      const result = matmanResult.isExistPage(pageWithdraw, {}, 200);
 
-    describe('第七步：3s后再次获取页面状态', function () {
-        it('已经跳转到了提现页面', function () {
-            expect(resultData.isRedirectToPageWithdraw).to.be.true;
-        });
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-err-code-900002.test.js b/test/e2e/page-verify-identity/verify-fail-err-code-900002.test.js
index f03b76e..f2770f2 100644
--- a/test/e2e/page-verify-identity/verify-fail-err-code-900002.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-err-code-900002.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证err_code=900002', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_err_code_900002',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '当前身份证信息已被绑定',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 当前身份证信息已被绑定', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '当前身份证信息已被绑定',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_err_code_900002'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '当前身份证信息已被绑定'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 当前身份证信息已被绑定', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '当前身份证信息已被绑定'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-err-code-900003.test.js b/test/e2e/page-verify-identity/verify-fail-err-code-900003.test.js
index e6ace5a..8d087f7 100644
--- a/test/e2e/page-verify-identity/verify-fail-err-code-900003.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-err-code-900003.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证err_code=900003', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_err_code_900003',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '当前身份证信息已被绑定',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 当前身份证信息已被绑定', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '当前身份证信息已被绑定',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_err_code_900003'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '当前身份证信息已被绑定'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 当前身份证信息已被绑定', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '当前身份证信息已被绑定'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-err-code-900004.test.js b/test/e2e/page-verify-identity/verify-fail-err-code-900004.test.js
index 8602dca..9c87d12 100644
--- a/test/e2e/page-verify-identity/verify-fail-err-code-900004.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-err-code-900004.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证err_code=900004', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_err_code_900004',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '该账号已经通过实名认证，无需重复认证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 该账号已经通过实名认证，无需重复认证', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '该账号已经通过实名认证，无需重复认证',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_err_code_900004'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '该账号已经通过实名认证，无需重复认证'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 该账号已经通过实名认证，无需重复认证', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '该账号已经通过实名认证，无需重复认证'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-err-code-900061.test.js b/test/e2e/page-verify-identity/verify-fail-err-code-900061.test.js
index 293d6da..8ff5a17 100644
--- a/test/e2e/page-verify-identity/verify-fail-err-code-900061.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-err-code-900061.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证err_code=900061', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_err_code_900061',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '绑卡状态获取失败(err_code=900061)，请重试',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 绑卡状态获取失败(err_code=900061)，请重试', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '绑卡状态获取失败(err_code=900061)，请重试',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_err_code_900061'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '绑卡状态获取失败(err_code=900061)，请重试'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 绑卡状态获取失败(err_code=900061)，请重试', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '绑卡状态获取失败(err_code=900061)，请重试'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-error-100000.test.js b/test/e2e/page-verify-identity/verify-fail-error-100000.test.js
deleted file mode 100644
index dca6e79..0000000
--- a/test/e2e/page-verify-identity/verify-fail-error-100000.test.js
+++ /dev/null
@@ -1,91 +0,0 @@
-const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
-
-const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
-
-describe('verify-identity.html：验证手机号时未登录', function () {
-    this.timeout(30000);
-
-    let resultData;
-
-    before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'error_100000'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let e2eQueue;
-
-        before(function () {
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        it('已经跳转到了登录页面', function () {
-            expect(resultData.isRedirectToLogin).to.be.true;
-        });
-    });
-});
diff --git a/test/e2e/page-verify-identity/verify-fail-go-login-error-100000.test.js b/test/e2e/page-verify-identity/verify-fail-go-login-error-100000.test.js
new file mode 100644
index 0000000..de84a26
--- /dev/null
+++ b/test/e2e/page-verify-identity/verify-fail-go-login-error-100000.test.js
@@ -0,0 +1,125 @@
+const { expect } = require('chai');
+
+const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-login');
+
+describe('verify-identity.html：验证手机号时未登录', function () {
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'error_100000',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获验证按钮', function () {
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('已经跳转到了登录页面', function () {
+      const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
+
+      const result = matmanResult.isExistPage(loginPage, {}, 200);
+
+      expect(result).to.be.true;
+    });
+  });
+});
diff --git a/test/e2e/page-verify-identity/verify-fail-go-login-retcode-66210007.test.js b/test/e2e/page-verify-identity/verify-fail-go-login-retcode-66210007.test.js
new file mode 100644
index 0000000..421c677
--- /dev/null
+++ b/test/e2e/page-verify-identity/verify-fail-go-login-retcode-66210007.test.js
@@ -0,0 +1,126 @@
+const { expect } = require('chai');
+
+const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-login');
+
+describe('verify-identity.html：验证retcode=66210007', function () {
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_66210007',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获验证按钮', function () {
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('已经跳转到了登录页面', function () {
+      const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
+
+      const result = matmanResult.isExistPage(loginPage, {}, 200);
+
+      expect(result).to.be.true;
+    });
+  });
+
+});
diff --git a/test/e2e/page-verify-identity/verify-fail-nameauth-flag-1.test.js b/test/e2e/page-verify-identity/verify-fail-nameauth-flag-1.test.js
index 54f30ce..4c9645c 100644
--- a/test/e2e/page-verify-identity/verify-fail-nameauth-flag-1.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-nameauth-flag-1.test.js
@@ -1,367 +1,403 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet');
 
 describe('verify-identity.html：验证nameauth_flag=1', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_nameauth_flag_1',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'dlgGoDownloadQQInfo': {
+          'isExist': false,
+        },
+        'dlgGoQQWalletInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第四步：点击弹窗中的取消按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_nameauth_flag_1'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('clickDlgCancel');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
+    it('弹窗消失', function () {
+      expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第五步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
     });
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第三步：点击弹窗中的取消按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDlgCancel');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹窗消失', function () {
-            expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
-        });
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
     });
 
-    describe('第四步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了获取验证码的cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码的monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('请求了获取验证码的cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
     });
 
-    describe('第五步：点击弹窗中的去实名认证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickDlgOk');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '确定',
-                    'isExist': true,
-                    'text': 'QQ未下载，请下载QQ'
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('调用了打开QQ并去实名认证的jsbridge串', function () {
-            // TODO 这里应该要提供一下简便的方式
-            const result = e2eQueue.queue.filter((item) => {
-                return item.eventName === 'console'
-                    && item.args[0] === 'log'
-                    && item.args[1] === '[jumpToQQWallet] url'
-                    && item.args[2] === 'mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web';
-            });
-
-            expect(result).to.have.lengthOf(1);
-
-        });
-
-        it('弹出对话框: 提示要去下载QQ', function () {
-            expect(data.dlgGoDownloadQQInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '确定',
-                'isExist': true,
-                'text': 'QQ未下载，请下载QQ'
-            });
-        });
+    it('上报了获取验证码的monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：点击弹窗中的去实名认证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDlgOk');
+    });
 
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          btnCancelText: '取消',
+          btnOkText: '确定',
+          isExist: true,
+          text: 'QQ未下载，请下载QQ',
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第六步：点击下载qq弹窗中的确定按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDownloadDlgOk');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isExist': false
-                },
-                'formContentInfo': {
-                    'isExist': false
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': false
-                }
-            });
-        });
-
-        it('跳转到手机QQ下载页', function () {
-            expect(resultData.isRedirectToQQPage).to.be.true;
-        });
+    it('调用了打开QQ并去实名认证的jsbridge串', function () {
+      expect(matmanResult.isExistJSBridge('mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web')).to.be.true;
+    });
+
+    it('弹出对话框: 提示要去下载QQ', function () {
+      expect(data.dlgGoDownloadQQInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '确定',
+        isExist: true,
+        text: 'QQ未下载，请下载QQ',
+      });
+    });
+  });
+
+  describe('第七步：点击下载qq弹窗中的确定按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDownloadDlgOk');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isExist: false,
+        },
+        formContentInfo: {
+          isExist: false,
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: false,
+        },
+      });
+    });
+  });
+
+  describe('第八步：再次获取页面状态', function () {
+    it('跳转到手机QQ下载页', function () {
+      // 过滤出是否跳转到其他页面
+      const pageToQQ = 'im.qq.com/immobile/index.html';
+
+      const result = matmanResult.isExistPage(pageToQQ, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-nameauth-flag-3.test.js b/test/e2e/page-verify-identity/verify-fail-nameauth-flag-3.test.js
index 0b87b1e..a39af1a 100644
--- a/test/e2e/page-verify-identity/verify-fail-nameauth-flag-3.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-nameauth-flag-3.test.js
@@ -1,155 +1,208 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证nameauth_flag=3', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_nameauth_flag_3',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text:
+            '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text:
+          '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_nameauth_flag_3'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '您的身份信息和QQ钱包实名验证不一致，请检查身份信息/登录QQ号正确性'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-1150001.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-1150001.test.js
index d2ffb1e..fcdf2ad 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-1150001.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-1150001.test.js
@@ -1,333 +1,376 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone');
 
 describe('verify-identity.html：验证retcode=1150001', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_1150001',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'phoneFormContentInfo': {
+          'isExist': false,
+        },
+        'phoneTitleInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
 
-    let resultData;
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_1150001'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
     });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '验证码错误'
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('有消息提示: 验证码错误', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '验证码错误'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-
-        it('出现验证手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.true;
-        });
-
-        it('出现验证手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.true;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
     });
 
-    describe('第三步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '验证码错误',
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第四步：再次点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '认证成功'
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('成功之后清空了输入：姓名', function () {
-            expect(data.formContentInfo.nameValue).to.be.empty;
-        });
-
-        it('成功之后清空了输入：身份证', function () {
-            expect(data.formContentInfo.idValue).to.be.empty;
-        });
-
-        it('成功之后隐藏了：手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.false;
-        });
-
-        it('成功之后隐藏了：手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.false;
-        });
-
-        it('有消息提示: 认证成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '认证成功'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
-            // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1,
-                phone: '12345678901',
-                verify_code: '654321'
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('有消息提示: 验证码错误', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '验证码错误',
+      });
     });
 
-    describe('第五步：3s后再次获取页面状态', function () {
-        it('已经跳转到了提现页面', function () {
-            expect(resultData.isRedirectToPageWithdraw).to.be.true;
-        });
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+
+    it('出现验证手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.true;
+    });
+
+    it('出现验证手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.true;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第四步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第五步：再次点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '认证成功',
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('成功之后清空了输入：姓名', function () {
+      expect(data.formContentInfo.nameValue).to.be.empty;
+    });
+
+    it('成功之后清空了输入：身份证', function () {
+      expect(data.formContentInfo.idValue).to.be.empty;
+    });
+
+    it('成功之后隐藏了：手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.false;
+    });
+
+    it('成功之后隐藏了：手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.false;
+    });
+
+    it('有消息提示: 认证成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '认证成功',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
+      // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+          phone: '12345678901',
+          verify_code: '654321',
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：3s后再次获取页面状态', function () {
+    it('已经跳转到了提现页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageWithdraw =
+        'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
+
+      const result = matmanResult.isExistPage(pageWithdraw, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-1150003.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-1150003.test.js
index 52daad4..908bc51 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-1150003.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-1150003.test.js
@@ -1,333 +1,376 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone');
 
 describe('verify-identity.html：验证retcode=1150003', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_1150003',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'phoneFormContentInfo': {
+          'isExist': false,
+        },
+        'phoneTitleInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
 
-    let resultData;
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_1150003'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
     });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '请输入手机号并验证'
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('有消息提示: 请输入手机号并验证', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '请输入手机号并验证'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-
-        it('出现验证手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.true;
-        });
-
-        it('出现验证手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.true;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
     });
 
-    describe('第三步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '请输入手机号并验证',
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第四步：再次点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '认证成功'
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('成功之后清空了输入：姓名', function () {
-            expect(data.formContentInfo.nameValue).to.be.empty;
-        });
-
-        it('成功之后清空了输入：身份证', function () {
-            expect(data.formContentInfo.idValue).to.be.empty;
-        });
-
-        it('成功之后隐藏了：手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.false;
-        });
-
-        it('成功之后隐藏了：手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.false;
-        });
-
-        it('有消息提示: 认证成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '认证成功'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
-            // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1,
-                phone: '12345678901',
-                verify_code: '654321'
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('有消息提示: 请输入手机号并验证', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '请输入手机号并验证',
+      });
     });
 
-    describe('第五步：3s后再次获取页面状态', function () {
-        it('已经跳转到了提现页面', function () {
-            expect(resultData.isRedirectToPageWithdraw).to.be.true;
-        });
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+
+    it('出现验证手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.true;
+    });
+
+    it('出现验证手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.true;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第四步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第五步：再次点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '认证成功',
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('成功之后清空了输入：姓名', function () {
+      expect(data.formContentInfo.nameValue).to.be.empty;
+    });
+
+    it('成功之后清空了输入：身份证', function () {
+      expect(data.formContentInfo.idValue).to.be.empty;
+    });
+
+    it('成功之后隐藏了：手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.false;
+    });
+
+    it('成功之后隐藏了：手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.false;
+    });
+
+    it('有消息提示: 认证成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '认证成功',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
+      // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+          phone: '12345678901',
+          verify_code: '654321',
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：3s后再次获取页面状态', function () {
+    it('已经跳转到了提现页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageWithdraw =
+        'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
+
+      const result = matmanResult.isExistPage(pageWithdraw, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-1150005.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-1150005.test.js
index 8caa021..d67dd47 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-1150005.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-1150005.test.js
@@ -1,333 +1,376 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-should-verify-phone');
 
 describe('verify-identity.html：验证retcode=1150005', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_1150005',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'phoneFormContentInfo': {
+          'isExist': false,
+        },
+        'phoneTitleInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
 
-    let resultData;
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_1150005'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
     });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '手机号验证失败'
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('有消息提示: 手机号验证失败', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '手机号验证失败'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-
-        it('出现验证手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.true;
-        });
-
-        it('出现验证手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.true;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
     });
 
-    describe('第三步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'phoneFormContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'phoneTitleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '手机号验证失败',
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第四步：再次点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '认证成功'
-                },
-                'phoneFormContentInfo': {
-                    'isExist': false
-                },
-                'phoneTitleInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('成功之后清空了输入：姓名', function () {
-            expect(data.formContentInfo.nameValue).to.be.empty;
-        });
-
-        it('成功之后清空了输入：身份证', function () {
-            expect(data.formContentInfo.idValue).to.be.empty;
-        });
-
-        it('成功之后隐藏了：手机号的表头', function () {
-            expect(data.phoneTitleInfo.isExist).to.be.false;
-        });
-
-        it('成功之后隐藏了：手机号的表单', function () {
-            expect(data.phoneFormContentInfo.isExist).to.be.false;
-        });
-
-        it('有消息提示: 认证成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '认证成功'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
-            // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1,
-                phone: '12345678901',
-                verify_code: '654321'
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('有消息提示: 手机号验证失败', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '手机号验证失败',
+      });
     });
 
-    describe('第五步：3s后再次获取页面状态', function () {
-        it('已经跳转到了提现页面', function () {
-            expect(resultData.isRedirectToPageWithdraw).to.be.true;
-        });
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+
+    it('出现验证手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.true;
+    });
+
+    it('出现验证手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.true;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第四步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        phoneFormContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        phoneTitleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.phoneFormContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.phoneFormContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第五步：再次点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '认证成功',
+        },
+        phoneFormContentInfo: {
+          isExist: false,
+        },
+        phoneTitleInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('成功之后清空了输入：姓名', function () {
+      expect(data.formContentInfo.nameValue).to.be.empty;
+    });
+
+    it('成功之后清空了输入：身份证', function () {
+      expect(data.formContentInfo.idValue).to.be.empty;
+    });
+
+    it('成功之后隐藏了：手机号的表头', function () {
+      expect(data.phoneTitleInfo.isExist).to.be.false;
+    });
+
+    it('成功之后隐藏了：手机号的表单', function () {
+      expect(data.phoneFormContentInfo.isExist).to.be.false;
+    });
+
+    it('有消息提示: 认证成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '认证成功',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi，且请求中包含了手机号和验证码', function () {
+      // 注意这里很重要，因为有手机号验证的场景下是需要额外传入手机号和验证码的
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+          phone: '12345678901',
+          verify_code: '654321',
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：3s后再次获取页面状态', function () {
+    it('已经跳转到了提现页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageWithdraw =
+        'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
+
+      const result = matmanResult.isExistPage(pageWithdraw, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-51068401.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-51068401.test.js
index 4ebd3e4..6adf65a 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-51068401.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-51068401.test.js
@@ -1,367 +1,403 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet');
 
 describe('verify-identity.html：验证retcode=51068401', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_51068401',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'dlgGoDownloadQQInfo': {
+          'isExist': false,
+        },
+        'dlgGoQQWalletInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第四步：点击弹窗中的取消按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_51068401'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('clickDlgCancel');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
+    it('弹窗消失', function () {
+      expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第五步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
     });
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第三步：点击弹窗中的取消按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDlgCancel');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹窗消失', function () {
-            expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
-        });
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
     });
 
-    describe('第四步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了获取验证码的cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码的monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('请求了获取验证码的cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
     });
 
-    describe('第五步：点击弹窗中的去实名认证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickDlgOk');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '确定',
-                    'isExist': true,
-                    'text': 'QQ未下载，请下载QQ'
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('调用了打开QQ并去实名认证的jsbridge串', function () {
-            // TODO 这里应该要提供一下简便的方式
-            const result = e2eQueue.queue.filter((item) => {
-                return item.eventName === 'console'
-                    && item.args[0] === 'log'
-                    && item.args[1] === '[jumpToQQWallet] url'
-                    && item.args[2] === 'mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web';
-            });
-
-            expect(result).to.have.lengthOf(1);
-
-        });
-
-        it('弹出对话框: 提示要去下载QQ', function () {
-            expect(data.dlgGoDownloadQQInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '确定',
-                'isExist': true,
-                'text': 'QQ未下载，请下载QQ'
-            });
-        });
+    it('上报了获取验证码的monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：点击弹窗中的去实名认证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDlgOk');
+    });
 
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          btnCancelText: '取消',
+          btnOkText: '确定',
+          isExist: true,
+          text: 'QQ未下载，请下载QQ',
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第六步：点击下载qq弹窗中的确定按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDownloadDlgOk');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isExist': false
-                },
-                'formContentInfo': {
-                    'isExist': false
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': false
-                }
-            });
-        });
-
-        it('跳转到手机QQ下载页', function () {
-            expect(resultData.isRedirectToQQPage).to.be.true;
-        });
+    it('调用了打开QQ并去实名认证的jsbridge串', function () {
+      expect(matmanResult.isExistJSBridge('mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web')).to.be.true;
+    });
+
+    it('弹出对话框: 提示要去下载QQ', function () {
+      expect(data.dlgGoDownloadQQInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '确定',
+        isExist: true,
+        text: 'QQ未下载，请下载QQ',
+      });
+    });
+  });
+
+  describe('第七步：点击下载qq弹窗中的确定按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDownloadDlgOk');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isExist: false,
+        },
+        formContentInfo: {
+          isExist: false,
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: false,
+        },
+      });
+    });
+  });
+
+  describe('第八步：再次获取页面状态', function () {
+    it('跳转到手机QQ下载页', function () {
+      // 过滤出是否跳转到其他页面
+      const pageToQQ = 'im.qq.com/immobile/index.html';
+
+      const result = matmanResult.isExistPage(pageToQQ, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-66209002.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-66209002.test.js
index e213479..b61fd05 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-66209002.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-66209002.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证retcode=66209002', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_66209002',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '输入信息有误，请核对后重试',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 输入信息有误，请核对后重试', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '输入信息有误，请核对后重试',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_66209002'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '输入信息有误，请核对后重试'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 输入信息有误，请核对后重试', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '输入信息有误，请核对后重试'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-66210007.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-66210007.test.js
deleted file mode 100644
index 66a250d..0000000
--- a/test/e2e/page-verify-identity/verify-fail-retcode-66210007.test.js
+++ /dev/null
@@ -1,91 +0,0 @@
-const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
-
-const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
-
-describe('verify-identity.html：验证retcode=66210007', function () {
-    this.timeout(30000);
-
-    let resultData;
-
-    before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_66210007'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let e2eQueue;
-
-        before(function () {
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        it('已经跳转到了登录页面', function () {
-            expect(resultData.isRedirectToLogin).to.be.true;
-        });
-    });
-});
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-66219002.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-66219002.test.js
index ea7c8a2..b2e42e7 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-66219002.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-66219002.test.js
@@ -1,155 +1,206 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail');
 
 describe('verify-identity.html：验证retcode=66219002', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_66219002',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputName');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('姓名为 至尊宝', function () {
+      expect(data.formContentInfo.nameValue).to.equal('至尊宝');
+    });
+
+    it('身份证为 431129199909098888', function () {
+      expect(data.formContentInfo.idValue).to.equal('431129199909098888');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '请求太频繁，请稍后再试',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('有消息提示: 请求太频繁，请稍后再试', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '请求太频繁，请稍后再试',
+      });
+    });
 
-    let resultData;
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_66219002'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputName');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('姓名为 至尊宝', function () {
-            expect(data.formContentInfo.nameValue).to.equal('至尊宝');
-        });
-
-        it('身份证为 431129199909098888', function () {
-            expect(data.formContentInfo.idValue).to.equal('431129199909098888');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '请求太频繁，请稍后再试'
-                },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('有消息提示: 请求太频繁，请稍后再试', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '请求太频繁，请稍后再试'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': { 'isBtnActive': true, 'isExist': true, 'text': '申请验证' },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': { 'isExist': false },
-                'titleInfo': { 'isExist': true, 'title': '请核实身份信息，确保成功提现' }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-identity/verify-fail-retcode-66230402.test.js b/test/e2e/page-verify-identity/verify-fail-retcode-66230402.test.js
index 7c31872..0f8c8b8 100644
--- a/test/e2e/page-verify-identity/verify-fail-retcode-66230402.test.js
+++ b/test/e2e/page-verify-identity/verify-fail-retcode-66230402.test.js
@@ -1,368 +1,403 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-identity/verify-fail-go-qq-wallet');
 
 describe('verify-identity.html：验证retcode=66230402', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_tenpay_auth_info: 'fail_retcode_66230402',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        'dlgGoDownloadQQInfo': {
+          'isExist': false,
+        },
+        'dlgGoQQWalletInfo': {
+          'isExist': false,
+        },
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: { isExist: false },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第二步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputNameAndId');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+  });
+
+  describe('第三步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
+    });
+
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
+    });
+
+    it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第四步：点击弹窗中的取消按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_tenpay_auth_info': 'fail_retcode_66230402'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('clickDlgCancel');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第一步：姓名输入框输入: 至尊宝，身份证输入框输入: 432219199909098888', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputNameAndId');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
+    it('弹窗消失', function () {
+      expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第五步：点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
     });
 
-    describe('第二步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了实名认证 get_tenpay_auth_info 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了实名认证 get_tenpay_auth_info 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          btnCancelText: '取消',
+          btnOkText: '去认证',
+          isExist: true,
+          text:
+            '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第三步：点击弹窗中的取消按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDlgCancel');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹窗消失', function () {
-            expect(data.dlgGoQQWalletInfo.isExist).to.be.false;
-        });
+    it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
+      expect(data.dlgGoQQWalletInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '去认证',
+        isExist: true,
+        text:
+          '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证',
+      });
     });
 
-    describe('第四步：点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '去认证',
-                    'isExist': true,
-                    'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('弹出对话框: 提示要去QQ钱包进行实名认证', function () {
-            expect(data.dlgGoQQWalletInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '去认证',
-                'isExist': true,
-                'text': '根据相关政策需求，您需要前往QQ钱包>设置>实名认证中添加银行卡，以完成实名认证'
-            });
-        });
-
-        it('请求了获取验证码的cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info', {
-                name: '至尊宝',
-                idcard: '431129199909098888',
-                // suin: 2067779134,
-                // skey: @YUSTJ1bB0,
-                target_auth_type: 1
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码的monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450607, 34450608]);
-
-            expect(result).to.be.true;
-        });
+    it('请求了获取验证码的cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_tenpay_auth_info',
+        {
+          name: '至尊宝',
+          idcard: '431129199909098888',
+          // suin: 2067779134,
+          // skey: @YUSTJ1bB0,
+          target_auth_type: 1,
+        },
+      );
+
+      expect(result).to.be.true;
     });
 
-    describe('第五步：点击弹窗中的去实名认证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickDlgOk');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'btnCancelText': '取消',
-                    'btnOkText': '确定',
-                    'isExist': true,
-                    'text': 'QQ未下载，请下载QQ'
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '申请验证'
-                },
-                'formContentInfo': {
-                    'idValue': '431129199909098888',
-                    'idValueInputType': 'tel',
-                    'idValueLabel': '身份证',
-                    'idValuePlaceholder': '请输入身份证',
-                    'isExist': true,
-                    'nameValue': '至尊宝',
-                    'nameValueInputType': 'text',
-                    'nameValueLabel': '姓名',
-                    'nameValuePlaceholder': '请输入姓名'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请核实身份信息，确保成功提现'
-                }
-            });
-        });
-
-        it('调用了打开QQ并去实名认证的jsbridge串', function () {
-            // TODO 这里应该要提供一下简便的方式
-            // eslint-disable-next-line max-nested-callbacks
-            const result = e2eQueue.queue.filter((item) => {
-                return item.eventName === 'console'
-                    && item.args[0] === 'log'
-                    && item.args[1] === '[jumpToQQWallet] url'
-                    && item.args[2] === 'mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web';
-            });
-
-            expect(result).to.have.lengthOf(1);
-
-        });
-
-        it('弹出对话框: 提示要去下载QQ', function () {
-            expect(data.dlgGoDownloadQQInfo).to.eql({
-                'btnCancelText': '取消',
-                'btnOkText': '确定',
-                'isExist': true,
-                'text': 'QQ未下载，请下载QQ'
-            });
-        });
+    it('上报了获取验证码的monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450607, 34450608]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：点击弹窗中的去实名认证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDlgOk');
+    });
 
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          btnCancelText: '取消',
+          btnOkText: '确定',
+          isExist: true,
+          text: 'QQ未下载，请下载QQ',
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '申请验证',
+        },
+        formContentInfo: {
+          idValue: '431129199909098888',
+          idValueInputType: 'text',
+          idValueLabel: '身份证',
+          idValuePlaceholder: '请输入身份证',
+          isExist: true,
+          nameValue: '至尊宝',
+          nameValueInputType: 'text',
+          nameValueLabel: '姓名',
+          nameValuePlaceholder: '请输入姓名',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请核实身份信息，确保成功提现',
+        },
+      });
     });
 
-    describe('第六步：点击下载qq弹窗中的确定按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickDownloadDlgOk');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'dlgGoDownloadQQInfo': {
-                    'isExist': false
-                },
-                'dlgGoQQWalletInfo': {
-                    'isExist': false
-                },
-                'formBtnInfo': {
-                    'isExist': false
-                },
-                'formContentInfo': {
-                    'isExist': false
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': false
-                }
-            });
-        });
-
-        it('跳转到手机QQ下载页', function () {
-            expect(resultData.isRedirectToQQPage).to.be.true;
-        });
+    it('调用了打开QQ并去实名认证的jsbridge串', function () {
+      expect(matmanResult.isExistJSBridge('mqqapi://forward/url?url_prefix=aHR0cHM6Ly9ub3cucXEuY29tL3FxX21vYmlsZS9hZGRfY2FyZC5odG1sP193dj01MTIzJnVpbj0=&version=1&src_type=web')).to.be.true;
+    });
+
+    it('弹出对话框: 提示要去下载QQ', function () {
+      expect(data.dlgGoDownloadQQInfo).to.eql({
+        btnCancelText: '取消',
+        btnOkText: '确定',
+        isExist: true,
+        text: 'QQ未下载，请下载QQ',
+      });
+    });
+  });
+
+  describe('第七步：点击下载qq弹窗中的确定按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickDownloadDlgOk');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        dlgGoDownloadQQInfo: {
+          isExist: false,
+        },
+        dlgGoQQWalletInfo: {
+          isExist: false,
+        },
+        formBtnInfo: {
+          isExist: false,
+        },
+        formContentInfo: {
+          isExist: false,
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: false,
+        },
+      });
+    });
+  });
+
+  describe('第八步：再次获取页面状态', function () {
+    it('跳转到手机QQ下载页', function () {
+      // 过滤出是否跳转到其他页面
+      const pageToQQ = 'im.qq.com/immobile/index.html';
+
+      const result = matmanResult.isExistPage(pageToQQ, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/basic-check.test.js b/test/e2e/page-verify-phone/basic-check.test.js
index 2ba1637..aa39270 100644
--- a/test/e2e/page-verify-phone/basic-check.test.js
+++ b/test/e2e/page-verify-phone/basic-check.test.js
@@ -1,79 +1,69 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistTDBank, isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/basic-check');
 
 describe('verify-phone.html：常规检查', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
 
-    before(function () {
-        return checkPage({ show: false, doNotCloseBrowser: false, useRecorder: true })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
     });
+  });
 
-    describe('检查基本信息', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.data;
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
+  describe('检查基本信息', function () {
+    let data;
 
-        it('上报了tdbank：phone_verify_view 页面曝光', function () {
-            const result = e2eQueue.isExistTDBank({
-                module: 'annual_hongbao',
-                action: 'phone_verify_view'
-            });
-
-            expect(result).to.be.true;
-        });
+    before(function () {
+      data = matmanResult.get('init');
+    });
 
-        it('上报了monitor：33968901 【now直播H5版个人中心-手机认证】PV', function () {
-            const result = e2eQueue.isExistMonitor([33968901]);
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
 
-            expect(result).to.be.true;
-        });
+    it('上报了tdbank：phone_verify_view 页面曝光', function () {
+      expect(isExistTDBank(matmanResult, {
+        module: 'annual_hongbao',
+        action: 'phone_verify_view',
+      })).to.be.true;
+    });
 
-        it('上报了monitor：33968904 【now直播H5版个人中心-手机认证】首次加载成功', function () {
-            const result = e2eQueue.isExistMonitor([33968904]);
+    it('上报了monitor：33968901 【now直播H5版个人中心-手机认证】PV', function () {
+      expect(isExistMonitor(matmanResult, [33968901])).to.be.true;
+    });
 
-            expect(result).to.be.true;
-        });
+    it('上报了monitor：33968904 【now直播H5版个人中心-手机认证】首次加载成功', function () {
+      expect(isExistMonitor(matmanResult, [33968904])).to.be.true;
     });
+  });
 });
-
-
diff --git a/test/e2e/page-verify-phone/check-verify-code-basic-0.test.js b/test/e2e/page-verify-phone/check-verify-code-basic-0.test.js
index 53cbcd0..74ebdce 100644
--- a/test/e2e/page-verify-phone/check-verify-code-basic-0.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-basic-0.test.js
@@ -1,279 +1,285 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic');
 
 describe('verify-phone.html：验证手机操作基本逻辑，且成功后到身份证认证页面', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage(
+      {
+        show: false,
+        doNotCloseBrowser: false,
+        useRecorder: true,
+      },
+      { not_verify_id: 0 },
+    );
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为空', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
+    });
+
+    it('验证码为空', function () {
+      expect(data.formContentInfo.verifyCode).to.be.empty;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第二步：电话号码输入框输入: 12345678901', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhone');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第三步：尝试点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('没有任何消息提示', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第四步：验证码输入框输入: 654321', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true
-        }, { not_verify_id: 0 })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputCode');
     });
 
-    describe('第一步：开始操作之前', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('init');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为空', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
-
-        it('验证码为空', function () {
-            expect(data.formContentInfo.verifyCode).to.be.empty;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第二步：电话号码输入框输入: 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhone');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
     });
 
-    describe('第三步：尝试点击验证按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('没有任何消息提示', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第五步：再次尝试点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
     });
 
-    describe('第四步：验证码输入框输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '注册成功',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第五步：再次尝试点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '注册成功'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('成功之后清空了输入：手机号码', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
-
-        it('成功之后清空了输入：验证码', function () {
-            expect(data.formContentInfo.verifyCode).to.be.empty;
-        });
-
-        it('有消息提示: 注册成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '注册成功'
-            });
-        });
-
-        it('请求了获取验证码 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
+    it('成功之后清空了输入：手机号码', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
     });
 
-    describe('第六步：3s后再次获取页面状态', function () {
-        it('已经跳转到了身份证认证页面', function () {
-            expect(resultData.isRedirectToPageVerifyIdentity).to.be.true;
-        });
+    it('成功之后清空了输入：验证码', function () {
+      expect(data.formContentInfo.verifyCode).to.be.empty;
+    });
+
+    it('有消息提示: 注册成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '注册成功',
+      });
+    });
+
+    it('请求了获取验证码 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了获取验证码 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：3s后再次获取页面状态', function () {
+    it('已经跳转到了身份证认证页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageVerifyIdentity =
+        'now.qq.com/h5/personal-center/verify-identity.html?_bid=3683&from=1';
+
+      const result = matmanResult.isExistPage(pageVerifyIdentity, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-basic-1.test.js b/test/e2e/page-verify-phone/check-verify-code-basic-1.test.js
index eebb321..58b4b6a 100644
--- a/test/e2e/page-verify-phone/check-verify-code-basic-1.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-basic-1.test.js
@@ -1,279 +1,285 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-basic');
 
 describe('verify-phone.html：验证手机操作基本逻辑，且成功后到提现页面', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage(
+      {
+        show: false,
+        doNotCloseBrowser: false,
+        useRecorder: true,
+      },
+      { not_verify_id: 1 },
+    );
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为空', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
+    });
+
+    it('验证码为空', function () {
+      expect(data.formContentInfo.verifyCode).to.be.empty;
+    });
+
+    it('验证按钮为非激活态，即不可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第二步：电话号码输入框输入: 12345678901', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhone');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第三步：尝试点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('没有任何消息提示', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
+    });
+  });
+
+  describe('第四步：验证码输入框输入: 654321', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true
-        }, { not_verify_id: 1 })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputCode');
     });
 
-    describe('第一步：开始操作之前', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('init');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为空', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
-
-        it('验证码为空', function () {
-            expect(data.formContentInfo.verifyCode).to.be.empty;
-        });
-
-        it('验证按钮为非激活态，即不可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第二步：电话号码输入框输入: 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhone');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.false;
-        });
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
     });
 
-    describe('第三步：尝试点击验证按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn1');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('没有任何消息提示', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第五步：再次尝试点击验证按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyBtn2');
     });
 
-    describe('第四步：验证码输入框输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '认证成功',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第五步：再次尝试点击验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '认证成功'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('成功之后清空了输入：手机号码', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
-
-        it('成功之后清空了输入：验证码', function () {
-            expect(data.formContentInfo.verifyCode).to.be.empty;
-        });
-
-        it('有消息提示: 认证成功', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '认证成功'
-            });
-        });
-
-        it('请求了获取验证码 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
+    it('成功之后清空了输入：手机号码', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
     });
 
-    describe('第六步：3s后再次获取页面状态', function () {
-        it('已经跳转到了提现页面', function () {
-            expect(resultData.isRedirectToPageWithdraw).to.be.true;
-        });
+    it('成功之后清空了输入：验证码', function () {
+      expect(data.formContentInfo.verifyCode).to.be.empty;
+    });
+
+    it('有消息提示: 认证成功', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '认证成功',
+      });
+    });
+
+    it('请求了获取验证码 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了获取验证码 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第六步：3s后再次获取页面状态', function () {
+    it('已经跳转到了提现页面', function () {
+      // 过滤出是否跳转到其他页面
+      const pageWithdraw =
+        'now.qq.com/activity/c-annual-redpacket/withdraw.html?from=qqbrowser&_bid=3632&now_id=93033660';
+
+      const result = matmanResult.isExistPage(pageWithdraw, {}, 200);
+
+      expect(result).to.be.true;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-12.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-12.test.js
index f3a4944..14445c7 100644
--- a/test/e2e/page-verify-phone/check-verify-code-fail-12.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-12.test.js
@@ -1,177 +1,209 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
 
 describe('verify-phone.html：验证手机号错误code=12', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'fail_12',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第三步：点击获验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'fail_12'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '验证码错误'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 验证码错误', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '验证码错误'
-            });
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了手机认证 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '验证码错误',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 验证码错误', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '验证码错误',
+      });
+    });
+
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了手机认证 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-17.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-17.test.js
index 103a7ff..5802974 100644
--- a/test/e2e/page-verify-phone/check-verify-code-fail-17.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-17.test.js
@@ -1,177 +1,209 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
 
 describe('verify-phone.html：验证手机号错误code=17', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'fail_17',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第三步：点击获验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'fail_17'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '操作太频繁，请稍后再试'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 操作太频繁，请稍后再试', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '操作太频繁，请稍后再试'
-            });
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了手机认证 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '操作太频繁，请稍后再试',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 操作太频繁，请稍后再试', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '操作太频繁，请稍后再试',
+      });
+    });
+
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了手机认证 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-2.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-2.test.js
index ef26aa0..fc009d5 100644
--- a/test/e2e/page-verify-phone/check-verify-code-fail-2.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-2.test.js
@@ -1,177 +1,209 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
 
 describe('verify-phone.html：验证手机号错误code=2', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'fail_2',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第三步：点击获验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'fail_2'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '验证码错误'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 验证码错误', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '验证码错误'
-            });
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了手机认证 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '验证码错误',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 验证码错误', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '验证码错误',
+      });
+    });
+
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了手机认证 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-900001.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-900001.test.js
index 81a45bb..d097b17 100644
--- a/test/e2e/page-verify-phone/check-verify-code-fail-900001.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-900001.test.js
@@ -1,177 +1,209 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
 
 describe('verify-phone.html：验证手机号错误code=900001', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'fail_900001',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第三步：点击获验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'fail_900001'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '该手机号已被绑定，请重新输入'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 该手机号已被绑定，请重新输入', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '该手机号已被绑定，请重新输入'
-            });
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了手机认证 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '该手机号已被绑定，请重新输入',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 该手机号已被绑定，请重新输入', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '该手机号已被绑定，请重新输入',
+      });
+    });
+
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了手机认证 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-900055.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-900055.test.js
index effaeb2..d64d38c 100644
--- a/test/e2e/page-verify-phone/check-verify-code-fail-900055.test.js
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-900055.test.js
@@ -1,177 +1,209 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
 
 describe('verify-phone.html：验证手机号错误code=900055', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'fail_900055',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
 
-    let resultData;
+  describe('第三步：点击获验证按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'fail_900055'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '验证码校验失败，请稍后重试(code=900055)'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 验证码校验失败，请稍后重试(code=900055)', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '验证码校验失败，请稍后重试(code=900055)'
-            });
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了手机认证 check_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450596, 34450597]);
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+      data = matmanResult.get('clickVerifyBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '验证码校验失败，请稍后重试(code=900055)',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 验证码校验失败，请稍后重试(code=900055)', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '验证码校验失败，请稍后重试(code=900055)',
+      });
+    });
+
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了手机认证 check_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450596, 34450597]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-error-100000.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-error-100000.test.js
deleted file mode 100644
index 803ca16..0000000
--- a/test/e2e/page-verify-phone/check-verify-code-fail-error-100000.test.js
+++ /dev/null
@@ -1,97 +0,0 @@
-const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
-
-const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail');
-
-describe('verify-phone.html：验证手机号时未登录', function () {
-    this.timeout(30000);
-
-    let resultData;
-
-    before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'check_verify_code': 'error_100000'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入: 12345678901，验证码输入: 654321', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneAndCode');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '654321',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('验证码为 654321', function () {
-            expect(data.formContentInfo.verifyCode).to.equal('654321');
-        });
-
-        it('验证按钮为激活态，即可点击', function () {
-            expect(data.formBtnInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let e2eQueue;
-
-        before(function () {
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('请求了手机认证 check_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/check_verify_code', {
-                phone: 12345678901,
-                verify_code: 654321
-            });
-
-            expect(result).to.be.true;
-        });
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        it('已经跳转到了登录页面', function () {
-            expect(resultData.isRedirectToLogin).to.be.true;
-        });
-    });
-});
diff --git a/test/e2e/page-verify-phone/check-verify-code-fail-go-login-error-100000.test.js b/test/e2e/page-verify-phone/check-verify-code-fail-go-login-error-100000.test.js
new file mode 100644
index 0000000..1215be6
--- /dev/null
+++ b/test/e2e/page-verify-phone/check-verify-code-fail-go-login-error-100000.test.js
@@ -0,0 +1,127 @@
+const { expect } = require('chai');
+
+const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/check-verify-code-fail-go-login');
+
+describe('verify-phone.html：验证手机号时未登录', function () {
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        check_verify_code: 'error_100000',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入: 12345678901，验证码输入: 654321', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneAndCode');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: true,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '654321',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('验证码为 654321', function () {
+      expect(data.formContentInfo.verifyCode).to.equal('654321');
+    });
+
+    it('验证按钮为激活态，即可点击', function () {
+      expect(data.formBtnInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获验证按钮', function () {
+    it('请求了手机认证 check_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/check_verify_code',
+        {
+          phone: 12345678901,
+          verify_code: 654321,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('已经跳转到了登录页面', function () {
+      const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
+
+      const result = matmanResult.isExistPage(loginPage, {}, 200);
+
+      expect(result).to.be.true;
+    });
+  });
+
+});
diff --git a/test/e2e/page-verify-phone/get-verify-code-basic.test.js b/test/e2e/page-verify-phone/get-verify-code-basic.test.js
index da85613..98ac828 100644
--- a/test/e2e/page-verify-phone/get-verify-code-basic.test.js
+++ b/test/e2e/page-verify-phone/get-verify-code-basic.test.js
@@ -1,319 +1,319 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-basic');
 
 describe('verify-phone.html：获取验证码的一些基本逻辑', function () {
-    this.timeout(30000);
+  this.timeout(30000);
 
-    let resultData;
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为空', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
+    });
+  });
+
+  describe('第二步：电话号码输入框输入一个非1开头的数字', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('notBeginWith1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为空，因为非1开头数字将被抛弃', function () {
+      expect(data.formContentInfo.phoneNum).to.be.empty;
+    });
+  });
+
+  describe('第三步：电话号码输入框输入 1234567890（还差一位）', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('lostLastOne');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '1234567890',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 1234567890', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('1234567890');
+    });
+
+    it('获取验证码按钮为非激活态，即不可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.false;
+    });
+  });
+
+  describe('第四步：尝试点击获取验证码按钮', function () {
+    let data;
 
     before(function () {
-        return checkPage({ show: false, doNotCloseBrowser: false, useRecorder: true })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('clickVerifyCodeBtn1');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '1234567890',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第一步：开始操作之前', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('init');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为空', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
+    it('按钮文案依然为：获取验证码', function () {
+      expect(data.formContentInfo.btnText).to.equal('获取验证码');
+    });
+
+    // TODO 没有发送接口请求
+
+    it('没有任何消息提示', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 
-    describe('第二步：电话号码输入框输入一个非1开头的数字', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('notBeginWith1');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为空，因为非1开头数字将被抛弃', function () {
-            expect(data.formContentInfo.phoneNum).to.be.empty;
-        });
+  describe('第五步：电话号码输入框再补1位数字，即 12345678901', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputAllPhoneNum');
     });
 
-    describe('第三步：电话号码输入框输入 1234567890（还差一位）', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('lostLastOne');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '1234567890',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 1234567890', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('1234567890');
-        });
-
-        it('获取验证码按钮为非激活态，即不可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.false;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第四步：尝试点击获取验证码按钮', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('clickVerifyCodeBtn1');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '1234567890',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('按钮文案依然为：获取验证码', function () {
-            expect(data.formContentInfo.btnText).to.equal('获取验证码');
-        });
-
-        // TODO 没有发送接口请求
-
-        it('没有任何消息提示', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
 
+    it('获取验证码按钮为激活态，即可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.true;
     });
+  });
+
+  describe('第六步：再次尝试点击获取验证码按钮', function () {
+    let data;
 
-    describe('第五步：电话号码输入框再补1位数字，即 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputAllPhoneNum');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('获取验证码按钮为激活态，即可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.true;
-        });
+    before(function () {
+      data = matmanResult.get('clickVerifyCodeBtn2');
     });
 
-    describe('第六步：再次尝试点击获取验证码按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyCodeBtn2');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '重发(60)',
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': true,
-                    'text': '验证码已发送'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('获取验证码按钮为非激活态，即不可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.false;
-        });
-
-        it('按钮文案变化为：重发(60)，即开始倒计时', function () {
-            expect(data.formContentInfo.btnText).to.equal('重发(60)');
-        });
-
-        it('有消息提示: 验证码已发送', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': true,
-                'text': '验证码已发送'
-            });
-        });
-
-        it('请求了获取验证码 get_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_verify_code', {
-                phone: 12345678901
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码 get_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450593, 34450594]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '重发(60)',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: true,
+          text: '验证码已发送',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第七步：3s后再次获取页面状态', function () {
-        let data;
+    it('获取验证码按钮为非激活态，即不可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.false;
+    });
 
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
+    it('按钮文案变化为：重发(60)，即开始倒计时', function () {
+      expect(data.formContentInfo.btnText).to.equal('重发(60)');
+    });
 
-        it('倒计时正在继续', function () {
-            expect(data.formContentInfo.btnText).is.match(/重发\(5\d+\)/);
-        });
+    it('有消息提示: 验证码已发送', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: true,
+        text: '验证码已发送',
+      });
+    });
+
+    it('请求了获取验证码 get_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_verify_code',
+        {
+          phone: 12345678901,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了获取验证码 get_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450593, 34450594]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第七步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
+    });
+
+    it('倒计时正在继续', function () {
+      expect(data.formContentInfo.btnText).is.match(/重发\(5\d+\)/);
+    });
 
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/get-verify-code-fail-17.test.js b/test/e2e/page-verify-phone/get-verify-code-fail-17.test.js
index b07044c..225607d 100644
--- a/test/e2e/page-verify-phone/get-verify-code-fail-17.test.js
+++ b/test/e2e/page-verify-phone/get-verify-code-fail-17.test.js
@@ -1,172 +1,204 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail');
 
 describe('verify-phone.html：获取验证码错误code=17', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_verify_code: 'fail_17',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
 
-    let resultData;
+  describe('第二步：电话号码输入框输入: 12345678901', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_verify_code': 'fail_17'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputPhoneNum');
     });
 
-    describe('第一步：电话号码输入框输入: 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneNum');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('获取验证码按钮为激活态，即可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('获取验证码按钮为激活态，即可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获取验证码按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyCodeBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '验证码获取太频繁',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 验证码获取太频繁', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '验证码获取太频繁',
+      });
+    });
+
+    it('请求了获取验证码 get_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_verify_code',
+        {
+          phone: 12345678901,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了获取验证码 get_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450593, 34450594]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
     });
 
-    describe('第二步：点击获取验证码按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyCodeBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '验证码获取太频繁'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 验证码获取太频繁', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '验证码获取太频繁'
-            });
-        });
-
-        it('请求了获取验证码 get_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_verify_code', {
-                phone: 12345678901
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码 get_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450593, 34450594]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
+  });
 });
diff --git a/test/e2e/page-verify-phone/get-verify-code-fail-900001.test.js b/test/e2e/page-verify-phone/get-verify-code-fail-900001.test.js
index 10f9ed1..899fb5a 100644
--- a/test/e2e/page-verify-phone/get-verify-code-fail-900001.test.js
+++ b/test/e2e/page-verify-phone/get-verify-code-fail-900001.test.js
@@ -1,172 +1,204 @@
 const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
+const { isExistMonitor } = require('@tencent/iv-tester');
 
 const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail');
 
 describe('verify-phone.html：获取验证码错误code=900001', function () {
-    this.timeout(30000);
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_verify_code: 'fail_900001',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
 
-    let resultData;
+  describe('第二步：电话号码输入框输入: 12345678901', function () {
+    let data;
 
     before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_verify_code': 'fail_900001'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
+      data = matmanResult.get('inputPhoneNum');
     });
 
-    describe('第一步：电话号码输入框输入: 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneNum');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('获取验证码按钮为激活态，即可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('获取验证码按钮为激活态，即可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获取验证码按钮', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('clickVerifyCodeBtn');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: true,
+          isSuccess: false,
+          text: '该手机号已被绑定，请重新输入',
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('有消息提示: 该手机号已被绑定，请重新输入', function () {
+      expect(data.messageTipsInfo).to.eql({
+        isExist: true,
+        isSuccess: false,
+        text: '该手机号已被绑定，请重新输入',
+      });
+    });
+
+    it('请求了获取验证码 get_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_verify_code',
+        {
+          phone: 12345678901,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('上报了获取验证码 get_verify_code 的 monitor', function () {
+      const result = isExistMonitor(matmanResult, [34450593, 34450594]);
+
+      expect(result).to.be.true;
+    });
+  });
+
+  describe('第四步：3s后再次获取页面状态', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('checkPageStatus');
     });
 
-    describe('第二步：点击获取验证码按钮', function () {
-        let data;
-        let e2eQueue;
-
-        before(function () {
-            data = resultData.get('clickVerifyCodeBtn');
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': true,
-                    'isSuccess': false,
-                    'text': '该手机号已被绑定，请重新输入'
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('有消息提示: 该手机号已被绑定，请重新输入', function () {
-            expect(data.messageTipsInfo).to.eql({
-                'isExist': true,
-                'isSuccess': false,
-                'text': '该手机号已被绑定，请重新输入'
-            });
-        });
-
-        it('请求了获取验证码 get_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_verify_code', {
-                phone: 12345678901
-            });
-
-            expect(result).to.be.true;
-        });
-
-        it('上报了获取验证码 get_verify_code 的 monitor', function () {
-            const result = e2eQueue.isExistMonitor([34450593, 34450594]);
-
-            expect(result).to.be.true;
-        });
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
     });
 
-    describe('第三步：3s后再次获取页面状态', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('checkPageStatus');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('消息在3s之后已消失', function () {
-            expect(data.messageTipsInfo.isExist).to.be.false;
-        });
+    it('消息在3s之后已消失', function () {
+      expect(data.messageTipsInfo.isExist).to.be.false;
     });
-});
\ No newline at end of file
+  });
+});
diff --git a/test/e2e/page-verify-phone/get-verify-code-fail-error-100000.test.js b/test/e2e/page-verify-phone/get-verify-code-fail-error-100000.test.js
deleted file mode 100644
index 9a3df96..0000000
--- a/test/e2e/page-verify-phone/get-verify-code-fail-error-100000.test.js
+++ /dev/null
@@ -1,93 +0,0 @@
-const { expect } = require('chai');
-const { e2eTest } = require('@tencent/iv-tester');
-
-const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail');
-
-describe('verify-phone.html：获取验证码时未登录', function () {
-    this.timeout(30000);
-
-    let resultData;
-
-    before(function () {
-        return checkPage({
-            show: false,
-            doNotCloseBrowser: false,
-            useRecorder: true,
-            queryDataMap: {
-                'get_verify_code': 'error_100000'
-            },
-            tag: __filename
-        })
-            .then(function (result) {
-                // console.log(JSON.stringify(result));
-                resultData = result;
-            });
-    });
-
-    describe('第一步：电话号码输入框输入: 12345678901', function () {
-        let data;
-
-        before(function () {
-            data = resultData.get('inputPhoneNum');
-        });
-
-        it('数据快照校验通过', function () {
-            expect(data).to.eql({
-                'formBtnInfo': {
-                    'isBtnActive': false,
-                    'isExist': true,
-                    'text': '验证'
-                },
-                'formContentInfo': {
-                    'btnText': '获取验证码',
-                    'isBtnActive': true,
-                    'isExist': true,
-                    'phoneNum': '12345678901',
-                    'phoneNumInputType': 'tel',
-                    'phoneNumPlaceholder': '请输入手机号码',
-                    'verifyCode': '',
-                    'verifyCodeInputType': 'tel',
-                    'verifyCodePlaceholder': '请输入验证码'
-                },
-                'messageTipsInfo': {
-                    'isExist': false
-                },
-                'titleInfo': {
-                    'isExist': true,
-                    'title': '请输入手机号并验证'
-                }
-            });
-        });
-
-        it('电话号码为 12345678901', function () {
-            expect(data.formContentInfo.phoneNum).to.equal('12345678901');
-        });
-
-        it('获取验证码按钮为激活态，即可点击', function () {
-            expect(data.formContentInfo.isBtnActive).to.be.true;
-        });
-    });
-
-    describe('第二步：点击获验证按钮', function () {
-        let e2eQueue;
-
-        before(function () {
-            e2eQueue = new e2eTest.RequestQueue(resultData.globalInfo.recorder.queue);
-        });
-
-        it('请求了获取验证码 get_verify_code 的 cgi', function () {
-            const result = e2eQueue.isExistCGI('now.qq.com/cgi-bin/ilive/auth/get_verify_code', {
-                phone: 12345678901
-            });
-
-            expect(result).to.be.true;
-        });
-
-    });
-
-    describe('第三步：3s后再次获取页面状态', function () {
-        it('已经跳转到了登录页面', function () {
-            expect(resultData.isRedirectToLogin).to.be.true;
-        });
-    });
-});
diff --git a/test/e2e/page-verify-phone/get-verify-code-fail-go-login-error-100000.test.js b/test/e2e/page-verify-phone/get-verify-code-fail-go-login-error-100000.test.js
new file mode 100644
index 0000000..2a0bd08
--- /dev/null
+++ b/test/e2e/page-verify-phone/get-verify-code-fail-go-login-error-100000.test.js
@@ -0,0 +1,122 @@
+const { expect } = require('chai');
+
+const checkPage = require('../../../DevOps/matman-app/case_modules/page-verify-phone/get-verify-code-fail-go-login');
+
+describe('verify-phone.html：获取验证码时未登录', function () {
+  this.timeout(30000);
+
+  let matmanResult;
+
+  before(async function () {
+    matmanResult = await checkPage({
+      show: false,
+      doNotCloseBrowser: false,
+      useRecorder: true,
+      queryDataMap: {
+        get_verify_code: 'error_100000',
+      },
+    });
+  });
+
+  describe('第一步：开始操作之前，等待页面加载完成', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('init');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: false,
+          isExist: true,
+          phoneNum: '',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+  });
+
+  describe('第二步：电话号码输入框输入: 12345678901', function () {
+    let data;
+
+    before(function () {
+      data = matmanResult.get('inputPhoneNum');
+    });
+
+    it('数据快照校验通过', function () {
+      expect(data).to.eql({
+        formBtnInfo: {
+          isBtnActive: false,
+          isExist: true,
+          text: '验证',
+        },
+        formContentInfo: {
+          btnText: '获取验证码',
+          isBtnActive: true,
+          isExist: true,
+          phoneNum: '12345678901',
+          phoneNumInputType: 'tel',
+          phoneNumPlaceholder: '请输入手机号码',
+          verifyCode: '',
+          verifyCodeInputType: 'tel',
+          verifyCodePlaceholder: '请输入验证码',
+        },
+        messageTipsInfo: {
+          isExist: false,
+        },
+        titleInfo: {
+          isExist: true,
+          title: '请输入手机号并验证',
+        },
+      });
+    });
+
+    it('电话号码为 12345678901', function () {
+      expect(data.formContentInfo.phoneNum).to.equal('12345678901');
+    });
+
+    it('获取验证码按钮为激活态，即可点击', function () {
+      expect(data.formContentInfo.isBtnActive).to.be.true;
+    });
+  });
+
+  describe('第三步：点击获验证按钮', function () {
+    it('请求了获取验证码 get_verify_code 的 cgi', function () {
+      const result = matmanResult.isExistXHR(
+        'now.qq.com/cgi-bin/ilive/auth/get_verify_code',
+        {
+          phone: 12345678901,
+        },
+      );
+
+      expect(result).to.be.true;
+    });
+
+    it('已经跳转到了登录页面', function () {
+      const loginPage = 'xui.ptlogin2.qq.com/cgi-bin/xlogin';
+
+      const result = matmanResult.isExistPage(loginPage, {}, 200);
+
+      expect(result).to.be.true;
+    });
+  });
+
+});
diff --git a/test/mocha.opts b/test/mocha.opts
deleted file mode 100644
index f5c6b0e..0000000
--- a/test/mocha.opts
+++ /dev/null
@@ -1,3 +0,0 @@
---require babel-core/register
---recursive
--r jsdom-global/register
\ No newline at end of file
diff --git a/test/run-e2e-test.js b/test/run-e2e-test.js
new file mode 100644
index 0000000..8af8012
--- /dev/null
+++ b/test/run-e2e-test.js
@@ -0,0 +1,51 @@
+const path = require('path');
+const { E2ERunner } = require('@tencent/dwt-driver-matman');
+const whistle = require('../DevOps/whistle');
+const { dwtOutputPath } = require('../dwt.config');
+
+(async () => {
+  const WORKSPACE_PATH = path.join(__dirname, '../');
+
+  const e2eRunner = new E2ERunner({
+    workspacePath: WORKSPACE_PATH,
+    outputPath: dwtOutputPath,
+  });
+
+  // 开始启动
+  await e2eRunner.start();
+
+  // 构建项目
+  await e2eRunner.buildProject('cross-env FEFLOW_ENV=test tnpm run build', {
+    cwd: WORKSPACE_PATH,
+  });
+
+  // 启动 mockstar
+  const mockstarAppPath = path.join(WORKSPACE_PATH, './DevOps/mockstar-app');
+  const mockstarPort = await e2eRunner.startMockstar(mockstarAppPath);
+
+  // 启动 whistle
+  const whistlePort = await e2eRunner.startWhistle({
+    getWhistleRules: () => {
+      return whistle.getProdRules({
+        projectRootPath: WORKSPACE_PATH,
+        shouldUseMockstar: true,
+        mockstarPort,
+      });
+    },
+  });
+
+  // 启动 matman
+  const matmanAppPath = path.join(WORKSPACE_PATH, './DevOps/matman-app');
+  await e2eRunner.startMatman(matmanAppPath);
+
+  // 启动 e2e test
+  await e2eRunner.runE2ETest('tnpm run test:e2e:direct', {
+    cwd: WORKSPACE_PATH,
+    whistlePort,
+    matmanAppPath,
+    mochawesomeJsonFilePath: path.join(dwtOutputPath, './mochawesome/mochawesome.json'),
+  });
+
+  // 结束
+  await e2eRunner.stop();
+})();
diff --git a/test/run-unit-test-after.js b/test/run-unit-test-after.js
new file mode 100644
index 0000000..7556750
--- /dev/null
+++ b/test/run-unit-test-after.js
@@ -0,0 +1,7 @@
+const { compress } = require('@tencent/dwt-driver-matman');
+const { dwtOutputPath } = require('../dwt.config');
+
+(async () => {
+  // 压缩产物
+  await compress(dwtOutputPath, 'UT-output.zip');
+})();
diff --git a/test/unit/business/base-inline-in-head/window-gException.test.js b/test/unit/business/base-inline-in-head/window-gException.test.js
index f659cd2..a9fc176 100644
--- a/test/unit/business/base-inline-in-head/window-gException.test.js
+++ b/test/unit/business/base-inline-in-head/window-gException.test.js
@@ -2,28 +2,33 @@ import { expect } from 'chai';
 
 import gException from '../../../../src/business/base-inline-in-head/window-gException';
 
+/**
+ * @author michealfeng
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/base-inline-in-head/window-gException.js', function () {
-    describe('提供了存在相应的方法', function () {
-        it('存在 gException.getDealError() 方法', function () {
-            expect(gException.getDealError).to.be.a('function');
-        });
-
-        it('存在 gException.TEMPLATE 值', function () {
-            expect(gException.TEMPLATE).to.be.a('string');
-        });
-
-        it('存在 gException.TEMPLATE_NOW_APP_BACK 值', function () {
-            expect(gException.TEMPLATE_NOW_APP_BACK).to.be.a('string');
-        });
-
-        it('存在 gException.ERR_TYPE 值', function () {
-            expect(gException.ERR_TYPE).to.be.a('object');
-        });
+  describe('提供了存在相应的方法', function () {
+    it('存在 gException.getDealError() 方法', function () {
+      expect(gException.getDealError).to.be.a('function');
     });
 
-    describe('常量为预期值', function () {
-        it('gException.TEMPLATE 值正确', function () {
-            const TEMPLATE = `
+    it('存在 gException.TEMPLATE 值', function () {
+      expect(gException.TEMPLATE).to.be.a('string');
+    });
+
+    it('存在 gException.TEMPLATE_NOW_APP_BACK 值', function () {
+      expect(gException.TEMPLATE_NOW_APP_BACK).to.be.a('string');
+    });
+
+    it('存在 gException.ERR_TYPE 值', function () {
+      expect(gException.ERR_TYPE).to.be.a('object');
+    });
+  });
+
+  describe('常量为预期值', function () {
+    it('gException.TEMPLATE 值正确', function () {
+      const TEMPLATE = `
             <div style="position:absolute; top:0; left:0; right:0; bottom:0; background:white;">
                 ###
                 <div onclick="window.location.reload()">
@@ -33,29 +38,29 @@ describe('测试 business/base-inline-in-head/window-gException.js', function ()
             </div>
     `;
 
-            expect(gException.TEMPLATE).to.equal(TEMPLATE);
-        });
+      expect(gException.TEMPLATE).to.equal(TEMPLATE);
+    });
 
-        it('gException.TEMPLATE_NOW_APP_BACK 值正确', function () {
-            const TEMPLATE_NOW_APP_BACK = `
+    it('gException.TEMPLATE_NOW_APP_BACK 值正确', function () {
+      const TEMPLATE_NOW_APP_BACK = `
             <div onclick="window.location.href = 'jsbridge://ui/closeCurrentWebView';" style="position:absolute; top:20px; top: constant(safe-area-inset-top); env(safe-area-inset-top); left:15px; background-image:url('//qpic.url.cn/feeds_pic/Q3auHgzwzM5DzQomKrug9tWOdbS9fAlOrytibPnkHZ8mthbD9OYSoVw/'); background-size:100%; width:36px; height:36px;"></div>
     `;
-            expect(gException.TEMPLATE_NOW_APP_BACK).to.equal(TEMPLATE_NOW_APP_BACK);
-        });
-
-        it('gException.ERR_TYPE 值正确', function () {
-            const ERR_TYPE = {
-                OTHER: 'OTHER',
-                NO_BADJS: 'NO_BADJS',
-                NO_MODJS: 'NO_MODJS',
-                NO_LIB: 'NO_LIB',
-                NO_JS: 'NO_JS',
-                RENDER_ERR: 'RENDER_ERR',
-                LOADFAIL: 'LOADFAIL'
-            };
-            expect(gException.ERR_TYPE).to.eql(ERR_TYPE);
-        });
+      expect(gException.TEMPLATE_NOW_APP_BACK).to.equal(TEMPLATE_NOW_APP_BACK);
+    });
+
+    it('gException.ERR_TYPE 值正确', function () {
+      const ERR_TYPE = {
+        OTHER: 'OTHER',
+        NO_BADJS: 'NO_BADJS',
+        NO_MODJS: 'NO_MODJS',
+        NO_LIB: 'NO_LIB',
+        NO_JS: 'NO_JS',
+        RENDER_ERR: 'RENDER_ERR',
+        LOADFAIL: 'LOADFAIL',
+      };
+      expect(gException.ERR_TYPE).to.eql(ERR_TYPE);
     });
+  });
 
 });
 
diff --git a/test/unit/business/base-inline-in-head/window-gReporter.test.js b/test/unit/business/base-inline-in-head/window-gReporter.test.js
index 274028e..410512e 100644
--- a/test/unit/business/base-inline-in-head/window-gReporter.test.js
+++ b/test/unit/business/base-inline-in-head/window-gReporter.test.js
@@ -2,6 +2,11 @@ import { expect } from 'chai';
 
 import gReporter from '../../../../src/business/base-inline-in-head/window-gReporter';
 
+/**
+ * @author haoyunlai
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/base-inline-in-head/window-gReporter.js', function () {
     describe('提供了存在相应的方法', function () {
         it('存在 gReporter.log() 方法', function () {
diff --git a/test/unit/business/base-inline-in-head/window-gTool.test.js b/test/unit/business/base-inline-in-head/window-gTool.test.js
index 9c2f2e3..fda7a4b 100644
--- a/test/unit/business/base-inline-in-head/window-gTool.test.js
+++ b/test/unit/business/base-inline-in-head/window-gTool.test.js
@@ -2,6 +2,11 @@ import { expect } from 'chai';
 
 import gTool from '../../../../src/business/base-inline-in-head/window-gTool';
 
+/**
+ * @author yanagao
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/base-inline-in-head/window-gTool.js', function () {
     describe('提供了存在相应的方法', function () {
         it('存在 gTool.isPack() 方法', function () {
diff --git a/test/unit/business/project-common/index.test.js b/test/unit/business/project-common/index.test.js
new file mode 100644
index 0000000..0b7069c
--- /dev/null
+++ b/test/unit/business/project-common/index.test.js
@@ -0,0 +1,46 @@
+/* eslint-disable max-nested-callbacks */
+import {
+    getNowId,
+    getQueryNotVerifyId,
+    jumpToWithdrawPage,
+    jumpToIdentityPage,
+} from '../../.././../src/business/project-common/index';
+import { expect } from 'chai';
+
+describe('测试 business/project-common/index', () => {
+    describe('各个方法存在', () => {
+        it('getNowId 是函数', () => {
+            expect(getNowId).to.be.a('function');
+        });
+
+        it('getQueryNotVerifyId 是函数', () => {
+            expect(getQueryNotVerifyId).to.be.a('function');
+        });
+
+        it('jumpToWithdrawPage 是函数', () => {
+            expect(jumpToWithdrawPage).to.be.a('function');
+        });
+
+        it('jumpToIdentityPage 是函数', () => {
+            expect(jumpToIdentityPage).to.be.a('function');
+        });
+    });
+
+    describe('函数调用结果', () => {
+        it('getNowId 是函数', () => {
+            expect(getNowId()).to.be.a('string');
+        });
+
+        it('getQueryNotVerifyId 是函数', () => {
+            expect(getQueryNotVerifyId()).to.be.a('string');
+        });
+
+        it('jumpToWithdrawPage 是函数', () => {
+            expect(jumpToWithdrawPage()).to.be.undefined;
+        });
+
+        it('jumpToIdentityPage 是函数', () => {
+            expect(jumpToIdentityPage()).to.be.undefined;
+        });
+    });
+});
\ No newline at end of file
diff --git a/test/unit/business/project-dialog /index.test.js b/test/unit/business/project-dialog /index.test.js
new file mode 100644
index 0000000..3f58bbd
--- /dev/null
+++ b/test/unit/business/project-dialog /index.test.js	
@@ -0,0 +1,16 @@
+import { expect } from 'chai';
+import showDialog from '../../../../src/business/project-dialog/index';
+
+describe('测试 /business/project-dialog/index', () => {
+    describe('showDialog 函数存在', () => {
+        it('函数存在', () => {
+            expect(showDialog).to.be.a('function');
+        });
+    });
+    describe('showDialog 调用', () => {
+        expect(showDialog({
+            _onEnter: () => {},
+            _onCancel: () => {}
+        })).to.be.undefined;
+    });
+});
\ No newline at end of file
diff --git a/test/unit/business/project-qq-wallet/index.test.js b/test/unit/business/project-qq-wallet/index.test.js
new file mode 100644
index 0000000..e3f284a
--- /dev/null
+++ b/test/unit/business/project-qq-wallet/index.test.js
@@ -0,0 +1,26 @@
+import { expect } from 'chai';
+import {
+    jumpToQQWallet,
+    showDialogToGoQQWallet
+} from '../../../../src/business/project-qq-wallet/index';
+
+describe('测试 //business/project-qq-wallet/index', () => {
+    describe('函数存在', () => {
+        it('jumpToQQWallet 函数存在', () => {
+            expect(jumpToQQWallet).to.be.a('function');
+        });
+
+        it('showDialogToGoQQWallet 函数存在', () => {
+            expect(showDialogToGoQQWallet).to.be.a('function');
+        });
+    });
+    describe('函数调用', () => {
+        it('jumpToQQWallet 函数调用', () => {
+            jumpToQQWallet();
+        });
+
+        it('showDialogToGoQQWallet 函数调用', () => {
+            expect(showDialogToGoQQWallet()).to.be.undefined;
+        });
+    });
+});
\ No newline at end of file
diff --git a/test/unit/business/project-verify-identity/config.test.js b/test/unit/business/project-verify-identity/config.test.js
index ca4fd22..bbd88eb 100644
--- a/test/unit/business/project-verify-identity/config.test.js
+++ b/test/unit/business/project-verify-identity/config.test.js
@@ -53,6 +53,11 @@ stub_common;
  * 开始测试
  */
 
+/**
+ * @author zivjczhang
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/project-verify-identity/index', function () {
     before(function () {
         // run before all tests in this block
diff --git a/test/unit/business/project-verify-identity/index.test.js b/test/unit/business/project-verify-identity/index.test.js
index 2dad423..46a7c90 100644
--- a/test/unit/business/project-verify-identity/index.test.js
+++ b/test/unit/business/project-verify-identity/index.test.js
@@ -33,6 +33,11 @@ const {
 
 var r, stub_common;
 
+/**
+ * @author pumpkincai
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/project-verify-identity/index', function () {
     before(function () {
         // run before all tests in this block
@@ -77,7 +82,6 @@ describe('测试 business/project-verify-identity/index', function () {
     });
 
     describe('检查 checkIfIdValid 方法', function () {
-
         it('检查：匹配正常的身份证号', function () {
             expect(checkIfIdValid('350624190111233999')).to.eql(true);
         });
@@ -166,7 +170,6 @@ describe('测试 business/project-verify-identity/index', function () {
         it('检查：7800年11月的28号，尾号为x', function () {
             expect(checkIfIdValid('35062478001128399x')).to.eql(true);
         });
-
     });
 
     describe('检查 CGI_RETCODE ', function () {
diff --git a/test/unit/business/project-verify-phone/index.test.js b/test/unit/business/project-verify-phone/index.test.js
index 9fdf336..8630f6c 100644
--- a/test/unit/business/project-verify-phone/index.test.js
+++ b/test/unit/business/project-verify-phone/index.test.js
@@ -38,6 +38,11 @@ const {
     '../../../../src/business/project-message-tips': sinon.stub().returns('fake adding')
 });
 
+/**
+ * @author tangitan
+ * @priority P0
+ * @casetype unit
+ */
 describe('测试 business/project-verify-phone/index', function () {
     let getQueryNotVerifyId,
         jumpToIdentityPage,
@@ -205,9 +210,7 @@ describe('测试 business/project-verify-phone/index', function () {
     });
 
     describe('检查 tickCallback ', function () {
-
         it('检查：延时', function () {
-            sinon.useFakeTimers();
             const clock = sinon.useFakeTimers({
                 now: 1565350020607,
                 toFake: ['setTimeout']
@@ -215,7 +218,6 @@ describe('测试 business/project-verify-phone/index', function () {
 
             clock.tick(600000);
             const tickCallback = sinon.spy();
-            // this.clock.tick(60000)
             countdown(tickCallback);
             expect(tickCallback.callCount).to.eql(1);
             clock.restore();
diff --git a/test/unit/datas/now-data-verify-identity/action.test.js b/test/unit/datas/now-data-verify-identity/action.test.js
new file mode 100644
index 0000000..6de5688
--- /dev/null
+++ b/test/unit/datas/now-data-verify-identity/action.test.js
@@ -0,0 +1,51 @@
+import { expect } from 'chai';
+import {
+    verifyIdentity,
+    setInputName,
+    setInputId,
+    showVerifyPhone,
+    clearVerifyIdentityForm
+} from '../../../../src/datas/now-data-verify-identity/action';
+
+describe('测试 /src/datas/now-data-verify-identity/action', () => {
+    describe('函数存在', () => {
+        it('verifyIdentity 存在', () => {
+            expect(verifyIdentity).to.be.a('function');
+        });
+        it('setInputName 存在', () => {
+            expect(setInputName).to.be.a('function');
+        });
+        it('setInputId 存在', () => {
+            expect(setInputId).to.be.a('function');
+        });
+        it('showVerifyPhone 存在', () => {
+            expect(showVerifyPhone).to.be.a('function');
+        });
+        it('clearVerifyIdentityForm 存在', () => {
+            expect(clearVerifyIdentityForm).to.be.a('function');
+        });
+    });
+
+    describe('函数调用', () => {
+        it('verifyIdentity 存在', () => {
+            const dispatch = () => {}
+            expect(verifyIdentity()(dispatch)).to.be.undefined;
+        });
+
+        it('setInputName 存在', () => {
+            expect(setInputName('')).to.be.an('object');
+        });
+
+        it('setInputId 存在', () => {
+            expect(setInputId('')).to.be.an('object');
+        });
+
+        it('showVerifyPhone 存在', () => {
+            expect(showVerifyPhone('')).to.be.an('object');
+        });
+
+        it('clearVerifyIdentityForm 存在', () => {
+            expect(clearVerifyIdentityForm('')).to.be.an('object');
+        });
+    });
+});
\ No newline at end of file
diff --git a/test/unit/datas/now-data-verify-identity/reducer.test.js b/test/unit/datas/now-data-verify-identity/reducer.test.js
new file mode 100644
index 0000000..7e48968
--- /dev/null
+++ b/test/unit/datas/now-data-verify-identity/reducer.test.js
@@ -0,0 +1,95 @@
+import { expect } from 'chai';
+import verifyIdentityInfo from '.././../../../src/datas/now-data-verify-identity/reducer';
+
+describe('测试 /src/datas/now-data-verify-identity/reducer', () => {
+    const initialState = {
+        /**
+           * 用户输入的姓名
+           * @type {String}
+           */
+        nameValue: '',
+      
+        /**
+           * 用户输入的身份证ID
+           * @type {String}
+           */
+        idValue: '',
+      
+        /**
+           * 用户输入的身份证ID是否合法
+           * @type {Boolean}
+           */
+        isIdValid: false,
+      
+        /**
+           * 是否正在校验中，避免用户重复点击时发出多条请求
+           * @type {Boolean}
+           */
+        isVerifyLoading: false,
+      
+        /**
+           * 发送验证接口之后，后台返回成功数据
+           */
+        resData: null,
+      
+        /**
+           * 发送验证接口之后，后台返回出错数据
+           */
+        resError: null,
+      
+        /**
+           * 是否需要再次校验手机号码，在某些场景下是需要的
+           * @type {Boolean}
+           */
+        shouldVerifyPhone: false,
+    };
+    it('IDENTITY_CLEAR_FORM', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_CLEAR_FORM'
+        }).isIdValid).to.be.false;
+    });
+    it('IDENTITY_INFO_REQUEST', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_INFO_REQUEST'
+        }).isVerifyLoading).to.be.true;
+    });
+    it('IDENTITY_INFO_REQUEST_SUCCESS', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_INFO_REQUEST_SUCCESS'
+        }).isVerifyLoading).to.be.false;
+    });
+    it('IDENTITY_INFO_REQUEST_FAIL', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_INFO_REQUEST_FAIL',
+            data: {
+                error: null
+            }
+        }).resError).to.be.null;
+    });
+    it('IDENTITY_SET_INPUT_NAME', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_SET_INPUT_NAME',
+            data: {
+                nameValue: 'tangitan'
+            }
+        }).nameValue).to.equal('tangitan');
+    });
+    it('IDENTITY_SET_INPUT_ID', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_SET_INPUT_ID',
+            data: {
+                idValue: 1
+            }
+        }).idValue).to.equal(1);
+    });
+    it('IDENTITY_SHOW_VERIFY_PHONE', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: 'IDENTITY_SHOW_VERIFY_PHONE',
+        }).shouldVerifyPhone).to.be.true;
+    });
+    it('', () => {
+        expect(verifyIdentityInfo(initialState, {
+            type: ''
+        }).shouldVerifyPhone).to.be.false;
+    });
+});
\ No newline at end of file
diff --git a/test/unit/datas/now-data-verify-phone/action.test.js b/test/unit/datas/now-data-verify-phone/action.test.js
new file mode 100644
index 0000000..7516f32
--- /dev/null
+++ b/test/unit/datas/now-data-verify-phone/action.test.js
@@ -0,0 +1,61 @@
+import { expect } from 'chai';
+import {
+    getVerifyCode,
+    checkVerifyCode,
+    setInputPhone,
+    setInputCode,
+    sendCountdown,
+    clearVerifyPhoneForm
+} from '../../../../src/datas/now-data-verify-phone/action';
+
+describe('测试 src/datas/now-data-verify-phone/action', () => {
+    describe('函数存在', () => {
+        it('getVerifyCode 存在', () => {
+            expect(getVerifyCode).to.be.a('function');
+        });
+        it('checkVerifyCode 存在', () => {
+            expect(checkVerifyCode).to.be.a('function');
+        });
+        it('setInputPhone 存在', () => {
+            expect(setInputPhone).to.be.a('function');
+        });
+        it('setInputCode 存在', () => {
+            expect(setInputCode).to.be.a('function');
+        });
+        it('sendCountdown 存在', () => {
+            expect(sendCountdown).to.be.a('function');
+        });
+        it('clearVerifyPhoneForm 存在', () => {
+            expect(clearVerifyPhoneForm).to.be.a('function');
+        });
+    });
+
+    describe('函数调用', () => {
+        it('getVerifyCode 存在', () => {
+            const dispatch = () => {}
+            expect(getVerifyCode()(dispatch)).to.be.undefined;
+        });
+
+        it('checkVerifyCode 存在', () => {
+            const dispatch = () => {}
+            expect(checkVerifyCode()(dispatch)).to.be.undefined;
+        });
+
+        it('setInputPhone 存在', () => {
+            expect(setInputPhone()).to.be.an('object');
+        });
+
+
+        it('setInputCode 存在', () => {
+            expect(setInputCode('')).to.be.an('object');
+        });
+
+        it('sendCountdown 存在', () => {
+            expect(sendCountdown()).to.be.an('object');
+        });
+
+        it('clearVerifyPhoneForm 存在', () => {
+            expect(clearVerifyPhoneForm()).to.be.an('object');
+        });
+    });
+});
\ No newline at end of file
diff --git a/test/unit/datas/now-data-verify-phone/reducer.test.js b/test/unit/datas/now-data-verify-phone/reducer.test.js
new file mode 100644
index 0000000..efbc4bb
--- /dev/null
+++ b/test/unit/datas/now-data-verify-phone/reducer.test.js
@@ -0,0 +1,110 @@
+import { expect } from 'chai';
+import verifyPhoneInfo from '.././../../../src/datas/now-data-verify-phone/reducer';
+
+describe('测试 /src/datas/now-data-verify-phone/reducer', () => {
+    const initialState = {
+        /**
+           * 用户输入的手机号
+           * @type {String}
+           */
+        phoneNum: '',
+      
+        /**
+           * 用户输入的手机验证码
+           * @type {String}
+           */
+        verifyCode: '',
+      
+        /**
+           * 用户输入的手机号码是否合法
+           * @type {Boolean}
+           */
+        isPhoneValid: false,
+      
+        /**
+           * 是否处于验证码倒计时时间段
+           * @type {Boolean}
+           */
+        isCountingDown: false,
+      
+        /**
+           * 发送验证码按钮上显示的文案
+           * @type {String}
+           */
+        codeBtnText: '获取验证码',
+      
+        /**
+           * 是否正在获取验证码中，避免用户重复点击时发出多条请求
+           * @type {Boolean}
+           */
+        isGetLoading: false,
+      
+        /**
+           * 是否正在获取验证码中，避免用户重复点击时发出多条请求
+           * @type {Boolean}
+           */
+        isCheckLoading: false,
+    };      
+    it('PHONE_CLEAR_FORM', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'PHONE_CLEAR_FORM'
+        }).isPhoneValid).to.be.false;
+    });
+    it('VERIFY_CODE_INFO_REQUEST', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'VERIFY_CODE_INFO_REQUEST'
+        }).isGetLoading).to.be.true;
+    });
+    it('VERIFY_CODE_INFO_REQUEST_SUCCESS', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'VERIFY_CODE_INFO_REQUEST_SUCCESS'
+        }).isGetLoading).to.be.false;
+    });
+    it('VERIFY_CODE_INFO_REQUEST_FAIL', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'VERIFY_CODE_INFO_REQUEST_FAIL'
+        }).isGetLoading).to.be.false;
+    });
+    it('CHECK_VERIFY_CODE_INFO_REQUEST', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'CHECK_VERIFY_CODE_INFO_REQUEST'
+        }).isCheckLoading).to.be.true;
+    });
+    it('CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'CHECK_VERIFY_CODE_INFO_REQUEST_SUCCESS',
+        }).isCheckLoading).to.be.false;
+    });
+    it('CHECK_VERIFY_CODE_INFO_REQUEST_FAIL', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'CHECK_VERIFY_CODE_INFO_REQUEST_FAIL'
+        }).isCheckLoading).to.be.false;
+    });
+    it('PHONE_SET_INPUT_PHONE', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'PHONE_SET_INPUT_PHONE',
+            data: {
+                phoneNum: 110
+            }
+        }).phoneNum).to.equal(110);
+    });
+    it('PHONE_SET_INPUT_CODE', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'PHONE_SET_INPUT_CODE',
+            data: {
+                verifyCode: true
+            }
+        }).verifyCode).to.be.true;
+    });
+    it('PHONE_SEND_COUNTDOWN', () => {
+        expect(verifyPhoneInfo(initialState, {
+            type: 'PHONE_SEND_COUNTDOWN',
+            data: {
+                codeBtnText: ''
+            }
+        }).codeBtnText).to.equal('');
+    });
+    it('', () => {
+        expect(verifyPhoneInfo(initialState, '').isCheckLoading).to.be.false;
+    });
+});
\ No newline at end of file
diff --git a/test/unit/pages/verify-identity/components/now-highorder-verify-identity/report.test.js b/test/unit/pages/verify-identity/components/now-highorder-verify-identity/report.test.js
new file mode 100644
index 0000000..8ed3359
--- /dev/null
+++ b/test/unit/pages/verify-identity/components/now-highorder-verify-identity/report.test.js
@@ -0,0 +1,19 @@
+import Report from '../../../../../../src/pages/verify-identity/components/now-highorder-verify-identity/report';
+import { expect } from 'chai';
+
+describe('测试 /src/pages/verify-identity/components/now-highorder-verify-identity/report', function () {
+    describe('校验对方暴露的方法或函数', function () {
+        it('Report 为函数！', function () {
+            expect(Report).to.be.a('function');
+        });
+        const instance = new Report({
+            handleOnReady: () => {}
+        }, 1);
+        it('Report 实例化！', function () {
+            expect(instance).to.be.an('object');
+        });
+        it('Report 实例初始化！', function () {
+            expect(instance.init()).to.be.undefined;
+        });
+    });
+});
diff --git a/test/unit/pages/verify-identity/report.test.js b/test/unit/pages/verify-identity/report.test.js
new file mode 100644
index 0000000..989fb88
--- /dev/null
+++ b/test/unit/pages/verify-identity/report.test.js
@@ -0,0 +1,26 @@
+import Report from '../../../../src/pages/verify-identity/report';
+import { expect } from 'chai';
+
+describe('测试 /src/pages/verify-identity/report', function () {
+    describe('校验对方暴露的方法或函数', function () {
+        it('Report 为函数！', function () {
+            expect(Report).to.be.a('function');
+        });
+        const instance = new Report({
+            handleOnReady: () => {}
+        }, 1);
+        it('Report 实例化！', function () {
+            expect(instance).to.be.an('object');
+        });
+        it('Report 实例初始化！', function () {
+            expect(instance.init()).to.be.undefined;
+        });
+        it('Report reportPv存在', function () {
+            expect(instance.reportPv).to.be.a('function');
+        });
+        it('Report  reportPv 方法调用', function () {
+            expect(instance.reportPv()).to.be.undefined;
+        });
+        
+    });
+});
diff --git a/test/unit/pages/verify-phone/report.test.js b/test/unit/pages/verify-phone/report.test.js
new file mode 100644
index 0000000..3be4a2f
--- /dev/null
+++ b/test/unit/pages/verify-phone/report.test.js
@@ -0,0 +1,26 @@
+import Report from '../../../../src/pages/verify-phone/report';
+import { expect } from 'chai';
+
+describe('测试 /src/pages/verify-phone/report', function () {
+    describe('校验对方暴露的方法或函数', function () {
+        it('Report 为函数！', function () {
+            expect(Report).to.be.a('function');
+        });
+        const instance = new Report({
+            handleOnReady: () => {}
+        }, 1);
+        it('Report 实例化！', function () {
+            expect(instance).to.be.an('object');
+        });
+        it('Report 实例初始化！', function () {
+            expect(instance.init()).to.be.undefined;
+        });
+        it('Report reportPv存在', function () {
+            expect(instance.reportPv).to.be.a('function');
+        });
+        it('Report reportPv 调用', function () {
+            expect(instance.reportPv()).to.be.undefined;
+        });
+        
+    });
+});
